<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>知识索引</title>
      <link href="/%E7%B4%A2%E5%BC%95/"/>
      <url>/%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h1><span id="ji-zhu-zhan">技术栈</span><a href="#ji-zhu-zhan" class="header-anchor">#</a></h1><h2><span id="pbasic">Basic</span><a href="#pbasic" class="header-anchor">#</a></h2><ul><li>计算机组成原理（冯诺依曼结构，二进制，逻辑运算，存储器）</li><li>操作系统（进程线程，内存管理，文件系统IO）</li><li>汇编与编译原理（寄存器和内存，堆栈，CPU指令，编译器）</li><li>计算机网络（TCP/IP，UDP，DNS，HTTP）</li><li>编码（ASCII，Unicode，UTF-8）</li><li>数据结构（线性结构，链表，栈，队列，树，图）</li><li>算法（复杂度，二分法，贪心算法，动态规划，递归，查找排序，遍历树，图搜索）</li><li>编程模式与设计模式（面向对象，函数式编程，设计模式，MVC，MVVM）</li><li>数据库原理（关系型数据库，SQL语法）</li><li>C语言</li></ul><h2><span id="pwebbase">WebBase</span><a href="#pwebbase" class="header-anchor">#</a></h2><ul><li>Web开始（网页，浏览器，服务器，开发工具）</li><li>HTML（基本结构，标签，表单，媒体，Canvas）</li><li>CSS开始（引用方式，选择器）</li><li>CSS盒模型</li><li>CSS样式</li><li>CSS浮动，定位，层叠</li><li>CSS弹性布局，网格布局</li><li>CSS布局综合，BFC</li><li>CSS动画</li><li>CSS杂项</li><li>LESS</li><li>响应式布局，移动端适配，Bootstrap</li><li>JS开始（基本数据类型，表达式运算符，流程控制，异常处理）</li><li>JS内置对象（JSON，Date）</li></ul><h2><span id="pwebadvanced">WebAdvanced</span><a href="#pwebadvanced" class="header-anchor">#</a></h2><ul><li>NodeJS（NPM）</li><li>JS 异步编程（Promise，async，手写Promise）</li><li>JS 事件循环机制</li><li>WebSocket</li><li>AJAX</li><li>跨域解决方案</li></ul><h2><span id="pwebprofessional">WebProfessional</span><a href="#pwebprofessional" class="header-anchor">#</a></h2><ul><li>Vue</li><li>React</li></ul><h2><span id="pjava">Java</span><a href="#pjava" class="header-anchor">#</a></h2><ul><li>Java</li></ul><h2><span id="ppython">Python</span><a href="#ppython" class="header-anchor">#</a></h2><ul><li>Python</li></ul><h2><span id="pplus">Plus</span><a href="#pplus" class="header-anchor">#</a></h2><ul><li>Go</li></ul><h2><span id="ptools">Tools</span><a href="#ptools" class="header-anchor">#</a></h2><ul><li>版本控制工具（git，github）</li><li>Markdown</li></ul><h1><span id="ji-zhu-zhan">技术栈+</span><a href="#ji-zhu-zhan" class="header-anchor">#</a></h1><h2><span id="pdi-yi-bu-fen-shu-xue">第一部分 数学</span><a href="#pdi-yi-bu-fen-shu-xue" class="header-anchor">#</a></h2><h2><span id="pdi-er-bu-fen-ying-yu">第二部分 英语</span><a href="#pdi-er-bu-fen-ying-yu" class="header-anchor">#</a></h2><h2><span id="pdi-san-bu-fen-mian-shi">第三部分 面试</span><a href="#pdi-san-bu-fen-mian-shi" class="header-anchor">#</a></h2><p><a href="https://what-is-fe.gitee.io/">https://what-is-fe.gitee.io/</a></p><h1><span id="shu-qian">书签</span><a href="#shu-qian" class="header-anchor">#</a></h1><p><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></p><p><a href="https://www.caniuse.com/">Can I use ?</a></p><p><a href="http://doc.lipeihua.vip:8800">老李文档</a></p><p><a href="https://zh.javascript.info/">现代JS教程</a></p><p><a href="https://es6.ruanyifeng.com/">阮一峰ES6入门</a></p><p><a href="https://tool.lu/js/index.html">JS 代码美化、净化、压缩、解压、混淆</a></p><p><a href="http://nodejs.cn/api/">NodeJS API</a></p><p><a href="https://www.bootcdn.cn/">BootCDN</a></p><p><a href="https://www.jquery123.com/">jQuery API</a></p><p><a href="https://c.runoob.com/">菜鸟工具集</a></p>]]></content>
      
      
      <categories>
          
          <category> 未归类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>标注</title>
      <link href="/%E6%A0%87%E6%B3%A8/"/>
      <url>/%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<h1><span id="biao-zhu">标注</span><a href="#biao-zhu" class="header-anchor">#</a></h1><table><thead><tr><th>标识</th><th>描述</th></tr></thead><tbody><tr><td>△</td><td>重点</td></tr><tr><td>△△</td><td>超重点</td></tr></tbody></table><h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><!-- tocstop --></div>]]></content>
      
      
      <categories>
          
          <category> 未归类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题册（二）</title>
      <link href="/06/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%86%8C2/"/>
      <url>/06/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%86%8C2/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#udp-yu-tcp-de-qu-bie-shi-shi-me">UDP 与 TCP 的区别是什么？</a></li><li><a href="#post-he-get-de-qu-bie">Post 和 Get 的区别？</a></li></ul><!-- tocstop --></div><h1><span id="udp-yu-tcp-de-qu-bie-shi-shi-me">UDP 与 TCP 的区别是什么？</span><a href="#udp-yu-tcp-de-qu-bie-shi-shi-me" class="header-anchor">#</a></h1><p>首先 UDP 协议是<strong>面向无连接</strong>的，也就是说不需要在正式传递数据之前先连接起双方。然后 UDP 协议只是数据报文的搬运工，不保证有序且不丢失的传递到对端，并且UDP 协议也没有任何控制流量的算法，总的来说 UDP 相较于 TCP 更加的轻便。</p><p>UDP 相比 TCP 简单的多，不需要建立连接，不需要验证数据报文，不需要流量控制，只会把想发的数据报文一股脑的丢给对端。虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为。</p><p>TCP 建立连接需要三次握手，断开连接需要四次握手。滑动窗口解决了数据的丢包、顺序不对和流量控制问题拥塞窗口实现了对流量的控制，保证在全天候环境下最优的传递数据。</p><h1><span id="post-he-get-de-qu-bie">Post 和 Get 的区别？</span><a href="#post-he-get-de-qu-bie" class="header-anchor">#</a></h1><p>在技术上说：</p><ul><li>Get 请求能缓存，Post 不能</li><li>Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里（当然你想写到 <code>body</code> 里也是可以的），且会被浏览器保存历史纪录。Post 不会，但是在抓包的情况下都是一样的。</li><li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li><li>Post 支持更多的编码类型且不对数据类型限制</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>题型总结之异步顺序判断</title>
      <link href="/06/%E9%A2%98%E5%9E%8B%E4%B9%8B%E5%BC%82%E6%AD%A5%E9%A1%BA%E5%BA%8F%E5%88%A4%E6%96%AD/"/>
      <url>/06/%E9%A2%98%E5%9E%8B%E4%B9%8B%E5%BC%82%E6%AD%A5%E9%A1%BA%E5%BA%8F%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>第1题（难度1）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// 3 2 4 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第2题（难度1）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">// 2 5  3 4 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第3题（难度2）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// 3 7 4</span><span class="token comment">// 1 2</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第4题（难度3）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token parameter"> </span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">// 等四输出完后才会异步任务出现</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 1 7 2 3</span><span class="token comment">// 8 ==4 6 5==</span><span class="token comment">// 0 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第5题（难度3）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/03/16-MongoDB/"/>
      <url>/03/16-MongoDB/</url>
      
        <content type="html"><![CDATA[<p>MongoDB</p><p>Mongoose</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React 开始</title>
      <link href="/04/11-React%E5%BC%80%E5%A7%8B/"/>
      <url>/04/11-React%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可视化工具</title>
      <link href="/03/17-%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/03/17-%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1><span id="yi-echarts">一、Echarts</span><a href="#yi-echarts" class="header-anchor">#</a></h1><h1><span id="er-d3">二、D3</span><a href="#er-d3" class="header-anchor">#</a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>职场贴士</title>
      <link href="/06/%E8%81%8C%E5%9C%BA%E8%B4%B4%E5%A3%AB/"/>
      <url>/06/%E8%81%8C%E5%9C%BA%E8%B4%B4%E5%A3%AB/</url>
      
        <content type="html"><![CDATA[<h1><span id="wei-gui-lei">未归类</span><a href="#wei-gui-lei" class="header-anchor">#</a></h1><ul><li>不要和同事谈论工资。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 开始</title>
      <link href="/04/01-Vue%E5%BC%80%E5%A7%8B/"/>
      <url>/04/01-Vue%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="yi-vue">一、Vue</span><a href="#yi-vue" class="header-anchor">#</a></h1><p><strong>Vue</strong> (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p><a href="https://cn.vuejs.org/">官方文档</a></p><h2><span id="p1-qi-bu">1、起步</span><a href="#p1-qi-bu" class="header-anchor">#</a></h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码</title>
      <link href="/01/%E7%BC%96%E7%A0%81/"/>
      <url>/01/%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2><span id="pbase64">base64</span><a href="#pbase64" class="header-anchor">#</a></h2><p>base64 是网络上最常见的用于传输8Bit字节码的编码方式之一，就是一种基于64个可打印字符来表示二进制数据的方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django</title>
      <link href="/08/django/"/>
      <url>/08/django/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yanpenggong/article/details/82316514">Django的数据库详细操作</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考试专题</title>
      <link href="/%E8%80%83%E8%AF%95/"/>
      <url>/%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="cong-shu-ru-url-dao-ye-mian-xuan-ran-du-fa-sheng-liao-shi-me">从输入URL到页面渲染都发生了什么？</span><a href="#cong-shu-ru-url-dao-ye-mian-xuan-ran-du-fa-sheng-liao-shi-me" class="header-anchor">#</a></h1><ul><li>DNS 查询</li><li>TCP 三次握手</li><li>发起请求</li><li>服务器响应</li><li>页面渲染</li><li>TCP 四次挥手</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 使用技巧</title>
      <link href="/09/Windows10_%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/09/Windows10_%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><h1><span id="yi-kuai-jie-cao-zuo">一、快捷操作</span><a href="#yi-kuai-jie-cao-zuo" class="header-anchor">#</a></h1><ul><li><code>shift</code> 按住右键 可以在当前目录打开 <code>powershell</code></li><li>直接在地址栏输入 <code>cmd</code> 或者 <code>powershell</code> 在当前目录打开命令窗口</li></ul><h1><span id="er-tong-yong-kuai-jie-jian">二、通用快捷键</span><a href="#er-tong-yong-kuai-jie-jian" class="header-anchor">#</a></h1><ul><li><code>CTRL + SHIFT + V</code> 无格式黏贴</li></ul><h1><span id="san-wei-gui-lei">三、未归类</span><a href="#san-wei-gui-lei" class="header-anchor">#</a></h1><h2><span id="pgeng-gai-di-zhi-ying-she">更改地址映射</span><a href="#pgeng-gai-di-zhi-ying-she" class="header-anchor">#</a></h2><pre class="line-numbers language-none"><code class="language-none">C --&gt; Windows --&gt; System32 --&gt; drivers --&gt; etc --&gt; host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="pyou-jian-xin-jian-md-wen-jian">右键新建 .md 文件</span><a href="#pyou-jian-xin-jian-md-wen-jian" class="header-anchor">#</a></h2><ol><li>打开注册表</li><li><code>HKEY_CLASSES_ROOT</code> 添加<code>.md</code> ，<strong>修改默认值为 <code>Markdown.File</code></strong></li><li>添加子项 <code>ShellNew</code> ，在该子项中新建字符串值 <code>NullFile</code> ，内容不需要设置</li><li>绑定打开方式（ md文件–&gt;右键属性–&gt;打开方式 ）</li><li><code>HKEY_CLASSES_ROOT</code> 下新建 <code>Markdown.File</code>， 默认值为<code>Markdown File</code> ，可以自定义</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Windows10 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="yi-xian-xing-jie-gou">一、线性结构</span><a href="#yi-xian-xing-jie-gou" class="header-anchor">#</a></h1><h2><span id="p1-zhan">1、栈</span><a href="#p1-zhan" class="header-anchor">#</a></h2><h2><span id="p2-dui-lie">2、队列</span><a href="#p2-dui-lie" class="header-anchor">#</a></h2><h2><span id="p3-lian-biao">3、链表</span><a href="#p3-lian-biao" class="header-anchor">#</a></h2><h1><span id="er-shu">二、树</span><a href="#er-shu" class="header-anchor">#</a></h1><h2><span id="p1-er-cha-shu">1、二叉树</span><a href="#p1-er-cha-shu" class="header-anchor">#</a></h2><h2><span id="p2-avl-shu">2、AVL树</span><a href="#p2-avl-shu" class="header-anchor">#</a></h2><h2><span id="p3-trie">3、Trie</span><a href="#p3-trie" class="header-anchor">#</a></h2><h2><span id="p4-dui">4、堆</span><a href="#p4-dui" class="header-anchor">#</a></h2><h1><span id="san-tu">三、图</span><a href="#san-tu" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（面试向）</title>
      <link href="/01/%E7%AE%97%E6%B3%95_%E9%9D%A2%E8%AF%95%E5%90%91/"/>
      <url>/01/%E7%AE%97%E6%B3%95_%E9%9D%A2%E8%AF%95%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="yi-ji-chu">一、基础</span><a href="#yi-ji-chu" class="header-anchor">#</a></h1><h2><span id="p1-shi-jian-fu-za-du">1、时间复杂度</span><a href="#p1-shi-jian-fu-za-du" class="header-anchor">#</a></h2><h2><span id="p2-wei-yun-suan">2、位运算</span><a href="#p2-wei-yun-suan" class="header-anchor">#</a></h2><p>位运算在算法中作用很大，速度比四则运算快。</p><h1><span id="er-pai-xu">二、排序</span><a href="#er-pai-xu" class="header-anchor">#</a></h1><h2><span id="p1-mou-pao-pai-xu">1、冒泡排序</span><a href="#p1-mou-pao-pai-xu" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 冒泡排序法 JS</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 正序</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            t <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-cha-ru-pai-xu">2、插入排序</span><a href="#p2-cha-ru-pai-xu" class="header-anchor">#</a></h2><h2><span id="p3-xuan-ze-pai-xu">3、选择排序</span><a href="#p3-xuan-ze-pai-xu" class="header-anchor">#</a></h2><h2><span id="p4-gui-bing-pai-xu">4、归并排序</span><a href="#p4-gui-bing-pai-xu" class="header-anchor">#</a></h2><h2><span id="p5-kuai-su-pai-xu">5、快速排序</span><a href="#p5-kuai-su-pai-xu" class="header-anchor">#</a></h2><h2><span id="p6-dui-pai-xu">6、堆排序</span><a href="#p6-dui-pai-xu" class="header-anchor">#</a></h2><h1><span id="san-lian-biao">三、链表</span><a href="#san-lian-biao" class="header-anchor">#</a></h1><h1><span id="si-shu">四、树</span><a href="#si-shu" class="header-anchor">#</a></h1><h1><span id="wu-dong-tai-gui-hua">五、动态规划</span><a href="#wu-dong-tai-gui-hua" class="header-anchor">#</a></h1><h2><span id="p1-fei-bo-na-qi-shu-lie">1、斐波那契数列</span><a href="#p1-fei-bo-na-qi-shu-lie" class="header-anchor">#</a></h2><h1><span id="liu-di-gui">六、递归</span><a href="#liu-di-gui" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="yi-gai-nian">一、概念</span><a href="#yi-gai-nian" class="header-anchor">#</a></h1><p><strong>设计模式</strong>总的来说是一个抽象的概念，前人通过无数次的实践总结出的一套写代码的方式，通过这种方式写的代码可以让别人更加容易阅读、维护以及复用。</p><h1><span id="er-gong-han-mo-shi">二、工厂模式</span><a href="#er-gong-han-mo-shi" class="header-anchor">#</a></h1><h1><span id="san-dan-li-mo-shi">三、单例模式</span><a href="#san-dan-li-mo-shi" class="header-anchor">#</a></h1><h1><span id="si-gua-pei-qi-mo-shi">四、适配器模式</span><a href="#si-gua-pei-qi-mo-shi" class="header-anchor">#</a></h1><h1><span id="wu-zhuang-shi-mo-shi">五、装饰模式</span><a href="#wu-zhuang-shi-mo-shi" class="header-anchor">#</a></h1><h1><span id="liu-dai-li-mo-shi">六、代理模式</span><a href="#liu-dai-li-mo-shi" class="header-anchor">#</a></h1><h1><span id="qi-fa-bu-ding-yue-mo-shi">七、发布-订阅模式</span><a href="#qi-fa-bu-ding-yue-mo-shi" class="header-anchor">#</a></h1><h1><span id="ba-wai-guan-mo-shi">八、外观模式</span><a href="#ba-wai-guan-mo-shi" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 报错处理</title>
      <link href="/09/Windows10_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/09/Windows10_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2><span id="p2020-nian">2020年</span><a href="#p2020-nian" class="header-anchor">#</a></h2><p><a href="https://www.cnblogs.com/zjoch/p/11767950.html">远程桌面提示：身份验证错误 要求的函数不受支持</a></p><p><a href="https://blog.csdn.net/u010921682/article/details/105199098/">VMware 虚拟机复制文件卡死的解决</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安全防范专题</title>
      <link href="/03/12-%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83/"/>
      <url>/03/12-%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-xss">一、XSS</a><ul><li><a href="#1-zhuan-yi-zi-fu">（1）转义字符</a></li><li><a href="#2-csp">（2）CSP</a></li></ul></li><li><a href="#er-kua-yu-qing-qiu-wei-zao-csrf">二、跨域请求伪造 - CSRF</a><ul><li><a href="#1-samesite">（1）SameSite</a></li><li><a href="#2-yan-zheng-referer">（2）验证 Referer</a></li><li><a href="#3-token">（3）Token</a></li></ul></li><li><a href="#san-dian-ji-jie-chi">三、点击劫持</a><ul><li><a href="#1-x-frame-options">（1）X-FRAME-OPTIONS</a></li><li><a href="#2-js-fang-yu">（2）JS 防御</a></li></ul></li><li><a href="#si-zhong-jian-ren-gong-ji">四、中间人攻击</a></li></ul><!-- tocstop --></div><h1><span id="yi-xss">一、XSS</span><a href="#yi-xss" class="header-anchor">#</a></h1><blockquote><p>面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？</p></blockquote><p>XSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。</p><p>XSS 可以分为多种类型，但是总体上我认为分为两类：<strong>持久型和非持久型</strong>。</p><p>持久型也就是攻击的代码被服务端写入进<strong>数据库</strong>中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。</p><p>举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容。</p><p><img src="/03/12-%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83/C:%5CUsers%5CKEEL%5CDesktop%5CBLOG%5Csource%5Cimages%5C2020%5CXSS1.jpg" alt="img"></p><p>这种情况如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打开该页面的用户都会被攻击到。</p><p>非持久型相比于前者危害就小的多了，一般通过<strong>修改URL参数</strong>的方式加入攻击代码，诱导用户访问链接从而进行攻击。</p><p>举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- http://www.domain.com?name=&lt;script>alert(1)&lt;/script> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&#123;&#123;name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                                                  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。</p><p>对于 XSS 攻击来说，通常有两种方式可以用来防御。</p><h2><span id="p-1-zhuan-yi-zi-fu">（1）转义字符</span><a href="#p-1-zhuan-yi-zi-fu" class="header-anchor">#</a></h2><p>首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&amp;/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/>/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/"/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;quto;'</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/'/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;#39;'</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/`/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;#96;'</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\//g</span><span class="token punctuation">,</span> <span class="token string">'&amp;#x2F;'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> str<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过转义可以将攻击代码 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 变成</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; -&gt; &lt;script&gt;alert(1)&lt;&#x2F;script&gt;escape(&#39;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span><span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token function">xss</span><span class="token punctuation">(</span><span class="token string">'&lt;h1 id="title">XSS Demo&lt;/h1>&lt;script>alert("xss");&lt;/script>'</span><span class="token punctuation">)</span><span class="token comment">// -> &lt;h1>XSS Demo&lt;/h1>&amp;lt;script&amp;gt;alert("xss");&amp;lt;/script&amp;gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上示例使用了<code>js-xss</code> 来实现，可以看到在输出中保留了 <code>h1</code> 标签且过滤了 <code>script</code> 标签。</p><h2><span id="p-2-csp">（2）CSP</span><a href="#p-2-csp" class="header-anchor">#</a></h2><p>CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。</p><p>通常可以通过两种方式来开启 CSP：</p><ol><li>设置 HTTP Header 中的 <code>Content-Security-Policy</code></li><li>设置 <code>meta</code> 标签的方式 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</code></li></ol><p>这里以设置 HTTP Header 来举例</p><ul><li><p>只允许加载本站资源</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy: default-src ‘self’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>只允许加载 HTTPS 协议图片</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy: img-src https:&#x2F;&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>允许加载任何来源框架</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy: child-src &#39;none&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>当然可以设置的属性远不止这些，你可以通过查阅 <a href="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTTP%2FHeaders%2FContent-Security-Policy">文档</a> 的方式来学习，这里就不过多赘述其他的属性了。</p><p>对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。</p><h1><span id="er-kua-yu-qing-qiu-wei-zao-csrf">二、跨域请求伪造 - CSRF</span><a href="#er-kua-yu-qing-qiu-wei-zao-csrf" class="header-anchor">#</a></h1><blockquote><p>涉及面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？</p></blockquote><p>CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。</p><p>举个例子，假设网站中有一个通过 <code>GET</code> 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.domain.com&#x2F;xxx?comment&#x3D;&#39;attack&#39;&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么你是否会想到使用 <code>POST</code> 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 <code>POST</code> 请求。</p><p>防范 CSRF 攻击可以遵循以下几种规则：</p><ol><li>Get 请求不对数据进行修改</li><li>不让第三方网站访问到用户 Cookie</li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 Token</li></ol><h2><span id="p-1-samesite">（1）SameSite</span><a href="#p-1-samesite" class="header-anchor">#</a></h2><p>可以对 Cookie 设置 <code>SameSite</code> 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。</p><h2><span id="p-2-yan-zheng-referer">（2）验证 Referer</span><a href="#p-2-yan-zheng-referer" class="header-anchor">#</a></h2><p>对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。</p><h2><span id="p-3-token">（3）Token</span><a href="#p-3-token" class="header-anchor">#</a></h2><p>服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。</p><h1><span id="san-dian-ji-jie-chi">三、点击劫持</span><a href="#san-dian-ji-jie-chi" class="header-anchor">#</a></h1><blockquote><p>涉及面试题：什么是点击劫持？如何防范点击劫持？</p></blockquote><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 <code>iframe</code> 嵌套的方式嵌入自己的网页中，并将 <code>iframe</code> 设置为透明，在页面中透出一个按钮诱导用户点击。</p><p><img src="/03/12-%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83/C:%5CUsers%5CKEEL%5CDesktop%5CBLOG%5Csource%5Cimages%5C2020%5C16768734d57c5f47.jpg" alt="img"></p><p>对于这种攻击方式，推荐防御的方法有两种。</p><h2><span id="p-1-x-frame-options">（1）X-FRAME-OPTIONS</span><a href="#p-1-x-frame-options" class="header-anchor">#</a></h2><p><code>X-FRAME-OPTIONS</code> 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 <code>iframe</code> 嵌套的点击劫持攻击。</p><p>该响应头有三个值可选，分别是</p><ul><li><code>DENY</code>，表示页面不允许通过 <code>iframe</code> 的方式展示</li><li><code>SAMEORIGIN</code>，表示页面可以在相同域名下通过 <code>iframe</code> 的方式展示</li><li><code>ALLOW-FROM</code>，表示页面可以在指定来源的 <code>iframe</code> 中展示</li></ul><h2><span id="p-2-js-fang-yu">（2）JS 防御</span><a href="#p-2-js-fang-yu" class="header-anchor">#</a></h2><p>对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click-jack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">html</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">if</span> <span class="token punctuation">(</span>self <span class="token operator">==</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'click-jack'</span><span class="token punctuation">)</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      top<span class="token punctuation">.</span>location <span class="token operator">=</span> self<span class="token punctuation">.</span>location    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的作用就是当通过 <code>iframe</code> 的方式加载页面时，攻击者的网页直接不显示所有内容了。</p><h1><span id="si-zhong-jian-ren-gong-ji">四、中间人攻击</span><a href="#si-zhong-jian-ren-gong-ji" class="header-anchor">#</a></h1><blockquote><p>涉及面试题：什么是中间人攻击？如何防范中间人攻击？</p></blockquote><p>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。</p><p>通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。</p><p>当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化</title>
      <link href="/03/13-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/03/13-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-chong-hui-yu-chong-pai">一、重绘与重排</a></li><li><a href="#er-tu-pian-you-hua">二、图片优化</a><ul><li><a href="#1-ji-suan-tu-pian-da-xiao">1、计算图片大小</a></li><li><a href="#2-tu-pian-jia-zai-you-hua">2、图片加载优化</a></li></ul></li><li><a href="#san-dns-yu-jie-xi">三、DNS 预解析</a></li><li><a href="#si-jie-liu">四、节流</a></li><li><a href="#wu-fang-dou">五、防抖</a></li><li><a href="#liu-yu-jia-zai">六、预加载</a></li><li><a href="#qi-yu-xuan-ran">七、预渲染</a></li><li><a href="#ba-lan-zhi-xing">八、懒执行</a></li><li><a href="#jiu-lan-jia-zai">九、懒加载</a></li><li><a href="#shi-cdn">十、CDN</a></li></ul><!-- tocstop --></div><h1><span id="yi-chong-hui-yu-chong-pai">一、重绘与重排</span><a href="#yi-chong-hui-yu-chong-pai" class="header-anchor">#</a></h1><p><strong>重绘</strong> 当render tree（渲染树）中更新的属性只会影响元素的外观、风格，不会影响元素的布局的时候，浏览器需要重新绘制当前元素的样式，被称作为重绘。</p><p><strong>重排（回流）</strong> 当render tree中的一部分或者是全部，因为元素的尺寸、布局、隐藏等等改变引起页面的重新渲染，这个过程称作为重排，完成重排以后，浏览器会<a href>重绘</a>。</p><p>重排的情况:<br>①添加或者删除可见的DOM元素<br>②元素位置、尺寸、内容改变（例如：一个文本被另一个不同尺寸的图片替代）<br>③页面渲染初始化（无法避免）<br>④浏览器窗口尺寸改变</p><p>重绘不会引起重排，但重排一定会引起重绘，一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。重排和重绘是DOM编程中耗能的主要原因之一。</p><p><a href="https://www.cnblogs.com/soyxiaobi/p/9963019.html">前端性能优化之重排和重绘</a></p><h1><span id="er-tu-pian-you-hua">二、图片优化</span><a href="#er-tu-pian-you-hua" class="header-anchor">#</a></h1><h2><span id="p1-ji-suan-tu-pian-da-xiao">1、计算图片大小</span><a href="#p1-ji-suan-tu-pian-da-xiao" class="header-anchor">#</a></h2><p>对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 <strong>RGBA</strong> 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节，所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。</p><p>但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。</p><p>那么对于如何优化图片：</p><ul><li><strong>减少像素点</strong></li><li><strong>减少每个像素点能够显示的颜色</strong></li></ul><h2><span id="p2-tu-pian-jia-zai-you-hua">2、图片加载优化</span><a href="#p2-tu-pian-jia-zai-you-hua" class="header-anchor">#</a></h2><ol><li><p>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。</p></li><li><p>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。</p></li><li><p>小图使用 base64 格式</p></li><li><p>将多个图标文件整合到一张图片中（精灵图）</p></li><li><p>选择正确的图片格式：</p><p>（1）对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</p><p>（2）小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</p><p>（3）照片使用 JPEG</p></li></ol><h1><span id="san-dns-yu-jie-xi">三、DNS 预解析</span><a href="#san-dns-yu-jie-xi" class="header-anchor">#</a></h1><p>DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//yujiexi.cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="si-jie-liu">四、节流</span><a href="#si-jie-liu" class="header-anchor">#</a></h1><p>考虑一个场景，滚动事件中会发起网络请求，但是我们并不希望用户在滚动过程中一直发起请求，而是隔一段时间发起一次，对于这种情况我们就可以使用节流。</p><p>理解了节流的用途，我们就来实现下这个函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// func是用户传入需要防抖的函数</span><span class="token comment">// wait是等待时间</span><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 上一次执行该函数的时间</span>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当前时间</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 将当前时间和上一次执行函数时间对比</span>    <span class="token comment">// 如果差值大于设置的等待时间就执行函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTime <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      lastTime <span class="token operator">=</span> now      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">setInterval</span><span class="token punctuation">(</span>  <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="wu-fang-dou">五、防抖</span><a href="#wu-fang-dou" class="header-anchor">#</a></h1><p>考虑一个场景，有一个按钮点击会触发网络请求，但是我们并不希望每次点击都发起网络请求，而是当用户点击按钮一段时间后没有再次点击的情况才去发起网络请求，对于这种情况我们就可以使用防抖。</p><p>理解了防抖的用途，我们就来实现下这个函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// func是用户传入需要防抖的函数</span><span class="token comment">// wait是等待时间</span><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存一个定时器id</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 这里返回的函数是每次用户实际调用的防抖函数</span>  <span class="token comment">// 如果已经设定过定时器了就清空上一次的定时器</span>  <span class="token comment">// 开始一个新的定时器，延迟执行用户传入的方法</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="liu-yu-jia-zai">六、预加载</span><a href="#liu-yu-jia-zai" class="header-anchor">#</a></h1><p>在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早获取，这时候就可以使用预加载。</p><p>预加载其实是声明式的 <code>fetch</code> ，强制浏览器请求资源，并且不会阻塞 <code>onload</code> 事件，可以使用以下代码开启预加载</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要的文件延后加载，唯一缺点就是兼容性不好。</p><h1><span id="qi-yu-xuan-ran">七、预渲染</span><a href="#qi-yu-xuan-ran" class="header-anchor">#</a></h1><p>可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prerender<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>预渲染虽然可以提高页面的加载速度，但是要确保该页面大概率会被用户在之后打开，否则就是白白浪费资源去渲染。</p><h1><span id="ba-lan-zhi-xing">八、懒执行</span><a href="#ba-lan-zhi-xing" class="header-anchor">#</a></h1><p>懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。</p><h1><span id="jiu-lan-jia-zai">九、懒加载</span><a href="#jiu-lan-jia-zai" class="header-anchor">#</a></h1><p>懒加载就是将不关键的资源延后加载。</p><p>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 <code>src</code> 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 <code>src</code> 属性，这样图片就会去下载资源，实现了图片懒加载。</p><p>懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等。</p><h1><span id="shi-cdn">十、CDN</span><a href="#shi-cdn" class="header-anchor">#</a></h1><p>CDN 的原理是尽可能的在各个地方分布机房缓存数据，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源。</p><p>因此，我们可以将静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode</title>
      <link href="/09/VSCode/"/>
      <url>/09/VSCode/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora Mermaid</title>
      <link href="/09/TyporaMermaid/"/>
      <url>/09/TyporaMermaid/</url>
      
        <content type="html"><![CDATA[<h2><span id="pmu-lu">目录</span><a href="#pmu-lu" class="header-anchor">#</a></h2><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#1-liu-cheng-tu">1、流程图</a></li><li><a href="#2-shi-xu-tu">2、时序图</a></li><li><a href="#3-zhuang-tai-tu">3、状态图</a></li><li><a href="#4-lei-tu">4、类图</a></li><li><a href="#5-gan-te-tu">5、甘特图</a></li><li><a href="#6-bing-tu">6、饼图</a></li></ul><!-- tocstop --></div><p>Mermaid 是一种简单的类似 Markdown 的脚本语言，通过 JavaScript 编程语言，将文本转换为图片。因此，真正实现画图功能的并不是 Typora 本身，它只是内置了对 Mermaid 的支持。</p><h2><span id="p1-liu-cheng-tu">1、流程图</span><a href="#p1-liu-cheng-tu" class="header-anchor">#</a></h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">graph TD;    A--&gt;B;    A--&gt;C;    B--&gt;D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2020/v2-d4e7402e1dce5cefb924776e01b0bffb_r.jpg" alt="preview"></p><h2><span id="p2-shi-xu-tu">2、时序图</span><a href="#p2-shi-xu-tu" class="header-anchor">#</a></h2><p>语法解释：<code>-&gt;&gt;</code> 代表实线箭头，<code>--&gt;&gt;</code> 则代表虚线。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">sequenceDiagram    Alice-&gt;&gt;John: Hello John, how are you?    John--&gt;&gt;Alice: Great!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/2020/v2-decde80f8f46a4a5399f20c55bb4b00a_720w.jpg" alt="img"></p><h2><span id="p3-zhuang-tai-tu">3、状态图</span><a href="#p3-zhuang-tai-tu" class="header-anchor">#</a></h2><p>语法解释：<code>[*]</code> 表示开始或者结束，如果在箭头右边则表示结束。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">stateDiagram    [*] --&gt; s1    s1 --&gt; [*]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/2020/v2-b33193d8007a927648f169cf075864a8_720w.jpg" alt="img"></p><h2><span id="p4-lei-tu">4、类图</span><a href="#p4-lei-tu" class="header-anchor">#</a></h2><p>语法解释：<code>&lt;|--</code> 表示继承，<code>+</code> 表示 <code>public</code>，<code>-</code> 表示 <code>private</code>。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">classDiagram      Animal &lt;|-- Duck      Animal &lt;|-- Fish      Animal &lt;|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck&#123;          +String beakColor          +swim()          +quack()      &#125;      class Fish&#123;          -int sizeInFeet          -canEat()      &#125;      class Zebra&#123;          +bool is_wild          +run()      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2020/v2-b6da49f44aee84e63186d91de51596d4_720w.jpg" alt="img"></p><h2><span id="p5-gan-te-tu">5、甘特图</span><a href="#p5-gan-te-tu" class="header-anchor">#</a></h2><p>甘特图一般用来表示项目的计划排期，目前在工作中经常会用到。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">gantt    title 工作计划    dateFormat  YYYY-MM-DD    section Section    A task           :a1, 2020-01-01, 30d    Another task     :after a1  , 20d    section Another    Task in sec      :2020-01-12  , 12d    another task      : 24d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2020/v2-4e8a1f1d33213f64fd0eb3779b1e6ad2_720w.jpg" alt="img"></p><h2><span id="p6-bing-tu">6、饼图</span><a href="#p6-bing-tu" class="header-anchor">#</a></h2><p>饼图使用 <code>pie</code> 表示，标题下面分别是区域名称及其百分比。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2020/v2-804c453be09ada35d3257f1601c19d5a_720w.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora</title>
      <link href="/09/Typora/"/>
      <url>/09/Typora/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#1-zhuan-zhu-mo-shi">1、专注模式</a></li><li><a href="#2-da-zi-ji-mo-shi">2、打字机模式</a></li><li><a href="#3-shu-xue-gong-shi">3、数学公式</a></li></ul><!-- tocstop --></div><ul><li>源代码模式：CTRL + /</li><li>打字机模式：F8</li><li>专注模式：F9</li><li>显示/隐藏侧边栏：CTRL + SHIFT + L</li><li>段落：CTRL + 0</li><li>标题：CTRL + 1/6</li><li>表格：CTRL + T</li><li>选中一整行：CTRL + L</li><li>选中单词：CTRL + D</li><li>跳转到文章开头：CTRL + HOME</li><li>跳转到文章结尾：CTRL + END</li><li>插入链接：CTRL + K</li><li>设置：CTRL + ，</li><li>返回顶部: CTRL + Home</li></ul><h2><span id="p1-zhuan-zhu-mo-shi">1、专注模式</span><a href="#p1-zhuan-zhu-mo-shi" class="header-anchor">#</a></h2><p>快捷键 <code>F8</code> 打开专注模式，编辑器会高亮显示当前正在编辑的段落，让你更加专注于当前内容，不受视觉干扰。</p><h2><span id="p2-da-zi-ji-mo-shi">2、打字机模式</span><a href="#p2-da-zi-ji-mo-shi" class="header-anchor">#</a></h2><p>快捷键 <code>F9</code> 打开打字机模式，当前正在编辑的段落会居中显示。</p><h2><span id="p3-shu-xue-gong-shi">3、数学公式</span><a href="#p3-shu-xue-gong-shi" class="header-anchor">#</a></h2><p>数学的公式块是使用 <em>LaTeX</em> 语言实现，输入<code>$$</code>，然后按下<code>Enter</code>键就会弹出一个支持 TeX/LaTeX 语法的输入框。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建工具 gulp + webpack</title>
      <link href="/03/14-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/03/14-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-gulp">一、gulp</a><ul><li><a href="#1-kai-shi">1、开始</a></li></ul></li><li><a href="#jin-an-zhuang-dao-sheng-chan-huan-jing">仅安装到生产环境</a><ul><li><a href="#2-cha-jian">2、插件</a></li></ul></li><li><a href="#er-webpack"><strong>二、webpack</strong> △</a><ul><li><a href="#1-kai-shi-1">1、开始</a></li></ul></li><li><a href="#ju-bu-an-zhuang-jian-yi">局部安装（建议）</a><ul><li><a href="#2-ji-ben-shi-yong">2、基本使用</a></li></ul></li><li><a href="#output-span-aria-hidden-true-class-line-numbers-rows-span-span-span-span-span-code-pre-hexopostrendercodeblock">-output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></a></li><li><a href="#da-bao-duo-ge-wen-jian">打包多个文件</a><ul><li><a href="#3-da-bao-css-less-sass-zi-yuan">3、打包CSS/LESS/SASS资源</a></li><li><a href="#4-js-eslint">4、JS eslint</a></li><li><a href="#5-js-yu-fa-zhuan-huan">5、JS语法转换</a></li></ul></li><li><a href="#babel-x2f-core-babel-de-he-xin-ku">@babel/core babel 的核心库</a></li><li><a href="#babel-x2f-preset-env-babel-yu-she-gong-ju-bao-mo-ren-ke-yi-jiang-suo-you-zui-xin-de-yu-fa-zhuan-wei-wei-es5-span-aria-hidden-true-class-line-numbers-rows-span-span-span-span-span-span-span-code-pre-hexopostrendercodeblock">@babel/preset-env babel 预设工具包，默认可以将所有最新的语法转为为 ES5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></a><ul><li><a href="#6-js-jian-rong-xing-chu-li">6、JS 兼容性处理</a></li><li><a href="#7-da-bao-yang-shi-wen-jian-zhong-de-tu-pian-zi-yuan">7、打包样式文件中的图片资源</a></li><li><a href="#8-da-bao-html-wen-jian">8、打包HTML文件</a></li><li><a href="#9-da-kai-html-zhong-de-tu-pian-zi-yuan">9、打开HTML中的图片资源</a></li><li><a href="#10-da-bao-zi-ti-zi-yuan">10、打包字体资源</a></li><li><a href="#11-zi-dong-bian-yi-da-bao-yun-xing">11、自动编译打包运行</a></li><li><a href="#12-devtool">12、devtool</a></li><li><a href="#13-zhun-bei-sheng-chan-huan-jing">13、准备生产环境</a></li><li><a href="#14-ti-qu-css-cheng-dan-du-wen-jian">14、提取CSS成单独文件</a></li><li><a href="#15-tian-jia-css-jian-rong">15、添加CSS兼容</a></li><li><a href="#16-ya-suo-css">16、压缩CSS</a></li></ul></li><li><a href="#san-webpack-xing-neng-you-hua">三、webpack 性能优化</a><ul><li><a href="#1-jian-shao-da-bao-shi-jian">1、减少打包时间</a><ul><li><a href="#1-1-you-hua-loader">1.1 优化 Loader</a></li><li><a href="#1-2-happypack">1.2 HappyPack</a></li><li><a href="#1-3-dllplugin">1.3 DllPlugin</a></li><li><a href="#1-4-dai-ma-ya-suo">1.4 代码压缩</a></li><li><a href="#1-5-xiao-de-you-hua-dian">1.5 小的优化点</a></li></ul></li><li><a href="#2-jian-shao-webpack-da-bao-zhi-hou-de-wen-jian-ti-ji">2、减少 webpack 打包之后的文件体积</a><ul><li><a href="#2-1-an-xu-jia-zai">2.1 按需加载</a></li><li><a href="#2-2-scope-hoisting">2.2 Scope Hoisting</a></li><li><a href="#2-3-tree-shaking">2.3 Tree Shaking</a></li></ul></li></ul></li></ul><!-- tocstop --></div><p>自动化构建工具：<strong>开发环境 --&gt; 生产环境</strong></p><p>开发环境（development）注重开发效率和源码的阅读。</p><p>生产环境（production）注重代码的执行效率（压缩）。</p><p>gulp / grunt 属于任务流工具（Task Runner）</p><p>webpack 是模块化打包工具（bundler）</p><h1><span id="yi-gulp">一、gulp</span><a href="#yi-gulp" class="header-anchor">#</a></h1><h2><span id="p1-kai-shi">1、开始</span><a href="#p1-kai-shi" class="header-anchor">#</a></h2><p>（1）安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 全局安装npm i gulp -g# 仅安装到生产环境npm i gulp -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）配置 <code>gulpfile.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// task </span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 执行任务</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回一个可读流</span>    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">createReadStresm</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）执行 <code>gulp</code> | <code>npx gulp</code>（局部安装）</p><h2><span id="p2-cha-jian">2、插件</span><a href="#p2-cha-jian" class="header-anchor">#</a></h2><p><code>gulp-jshint</code> 语法检查</p><p><code>gulp-babel</code> 语法转换</p><h1><span id="er-webpack"><strong>二、webpack</strong> △</span><a href="#er-webpack" class="header-anchor">#</a></h1><p><strong><a href="https://www.webpackjs.com/">webpack</a></strong> 是一个模块打包器（bundler），根据模块的依赖关系进行静态分析，生成对应的静态资源。对 webpack 来说，前端所有资源文件（js/json/css/less/img/…）都会作为模块处理。</p><p>核心概念</p><p><code>Entry</code> 入口起点，指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。</p><p><code>Output</code> 告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。</p><p><code>Loader</code> 让 webpack 能够处理那些非JS文件。</p><p><code>Plugins</code> 插件，用于执行范围更广的任务，比如打包优化，压缩。</p><p><code>Mode</code> 模式，有生产模式（production）和开发模式（development）。</p><h2><span id="p1-kai-shi">1、开始</span><a href="#p1-kai-shi" class="header-anchor">#</a></h2><p>（1）初始化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 全局安装npm i webpack webpack-cli -g# 局部安装（建议）npm i webpack webpack-cli -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-ji-ben-shi-yong">2、基本使用</span><a href="#p2-ji-ben-shi-yong" class="header-anchor">#</a></h2><pre class="line-numbers language-tree" data-language="tree"><code class="language-tree">demo ├── src │   ├── js │   │   ├── app.js │   │   └── mod.js │   └── index.html ├── build ├── package.json └── webpack.config.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）打包JS文件</p><p>能够编译打包js和json文件，并且能将es6的模块化语法转换成浏览器能识别的语法。</p><p>将 <code>src/js/app.js</code> 打包成开发环境文件 <code>build/js/app.js</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx webpack src&#x2F;js&#x2F;app.js -o build&#x2F;js&#x2F;app.js --mode&#x3D;develoment#                         -output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打包到生产环境（比生产环境多了一个<strong>代码压缩</strong>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx webpack src&#x2F;js&#x2F;app.js -o build&#x2F;js&#x2F;app.js --mode&#x3D;production<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>缺点就是不能编译打包 CSS img 等文件，不能将ES6基本语法转化成ES5以下语法。</p><p>可以通过配置文件改善。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 对指定文件进行打包npx webpack xxx.js --output xxx.js # 打包多个文件npx webpack x1.js x2.js <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）默认配置文件 <code>webpack.config.js</code> △</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>resolve<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 指定打包文件的入口</span>    <span class="token comment">// （单入口写法）</span>    <span class="token comment">// entry: ".src/js/app.js",</span>    <span class="token comment">// （多入口写法）</span>    entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        app<span class="token operator">:</span> <span class="token string">"./src/js/app.js"</span><span class="token punctuation">,</span>        mod<span class="token operator">:</span> <span class="token string">"./src/js/mod.js"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// output</span>    output<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 指定打包之后的名字</span>        <span class="token comment">//               ↓ entry 的属性名</span>        filename<span class="token operator">:</span> <span class="token string">"js/[name].index.js"</span><span class="token punctuation">,</span>        <span class="token comment">// 指定打包的绝对路径</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./build"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 指定打包模式</span>    <span class="token comment">// - development 开发模式</span>    <span class="token comment">// - production  生产模式</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 这里是局部安装的命令，全局安装直接 webpack 即可npx webpack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）清空上次打包的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install clean-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>cleanWebpackPlugin<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    plugins<span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">cleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）配置 <code>package.json</code> 编译命令</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// package.json</span><span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"build"</span><span class="token operator">:</span> <span class="token string">"npx webpack"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// bash</span>npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-da-bao-css-less-sass-zi-yuan">3、打包CSS/LESS/SASS资源</span><a href="#p3-da-bao-css-less-sass-zi-yuan" class="header-anchor">#</a></h2><p>（1）打包CSS</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install style-loader css-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 入口文件 app.js</span><span class="token keyword">import</span> <span class="token string">"../css/app.css"</span><span class="token punctuation">;</span><span class="token comment">// 配置文件 webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>            test<span class="token operator">:</span><span class="token regex">/\.css$/</span><span class="token punctuation">,</span>            loader<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>index.html</code> 把 <code>build/js/app.js</code> 引入之后就能加载样式了。</p><p>（2）打包LESS</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install less-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 入口文件 app.jsimport &quot;..&#x2F;css&#x2F;style.less&quot;;&#x2F;&#x2F; 配置文件 webpack.config.jsmodule.exports &#x3D; &#123;    &#x2F;&#x2F; ...    module:&#123;        rules:[            &#123;            test:&#x2F;\.css$&#x2F;,            loader:[&quot;style-loader&quot;, &quot;css-loader&quot;]            &#125;,            &#123;            test:&#x2F;\.less$&#x2F;,            use:[&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;]            &#125;        ]    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）打包SASS</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install sass-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p4-js-eslint">4、JS eslint</span><a href="#p4-js-eslint" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install eslint-loader eslint -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 只检测 js 文件</span>                test<span class="token operator">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>                <span class="token comment">// 排除的目录</span>                exclude<span class="token operator">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>                <span class="token comment">// 要检查的目录</span>                include<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token comment">// 提前加载使用</span>                enforce<span class="token operator">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span>                use<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    loader<span class="token operator">:</span><span class="token string">"eslint-loader"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// .eslintrc.js（项目根目录）</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"parserOptions"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token comment">// 支持 ES6</span>        <span class="token string">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token comment">// 使用 ES6 模块化</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"env"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 设置环境</span>        <span class="token string">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">// 支持浏览器环境</span>        <span class="token string">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span>       <span class="token comment">// 支持服务器环境</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token comment">// 如果这个地方定义了但是没有用，会过不去</span>    <span class="token comment">// Unexpected top-level property "global"</span>    <span class="token string">"global"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>             <span class="token comment">// 声明使用的全局变量</span>        <span class="token string">"$"</span><span class="token operator">:</span><span class="token string">"readonly"</span><span class="token punctuation">,</span>    <span class="token comment">// 不允许重写 "writable" 可修改</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"rules"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>              <span class="token comment">// 0/off忽略 1/warn警告 2/error错误</span>        <span class="token string">"eqeqeq"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>       <span class="token comment">// 必须使用全等</span>        <span class="token string">"no-alert"</span><span class="token operator">:</span> <span class="token number">0</span>      <span class="token comment">// 禁止使用 alert confirm prompt</span>        <span class="token string">"no-console"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token comment">// 禁止使用 console</span>        <span class="token string">"no-var"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>       <span class="token comment">// 禁用 var</span>        <span class="token string">"indent"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 缩进风格</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 使用 eslint 推荐的默认规则</span>    <span class="token string">"extends"</span><span class="token operator">:</span> <span class="token string">"eslint:recommended"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p5-js-yu-fa-zhuan-huan">5、JS语法转换</span><a href="#p5-js-yu-fa-zhuan-huan" class="header-anchor">#</a></h2><p><code>@babel/preset-env</code> 将新语法转成 ES5。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install babel-loader @babel&#x2F;core @babel&#x2F;preset-env -D# @babel&#x2F;core  babel 的核心库# @babel&#x2F;preset-env  babel 预设工具包，默认可以将所有最新的语法转为为 ES5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>            test<span class="token operator">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            exclude<span class="token operator">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>            use<span class="token operator">:</span><span class="token punctuation">&#123;</span>                loader<span class="token operator">:</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                options<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p6-js-jian-rong-xing-chu-li">6、JS 兼容性处理</span><a href="#p6-js-jian-rong-xing-chu-li" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install @babel&#x2F;polyfill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 入口文件 app.js</span><span class="token keyword">import</span> <span class="token string">"@babel/polyfill"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决 <code>babel</code> 只能转换语法的问题，引入 <code>polyfill</code> 可以转换高级语法（如 <code>Promise</code> ）。</p><h2><span id="p7-da-bao-yang-shi-wen-jian-zhong-de-tu-pian-zi-yuan">7、打包样式文件中的图片资源</span><a href="#p7-da-bao-yang-shi-wen-jian-zhong-de-tu-pian-zi-yuan" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install file-loader url-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js </span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                test<span class="token operator">:</span> <span class="token regex">/\.(png|jpg|gif)$/</span><span class="token punctuation">,</span>                use<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    loader<span class="token operator">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>                    options<span class="token operator">:</span><span class="token punctuation">&#123;</span>                        <span class="token comment">// 8KB以下的base64处理</span>                        limit<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>                        <span class="token comment">// 文件本地输出路径</span>                        outputPath<span class="token operator">:</span> <span class="token string">"images"</span><span class="token punctuation">,</span>                        <span class="token comment">// 图片URL路径</span>                        publicPath<span class="token operator">:</span> <span class="token string">"../build/images"</span><span class="token punctuation">,</span>                        <span class="token comment">// 修改文件名称和后缀</span>                        name<span class="token operator">:</span> <span class="token string">"[hash:8]"</span><span class="token punctuation">.</span><span class="token punctuation">[</span>ext<span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p8-da-bao-html-wen-jian">8、打包HTML文件</span><a href="#p8-da-bao-html-wen-jian" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install html-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 设置要编译的 HTML 源文件路径</span>            template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>             <span class="token comment">// 设置打包之后的文件名，默认 index.html</span>            filename<span class="token operator">:</span> <span class="token string">'home.html'</span><span class="token punctuation">,</span>            title<span class="token operator">:</span> <span class="token string">"我是打包之后的文件"</span><span class="token punctuation">,</span>                        <span class="token comment">// 传入参数</span>            <span class="token comment">// -- &lt;%=user%></span>            <span class="token comment">// -- &lt;%if(user)%></span>            arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1111</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">// 加载的JS增加一个后缀</span>            <span class="token comment">// JS内容变化，后缀会重新生成</span>            hash<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">// 指定要引入的JS文件</span>            <span class="token comment">// app 是entry对象的属性名不是文件名</span>            chunk<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            excludeChunk<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 除了...之外</span>            <span class="token comment">// 不引入 JS</span>            <span class="token comment">// - "head", 放到head里</span>            <span class="token comment">// - "body"</span>            inject<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 移除注释</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">// 移除属性中的引号</span>                removeAttributeQuotes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 <span class="token comment">// 将代码进行折叠，去除空格</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p9-da-kai-html-zhong-de-tu-pian-zi-yuan">9、打开HTML中的图片资源</span><a href="#p9-da-kai-html-zhong-de-tu-pian-zi-yuan" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install html-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                test<span class="token operator">:</span> <span class="token regex">/\.(html)$/</span><span class="token punctuation">,</span>                use<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    loader<span class="token operator">:</span> <span class="token string">"html-loader"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p10-da-bao-zi-ti-zi-yuan">10、打包字体资源</span><a href="#p10-da-bao-zi-ti-zi-yuan" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install file-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>                test<span class="token operator">:</span><span class="token regex">/\.(eot|svg|woff|woff2|ttf)$/</span><span class="token punctuation">,</span>                 loader<span class="token operator">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>                options<span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 输出的目录</span>                    outputPath<span class="token operator">:</span> <span class="token string">"fonts"</span><span class="token punctuation">,</span>                    name<span class="token operator">:</span><span class="token string">'[hash:8].[ext]'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p11-zi-dong-bian-yi-da-bao-yun-xing">11、自动编译打包运行</span><a href="#p11-zi-dong-bian-yi-da-bao-yun-xing" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install webpack-dev-server -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    output<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>        <span class="token comment">// 添加 devServer 服务后需要调整输出的路径</span>        publicPath<span class="token operator">:</span> <span class="token string">'/'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>        <span class="token comment">// 删除 publicPath 配置</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 配置服务</span>    devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 自动打开浏览器</span>        open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">// 启动 gzip 压缩</span>        compress<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment">// 端口号</span>        port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>        <span class="token comment">// 开启热模替换功能</span>        hot<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 启动服务npx webpack-dev-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>热模替换</p><p>HMR，Hot Module Replacement，热模替换功能会在应用程序运行过程中替换。添加或删除模块，而无需重新加载整个界面。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// index.html 不能自动刷新的问题</span>    entry<span class="token operator">:</span><span class="token punctuation">&#123;</span>        main<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"./src/js/app.js"</span><span class="token punctuation">,</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p12-devtool">12、devtool</span><a href="#p12-devtool" class="header-anchor">#</a></h2><p>devtools 是 webpack 中的一个配置，可以将压缩/编译文件中的代码映射回源文件中的原始位置，便于调试代码。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token comment">// 设置 devtool 策略（生产环境需改成 none）</span>    devtool<span class="token operator">:</span> <span class="token string">"cheap-module-eval-sourse-map"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p13-zhun-bei-sheng-chan-huan-jing">13、准备生产环境</span><a href="#p13-zhun-bei-sheng-chan-huan-jing" class="header-anchor">#</a></h2><p>webpack.config.js --&gt; webpack.dev.js + webpack.prod.js</p><p>运行非默认的配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">webpack-dev-server --config .&#x2F;config&#x2F;webpack.dev.jsnpx webpack --config .&#x2F;config&#x2F;webpack.prot.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>加到 <code>package.json</code> 快捷命令中 <code>dev</code> / <code>build</code></p><h2><span id="p14-ti-qu-css-cheng-dan-du-wen-jian">14、提取CSS成单独文件</span><a href="#p14-ti-qu-css-cheng-dan-du-wen-jian" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install mini-css-exrtract-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.prod.js</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span>              <span class="token comment">// 修改</span>              <span class="token punctuation">&#123;</span>               test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>less$\<span class="token punctuation">,</span>               use<span class="token operator">:</span><span class="token punctuation">[</span>               MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>               <span class="token string">'css-loader'</span><span class="token punctuation">,</span>               <span class="token string">'less-loader'</span>              <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    plugins<span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            filename<span class="token operator">:</span> <span class="token string">"css.[hash:8].css"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p15-tian-jia-css-jian-rong">15、添加CSS兼容</span><a href="#p15-tian-jia-css-jian-rong" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install postcss-loader autoprefixer -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.prod.js</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mini-css-extract-plugin"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span>              <span class="token comment">// 修改</span>              <span class="token punctuation">&#123;</span>               test<span class="token operator">:</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>less$\<span class="token punctuation">,</span>               use<span class="token operator">:</span><span class="token punctuation">[</span>               MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>               <span class="token string">'css-loader'</span><span class="token punctuation">,</span>               <span class="token punctuation">&#123;</span>               loader<span class="token operator">:</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>               options<span class="token operator">:</span><span class="token punctuation">&#123;</span>               plugins<span class="token operator">:</span><span class="token punctuation">[</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>               <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               <span class="token string">'less-loader'</span>              <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// .browserslistrc (根目录)</span><span class="token comment">// 目标浏览器配置表</span>chrome <span class="token number">50</span>last <span class="token number">1</span> versionsie <span class="token number">10</span>iOS <span class="token number">7</span><span class="token comment">// >1%                 全球超过1%人使用的浏览器</span><span class="token comment">// >1% in US</span><span class="token comment">// last 1 version      所有浏览器兼容到最后1个版本根据CanIUse.com追踪的版本</span><span class="token comment">// Firefox > 20        指定浏览器的版本范围</span><span class="token comment">// since 2013          2013年之后发布的版本</span><span class="token comment">// cover 99%           99%的浏览器都是目标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p16-ya-suo-css">16、压缩CSS</span><a href="#p16-ya-suo-css" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install optimize-css-assets-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.prod.js</span><span class="token keyword">const</span> OptimizeCssAssetsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    plugins<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>             cssProcessorPluginOptions<span class="token operator">:</span><span class="token punctuation">&#123;</span>             <span class="token comment">// 移除所有注释</span>             preset<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>disardComments<span class="token operator">:</span> <span class="token punctuation">&#123;</span>removeAll<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>             <span class="token comment">// 解决 无 sourse map 问题</span>             cssProcessorOptions<span class="token operator">:</span><span class="token punctuation">&#123;</span>                 map<span class="token operator">:</span> <span class="token boolean">true</span>             <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-webpack-xing-neng-you-hua">三、webpack 性能优化</span><a href="#san-webpack-xing-neng-you-hua" class="header-anchor">#</a></h1><h2><span id="p1-jian-shao-da-bao-shi-jian">1、减少打包时间</span><a href="#p1-jian-shao-da-bao-shi-jian" class="header-anchor">#</a></h2><h3><span id="p1-1-you-hua-loader">1.1 优化 Loader</span><a href="#p1-1-you-hua-loader" class="header-anchor">#</a></h3><p>对于 Loader 来说，影响打包效率的首当其冲必属 Babel。 因为 Babel 会将代码转成字符串生成 AST，然后对 AST 继续进行转变最后再生成新的代码，项目越大，要转换的代码越多，效率就越低。</p><p>（1）优化 <strong>Loader 的文件搜索范围</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    module<span class="token operator">:</span><span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                test<span class="token operator">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>                loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                <span class="token comment">// 限定搜索范围</span>                include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token comment">// 排除文件夹</span>                exclude<span class="token operator">:</span> <span class="token regex">/node_modules/</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）将 Babel 编译过的文件缓存起来，下次只需要编译更改过的代码文件即可，这样可以大副加快打包时间。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">loader<span class="token operator">:</span> <span class="token string">'babel-loader?cacheDirectory=true'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p1-2-happypack">1.2 HappyPack</span><a href="#p1-2-happypack" class="header-anchor">#</a></h3><p>受限于 NodeJS 是单线程运行的，所以 webpack 在打包的过程中也是，特别是在执行 Loader 的时候。<strong>HappyPack</strong> 可以将 Loader 的同步执行转换成并行的，这样就能充分利用系统资源来加快打包效率了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        loaders<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            test<span class="token operator">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            exclude<span class="token operator">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>            <span class="token comment">// id 后面的内容对应下面</span>            loader<span class="token operator">:</span> <span class="token string">'happypack/loader?id=happybabel'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            id<span class="token operator">:</span> <span class="token string">'happybabel'</span><span class="token punctuation">,</span>            loaders<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader?cacheDirectory'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">// 开启 4 个线程</span>            threads<span class="token operator">:</span> <span class="token number">4</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p1-3-dllplugin">1.3 DllPlugin</span><a href="#p1-3-dllplugin" class="header-anchor">#</a></h3><p><strong>DllPlugin 可以将特定的类库提前打包然后引入</strong>。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 单独配置在一个文件中</span><span class="token comment">// webpack.dll.conf.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 想统一打包的类库</span>    vendor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'[name].dll.js'</span><span class="token punctuation">,</span>    library<span class="token operator">:</span> <span class="token string">'[name]-[hash]'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">// name 必须和 output.library 一致</span>      name<span class="token operator">:</span> <span class="token string">'[name]-[hash]'</span><span class="token punctuation">,</span>      <span class="token comment">// 该属性需要与 DllReferencePlugin 中一致</span>      context<span class="token operator">:</span> __dirname<span class="token punctuation">,</span>      path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">,</span> <span class="token string">'[name]-manifest.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们需要执行这个配置文件生成依赖文件，接下来我们需要使用 <code>DllReferencePlugin</code> 将依赖文件引入项目中。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.conf.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      context<span class="token operator">:</span> __dirname<span class="token punctuation">,</span>      <span class="token comment">// manifest 就是之前打包出来的 json 文件</span>      manifest<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dist/vendor-manifest.json'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p1-4-dai-ma-ya-suo">1.4 代码压缩</span><a href="#p1-4-dai-ma-ya-suo" class="header-anchor">#</a></h3><p>在 webpack3 中，我们一般使用 <code>UglifyJS</code> 来压缩代码，但是这个是单线程运行的，为了加快效率，我们可以使用 <code>webpack-parallel-uglify-plugin</code> 来并行运行 <code>UglifyJS</code>，从而提高效率。</p><p>在 webpack4 中，我们就不需要以上这些操作了，只需要将 <code>mode</code> 设置为 <code>production</code> 就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS 代码的过程中，我们还可以通过配置实现比如删除 <code>console.log</code> 这类代码的功能。</p><h3><span id="p1-5-xiao-de-you-hua-dian">1.5 小的优化点</span><a href="#p1-5-xiao-de-you-hua-dian" class="header-anchor">#</a></h3><p>我们还可以通过一些小的优化点来加快打包速度</p><ul><li><code>resolve.extensions</code>：用来表明文件后缀列表，默认查找顺序是 <code>['.js', '.json']</code>，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面</li><li><code>resolve.alias</code>：可以通过别名的方式来映射一个路径，能让 webpack 更快找到路径</li><li><code>module.noParse</code>：如果你确定一个文件下没有其他依赖，就可以使用该属性让 webpack 不扫描该文件，这种方式对于大型的类库很有帮助</li></ul><h2><span id="p2-jian-shao-webpack-da-bao-zhi-hou-de-wen-jian-ti-ji">2、减少 webpack 打包之后的文件体积</span><a href="#p2-jian-shao-webpack-da-bao-zhi-hou-de-wen-jian-ti-ji" class="header-anchor">#</a></h2><h3><span id="p2-1-an-xu-jia-zai">2.1 按需加载</span><a href="#p2-1-an-xu-jia-zai" class="header-anchor">#</a></h3><p>想必大家在开发 SPA 项目的时候，项目中都会存在十几甚至更多的路由页面。如果我们将这些页面全部打包进一个 JS 文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，我们肯定是希望首页能加载的文件体积越小越好，<strong>这时候我们就可以使用按需加载，将每个路由页面单独打包为一个文件</strong>。当然不仅仅路由可以按需加载，对于 <code>loadash</code> 这种大型类库同样可以使用这个功能。</p><p>按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个 <code>Promise</code>，当 <code>Promise</code> 成功以后去执行回调。</p><h3><span id="p2-2-scope-hoisting">2.2 Scope Hoisting</span><a href="#p2-2-scope-hoisting" class="header-anchor">#</a></h3><p><strong>Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。</strong></p><p>比如我们希望打包两个文件</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; test.jsexport const a &#x3D; 1&#x2F;&#x2F; index.jsimport &#123; a &#125; from &#39;.&#x2F;test.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于这种情况，我们打包出来的代码会类似这样</p><pre class="line-numbers language-none"><code class="language-none">[  &#x2F;* 0 *&#x2F;  function (module, exports, require) &#123;    &#x2F;&#x2F;...  &#125;,  &#x2F;* 1 *&#x2F;  function (module, exports, require) &#123;    &#x2F;&#x2F;...  &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果我们使用 Scope Hoisting 的话，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码</p><pre class="line-numbers language-none"><code class="language-none">[  &#x2F;* 0 *&#x2F;  function (module, exports, require) &#123;    &#x2F;&#x2F;...  &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的打包方式生成的代码明显比之前的少多了。如果在 webpack4 中你希望开启这个功能，只需要启用 <code>optimization.concatenateModules</code> 就可以了。</p><pre class="line-numbers language-none"><code class="language-none">module.exports &#x3D; &#123;  optimization: &#123;    concatenateModules: true  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-3-tree-shaking">2.3 Tree Shaking</span><a href="#p2-3-tree-shaking" class="header-anchor">#</a></h3><p><strong>Tree Shaking 可以实现删除项目中未被引用的代码</strong>，比如</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; test.jsexport const a &#x3D; 1export const b &#x3D; 2&#x2F;&#x2F; index.jsimport &#123; a &#125; from &#39;.&#x2F;test.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于以上情况，<code>test</code> 文件中的变量 <code>b</code> 如果没有在项目中使用到的话，就不会被打包到文件中。</p><p>如果你使用 webpack 4 的话，开启生产环境就会自动启动这个优化功能。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试心态</title>
      <link href="/06/%E9%9D%A2%E8%AF%95%E5%BF%83%E6%80%81/"/>
      <url>/06/%E9%9D%A2%E8%AF%95%E5%BF%83%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>面试的时候不要扭扭捏捏，你是过去交流的这种姿态。</p><p>面试的时候能回答一半就不错了。</p><p>对面试官的尊重。</p><p>看着人家的额头，也不能一直看着。</p><p>面试和上班是两回事。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
      <url>/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-guan-xi-xing-shu-ju-ku">一、关系型数据库</a></li><li><a href="#er-sql">二、SQL</a></li><li><a href="#san-oem">三、OEM</a></li></ul><!-- tocstop --></div><h1><span id="yi-guan-xi-xing-shu-ju-ku">一、关系型数据库</span><a href="#yi-guan-xi-xing-shu-ju-ku" class="header-anchor">#</a></h1><h1><span id="er-sql">二、SQL</span><a href="#er-sql" class="header-anchor">#</a></h1><h1><span id="san-oem">三、OEM</span><a href="#san-oem" class="header-anchor">#</a></h1><p>ORM，Object Relational Mapping，<strong>对象关系映射</strong>是一种将关系型数据库对象化的方法，可以屏蔽底层异构的数据库类型。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码手册JS</title>
      <link href="/09/%E4%BB%A3%E7%A0%81%E6%89%8B%E5%86%8CJS/"/>
      <url>/09/%E4%BB%A3%E7%A0%81%E6%89%8B%E5%86%8CJS/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#json">JSON</a></li><li><a href="#yuan-sheng-dom-cao-zuo">原生DOM操作</a></li><li><a href="#mo-kuai-hua">模块化</a></li><li><a href="#nodejs-wen-jian-cao-zuo">NodeJS 文件操作</a></li><li><a href="#nodejs-fu-wu-qi">NodeJS 服务器</a></li></ul><!-- tocstop --></div><h1><span id="json">JSON</span><a href="#json" class="header-anchor">#</a></h1><p>（1）JSON转字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）字符串转JSON</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="yuan-sheng-dom-cao-zuo">原生DOM操作</span><a href="#yuan-sheng-dom-cao-zuo" class="header-anchor">#</a></h1><p>（1）创建节点 <code>createElement</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> newLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）创建文本节点 <code>createTextNode</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> newLiCon <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">"这是字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）插入元素 <code>insertBefore</code> <code>appendChild</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 当前节点的子节点末尾插入</span>newLi<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newLiCon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在已有的子节点之前插入</span><span class="token comment">//        新插入的节点  插入节点后边的</span>oBox<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newLi<span class="token punctuation">,</span> oLis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）复制节点 <code>cloneNode</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">oLis<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oLis<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数 true (深复制)，复制整个节点和里面的内容</span><span class="token comment">// false (浅复制)，只复制节点不要里面的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（5）删除节点 <code>removeChild</code></p><p>（6）替换节点 <code>replaceChild</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">                 <span class="token comment">// new    old</span>oBox<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>newLi<span class="token punctuation">,</span> oLis<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（7）<code>innerHTML</code> <code>outerHTML</code> <code>innerText</code> <code>outerText</code> <code>textContent</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oBox<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 把html也转成字符串输出</span>oBox<span class="token punctuation">.</span>outerText <span class="token operator">=</span> <span class="token string">"&lt;li>我是创建的li字符串&lt;/li>"</span><span class="token punctuation">;</span><span class="token comment">// innerText 对IE的兼容性较好</span><span class="token comment">// textContent虽然作为标准方法但是只支持IE8+以上的浏览器</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"你好"</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（8）创建属性节点 <code>createAttribute</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> newAttr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createAttribute</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（9）读取属性节点 <code>getAttrobute</code></p><p>（10）设置属性 <code>setAttribute(name,value)</code></p><p>（11）删除属性 <code>removeAttribute</code></p><p>（12）自定义属性 <code>dataset</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">xxx<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxxxxxx<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>xxx<span class="token keyword">delete</span> xxx<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（13）文档片段节点 <code>document.createDocumentFragment()</code></p><h1><span id="mo-kuai-hua">模块化</span><a href="#mo-kuai-hua" class="header-anchor">#</a></h1><p>（1）NodeJS</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）ES6</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>script type <span class="token operator">=</span> <span class="token string">"module"</span><span class="token operator">></span><span class="token keyword">import</span> xx<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./mo.js"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="nodejs-wen-jian-cao-zuo">NodeJS 文件操作</span><a href="#nodejs-wen-jian-cao-zuo" class="header-anchor">#</a></h1><pre class="line-numbers language-js" data-language="js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token parameter">Path<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="nodejs-fu-wu-qi">NodeJS 服务器</span><a href="#nodejs-fu-wu-qi" class="header-anchor">#</a></h1><p>获得请求信息中的域名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">req<span class="token punctuation">.</span>header<span class="token punctuation">.</span>origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得参数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// xxxx/test?a=1&amp;b=2</span>req<span class="token punctuation">.</span>query <span class="token comment">// &#123;a:'1', b='2'&#125;;</span><span class="token comment">// xxxx/test/1/2</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test/:a/:b"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>params<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 参考 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用技巧</title>
      <link href="/09/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/09/%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1><span id="yi-windows-10">一、Windows 10</span><a href="#yi-windows-10" class="header-anchor">#</a></h1><ul><li><code>Win + Ctrl + ←/→</code>  切换虚拟桌面</li></ul><h3><span id="ppotplayer">PotPlayer</span><a href="#ppotplayer" class="header-anchor">#</a></h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>X</td><td>加速</td></tr><tr><td>C</td><td>减速</td></tr></tbody></table><h2><span id="pbian-ji-qi-tong-yong">编辑器 通用</span><a href="#pbian-ji-qi-tong-yong" class="header-anchor">#</a></h2><ul><li>搜索：ctrl + F</li><li>替换：ctrl + H</li><li>选择一整行：CTRL + L</li></ul><h2><span id="pvscode">VSCode</span><a href="#pvscode" class="header-anchor">#</a></h2><ul><li>向下复制当前行：SHIFT + ALT + ↓</li><li>注释和取消注释：CTRL + /</li><li>多行注释：CTRL + shift + /</li></ul><h1><span id="er-windows-shell">二、Windows Shell</span><a href="#er-windows-shell" class="header-anchor">#</a></h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>CLS</code></td><td>清屏</td></tr><tr><td><code>CD</code></td><td></td></tr><tr><td><code>DIR</code></td><td>查看目录</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术栈加 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题册</title>
      <link href="/06/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%86%8C1/"/>
      <url>/06/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%86%8C1/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#di-yi-juan">第一卷</a><ul><li><a href="#1-ru-he-jie-jue-wang-ye-luan-ma">1、如何解决网页乱码</a></li><li><a href="#2-chang-jian-liu-lan-qi-ji-qi-nei-he">2、常见浏览器及其内核</a></li><li><a href="#3-label-biao-qian-de-yong-fa">3、label 标签的用法</a></li><li><a href="#4-import-he-link-yin-ru-de-qu-bie">4、@import 和 link 引入的区别</a></li><li><a href="#5-miao-shu-chong-hui-he-chong-pai">5、描述重绘和重排</a></li><li><a href="#6-ru-he-wai-bu-yin-ru-zi-ti-bao">6、如何外部引入字体包</a></li><li><a href="#7-yan-se-she-zhi-ke-yi-you-ji-chong-lei-xing">7、颜色设置可以有几种类型</a></li><li><a href="#8-yang-shi-lai-yuan-you-xian-ji-quan-chong-ji-suan">8、样式来源、优先级、权重计算</a></li><li><a href="#9-display-none-he-visibility-hidden-de-qu-bie">9、display: none 和 visibility: hidden 的区别</a></li><li><a href="#10-css-yu-ju-de-ji-ben-gou-cheng">10、CSS语句的基本构成</a></li><li><a href="#11-wai-bian-ju-ta-xian-de-yuan-yin-he-jie-jue-fang-fa">11、外边距塌陷的原因和解决方法</a></li><li><a href="#12-he-zi-mo-xing-gai-nian">12、盒子模型概念</a></li><li><a href="#13-selectors-api-he-chuan-tong-fang-fa-de-bi-jiao">13、Selectors API 和传统方法的比较</a></li><li><a href="#14-null-he-undefined-chu-xian-de-chang-jing">14、null 和 undefined 出现的场景</a></li><li><a href="#15-ji-ben-lei-xing-zhi-he-yin-yong-lei-xing-zhi-de-bi-jiao">15、基本类型值和引用类型值的比较</a></li><li><a href="#16-bom-dui-xiang-bao-gua-na-xie-dong-xi">16、bom对象包括哪些东西</a></li><li><a href="#17-offsetwidth-clientwidth-deng-ji-ge-huo-qu-fang-fa-de-shi-yong">17、offsetWidth、clientWidth等几个获取方法的使用</a></li><li><a href="#18-innerhtml-outerhtml-innertext-textcontent-qu-bie">18、innerHTML/outerHTML/innerText/textContent 区别</a></li><li><a href="#19-shu-zu-de-bian-li-fang-fa">19、数组的遍历方法</a></li><li><a href="#20-ru-he-she-zhi-yi-ge-zi-ding-yi-shu-xing">20、如何设置一个自定义属性</a></li><li><a href="#21-dom2-ji-bang-ding-shi-jian-yi-chu-shi-jian">21、DOM2级绑定事件、移除事件</a></li><li><a href="#22-dom2-ji-he-dom0-ji-qu-bie">22、DOM2级和DOM0级区别</a></li><li><a href="#23-zu-zhi-shi-jian-chuan-bo">23、阻止事件传播</a></li><li><a href="#24-ru-he-zu-zhi-mo-ren-shi-jian">24、如何阻止默认事件？</a></li><li><a href="#25-this-de-li-jie-he-zhi-xiang">25、this的理解和指向 ！！</a></li><li><a href="#26-shi-jian-wei-tuo-shi-shi-me-yuan-li-you-dian">26、事件委托 是什么，原理，优点</a></li><li><a href="#27-call-apply-bind">27、call、apply、bind</a></li><li><a href="#28-yuan-xing-lian">28、原型链</a></li><li><a href="#29-shi-me-shi-bian-liang-dui-xiang">29、什么是变量对象</a></li><li><a href="#30-qing-yong-zi-ji-de-hua-jian-shu-shi-me-shi-bi-bao-zuo-yong-you-que-dian">30、请用自己的话简述什么是闭包，作用，优缺点 ！</a></li><li><a href="#31-jin-cheng-he-xian-cheng">31、进程和线程</a></li><li><a href="#32-hun-he-ji-cheng">32、混合继承</a></li><li><a href="#33-shi-jian-xun-huan-ji-zhi">33、事件循环机制</a></li><li><a href="#34-dan-xing-bu-ju-xiang-guan-shu-xing">34、弹性布局相关属性 ！</a></li><li><a href="#35-new-de-guo-cheng">35、new 的过程</a></li><li><a href="#36-dui-html-yu-yi-hua-de-li-jie">36、对HTML语义化的理解</a></li><li><a href="#37-html5-css3-de-xin-te-xing">37、HTML5、CSS3的新特性</a></li><li><a href="#38-es6-xin-te-xing">38、ES6 新特性</a></li><li><a href="#39-qing-xie-chu-ni-zhi-dao-de-she-zhi-yi-ge-yuan-su-chui-zhi-ju-zhong-de-suo-you-fang-shi">39、请写出你知道的设置一个元素垂直居中的所有方式？</a></li><li><a href="#40-qing-chu-fu-dong-de-fang-shi">40、清除浮动的方式</a></li><li><a href="#41-a-biao-qian-si-ge-wei-lei-shun-xu">41、a标签四个伪类顺序？</a></li><li><a href="#42-yong-js-xie-yi-ge-jiu-jiu-cheng-fa-biao">42、用JS写一个九九乘法表 +</a></li><li><a href="#43-qing-kong-shu-zu-de-fang-shi">43、清空数组的方式</a></li><li><a href="#44-yong-js-sui-ji-sheng-cheng-1-dao-100-de-sui-ji-shu">44、用JS随机生成1到100的随机数 +</a></li><li><a href="#45-jie-shi-zuo-yong-yu-lian">45、解释作用域链</a></li><li><a href="#45-shi-me-shi-han-shu-fang-dou-han-shu-jie-liu">45、什么是函数防抖，函数节流 ！！</a></li><li><a href="#46-tan-tan-ni-dui-mian-xiang-dui-xiang-de-liao-jie">46、谈谈你对面向对象的了解？</a></li><li><a href="#47-object-create-definedproperty-de-shi-yong">47、Object.create/definedProperty的使用</a></li><li><a href="#48-geteter-setter">48、geteter、setter</a></li><li><a href="#49-var-let-const-qu-bie">49、var/let/const区别</a></li><li><a href="#50-dui-xiang-de-jie-gou-fu-zhi">50、对象的解构赋值</a></li><li><a href="#51-jian-tou-han-shu-qiu-yi-ge-shu-zu-de-he">51、箭头函数求一个数组的和</a></li><li><a href="#52-shi-me-shi-shu-xing-ming-biao-da-shi">52、什么是属性名表达式</a></li><li><a href="#53-qing-jie-shi-symbol-he-bigint-shu-ju-lei-xing">53、请解释 symbol 和 bigInt 数据类型</a></li><li><a href="#54-qing-jie-shi-set-he-map-lei-xing-bing-ju-li-shuo-ming">54、请解释 Set 和 Map 类型 并举例说明</a></li><li><a href="#55-shu-xie-yi-ge-zi-lei-ji-cheng-fu-lei-de-an-li">55、书写一个子类继承父类的案例</a></li><li><a href="#56-jian-tou-han-shu-de-this-wen-ti">56、箭头函数的this问题</a></li><li><a href="#57-shou-xie-iterator-jie-kou">57、手写 iterator 接口</a></li><li><a href="#58-for-of-he-for-in-xun-huan-de-qu-bie">58、for of 和 for in 循环的区别</a></li><li><a href="#59-tan-tan-promise">59、谈谈 promise</a></li><li><a href="#60-tan-tan-async-he-await">60、谈谈 async 和 await</a></li><li><a href="#61-nodejs-shi-jian-lun-xun">61、NodeJS事件轮询</a></li><li><a href="#62-hong-ren-wu-he-wei-ren-wu">62、宏任务和微任务</a></li><li><a href="#63-tan-yi-xia-nodejs-mo-kuai-hua">63、谈一下NodeJS模块化</a></li><li><a href="#64-npm-de-ji-chu-cao-zuo">64、npm的基础操作</a></li><li><a href="#65-tan-yi-xia-ni-liao-jie-de-jia-mi">65、谈一下你了解的加密</a></li><li><a href="#66-huo-qu-dang-qian-wen-jian-jia-xia-mou-ge-wen-jian-de-jue-dui-lu-jing">66、获取当前文件夹下某个文件的绝对路径</a></li><li><a href="#67-qing-jie-shi-http-xie-yi">67、请解释HTTP协议</a></li><li><a href="#68-lie-ju-ji-ge-chang-jian-de-mime-lei-xing">68、列举几个常见的MIME类型</a></li><li><a href="#69-chang-jian-xiang-ying-ma-zhuang-tai">69、 常见响应码状态</a></li><li><a href="#70-cong-shu-ru-url-dao-jie-xi-wang-ye-chu-lai-de-quan-guo-cheng">70、从输入URL到解析网页出来的全过程</a></li><li><a href="#71-tan-yi-xia-jian-tou-han-shu">71、谈一下箭头函数</a></li><li><a href="#72-huan-cun-de-guo-cheng-xie-shang-huan-cun-he-qiang-zhi-huan-cun">72、缓存的过程（协商缓存和强制缓存）</a></li><li><a href="#73-session-zen-me-shi-yong-liu-cheng">73、session怎么使用（流程）</a></li><li><a href="#74-qing-fen-xi-cookie-session-localstorage-he-sessionstroage">74、请分析cookie session localstorage和sessionstroage</a></li><li><a href="#75-ru-he-shi-xian-liu-lan-qi-nei-duo-ge-biao-qian-ye-zhi-jian-de-tong-xin">75、如何实现浏览器内多个标签页之间的通信</a></li><li><a href="#76-zai-qian-duan-she-ji-li-wang-ye-zi-gua-ying-ru-he-shi-xian">76、在前端设计里，网页自适应如何实现</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="di-yi-juan">第一卷</span><a href="#di-yi-juan" class="header-anchor">#</a></h1><h2><span id="p1-ru-he-jie-jue-wang-ye-luan-ma">1、如何解决网页乱码</span><a href="#p1-ru-he-jie-jue-wang-ye-luan-ma" class="header-anchor">#</a></h2><p><code>&lt;meta charset=utf-8&gt;</code></p><h2><span id="p2-chang-jian-liu-lan-qi-ji-qi-nei-he">2、常见浏览器及其内核</span><a href="#p2-chang-jian-liu-lan-qi-ji-qi-nei-he" class="header-anchor">#</a></h2><h2><span id="p3-label-biao-qian-de-yong-fa">3、label 标签的用法</span><a href="#p3-label-biao-qian-de-yong-fa" class="header-anchor">#</a></h2><p><code>&lt;label&gt;...&lt;/label&gt;</code><br><code>&lt;label for=&quot;xxx&quot;&gt;...&lt;/label&gt; ... &lt;p id=&quot;xxx&quot;&gt; </code></p><h2><span id="p4-import-he-link-yin-ru-de-qu-bie">4、@import 和 link 引入的区别</span><a href="#p4-import-he-link-yin-ru-de-qu-bie" class="header-anchor">#</a></h2><ol><li><p>加载顺序 @import 引用的CSS会在页面全部被下载完后再被加载</p></li><li><p>兼容性 相对来说 link更好一点</p></li><li><p>link标签的样式是可以用js控制的</p></li></ol><h2><span id="p5-miao-shu-chong-hui-he-chong-pai">5、描述重绘和重排</span><a href="#p5-miao-shu-chong-hui-he-chong-pai" class="header-anchor">#</a></h2><ul><li>渲染树重新构建的过程称为重排。</li><li>当页面的布局和几何属性发送改变的时候、增删可见DOM元素、元素位置尺寸发送变化、内容变化、页面渲染初始化、浏览器窗口大小改变等这些情况都会引起重排。</li><li>重排会消耗一定性能。</li><li>重绘是重新绘制页面。相对来说影响比重排小，重排一定会导致重绘。</li></ul><h2><span id="p6-ru-he-wai-bu-yin-ru-zi-ti-bao">6、如何外部引入字体包</span><a href="#p6-ru-he-wai-bu-yin-ru-zi-ti-bao" class="header-anchor">#</a></h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"jier"</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"../images/abc.ttf"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p7-yan-se-she-zhi-ke-yi-you-ji-chong-lei-xing">7、颜色设置可以有几种类型</span><a href="#p7-yan-se-she-zhi-ke-yi-you-ji-chong-lei-xing" class="header-anchor">#</a></h2><ul><li>直接预定义好的英文名字</li><li>RGB、RGBA</li><li>十六进制表示法</li><li>HSL、HSLA</li><li><code>transparent</code></li><li><code>inherit</code></li></ul><h2><span id="p8-yang-shi-lai-yuan-you-xian-ji-quan-chong-ji-suan">8、样式来源、优先级、权重计算</span><a href="#p8-yang-shi-lai-yuan-you-xian-ji-quan-chong-ji-suan" class="header-anchor">#</a></h2><p>样式来源优先级</p><ul><li>!important</li><li>行内样式 1000</li><li>id选择器 100</li><li>类选择器、伪类选择器、属性选择器 10</li><li>标签选择器、伪元素选择器  1</li><li>通配符选择器</li><li>默认、继承</li></ul><p>优先级相同看顺序，后面定义的覆盖前面的</p><h2><span id="p9-display-none-he-visibility-hidden-de-qu-bie">9、display: none 和 visibility: hidden 的区别</span><a href="#p9-display-none-he-visibility-hidden-de-qu-bie" class="header-anchor">#</a></h2><ul><li>visibility 可以继承</li><li>visibility 保留原来空间</li><li>js 可以获取 visibility 的可视化宽高</li></ul><h2><span id="p10-css-yu-ju-de-ji-ben-gou-cheng">10、CSS语句的基本构成</span><a href="#p10-css-yu-ju-de-ji-ben-gou-cheng" class="header-anchor">#</a></h2><p><code>选择器&#123; 属性名: 属性值 &#125;</code></p><h2><span id="p11-wai-bian-ju-ta-xian-de-yuan-yin-he-jie-jue-fang-fa">11、外边距塌陷的原因和解决方法</span><a href="#p11-wai-bian-ju-ta-xian-de-yuan-yin-he-jie-jue-fang-fa" class="header-anchor">#</a></h2><p>防止父级和其他元素之间的间隙过大，当第一个和最后一个子元素的margn塌陷给父级以后 父级就可以和兄弟元素在垂直方向上进行叠加</p><p>避免父级塌陷</p><ol><li><p>给父级设置一个边框  边框的宽度不能为0</p><p>防止影响视觉，可以设置透明（transparent）颜色</p></li><li><p>开启BFC（块级格式化上下文）</p><p>很多种方法，后边讲解:overflow：hidden 可以开启</p></li></ol><h2><span id="p12-he-zi-mo-xing-gai-nian">12、盒子模型概念</span><a href="#p12-he-zi-mo-xing-gai-nian" class="header-anchor">#</a></h2><p>在html中，把每一个元素都当做成一个盒子，拥有盒子的平面外形和空间</p><h2><span id="p13-selectors-api-he-chuan-tong-fang-fa-de-bi-jiao">13、Selectors API 和传统方法的比较</span><a href="#p13-selectors-api-he-chuan-tong-fang-fa-de-bi-jiao" class="header-anchor">#</a></h2><ol><li><p>动态、静态</p><p>getElementsByXXXXX获取的是一个动态的集合</p><p>queryselectorAll获取的是静态的集合（NodeList对象）</p><p>动态：选出来的元素会随着文档的改变而改变</p><p>静态：只要取出来，就和页面有没有任何关系</p></li><li><p>兼容性</p></li><li><p>参数</p></li></ol><h2><span id="p14-null-he-undefined-chu-xian-de-chang-jing">14、null 和 undefined 出现的场景</span><a href="#p14-null-he-undefined-chu-xian-de-chang-jing" class="header-anchor">#</a></h2><p>常见的 undefined 环境</p><ul><li>变量声明但是没有赋值</li><li>调用函数没有提供的参数</li><li>函数默认返回值</li><li>对象没有赋值的属性</li></ul><p>常见 null 环境</p><ul><li>对象原型链的终点</li><li>让变量指向的对象成为垃圾对象</li></ul><h2><span id="p15-ji-ben-lei-xing-zhi-he-yin-yong-lei-xing-zhi-de-bi-jiao">15、基本类型值和引用类型值的比较</span><a href="#p15-ji-ben-lei-xing-zhi-he-yin-yong-lei-xing-zhi-de-bi-jiao" class="header-anchor">#</a></h2><table><thead><tr><th></th><th>基本类型值</th><th>引用类型值</th></tr></thead><tbody><tr><td>值</td><td>不可变（只能重新赋值）</td><td>可以</td></tr><tr><td>添加属性方法</td><td>无效</td><td>可以</td></tr><tr><td>储存方式</td><td>栈区</td><td>名字地址存栈区 值存堆区</td></tr><tr><td>比较方式</td><td>值的比较</td><td>引用的比较</td></tr></tbody></table><h2><span id="p16-bom-dui-xiang-bao-gua-na-xie-dong-xi">16、bom对象包括哪些东西</span><a href="#p16-bom-dui-xiang-bao-gua-na-xie-dong-xi" class="header-anchor">#</a></h2><p><code>document</code></p><p><code>navigator</code></p><p><code>screen</code></p><p><code>location</code></p><p><code>history</code></p><h2><span id="p17-offsetwidth-clientwidth-deng-ji-ge-huo-qu-fang-fa-de-shi-yong">17、offsetWidth、clientWidth等几个获取方法的使用</span><a href="#p17-offsetwidth-clientwidth-deng-ji-ge-huo-qu-fang-fa-de-shi-yong" class="header-anchor">#</a></h2><p>使用offsetWidth和offsetHeight属性可以获取元素的尺寸(content+padding+border)</p><p>clientWidth和clientHeight获取元素可视部分的宽度，即css的content和padding属性的和</p><h2><span id="p18-innerhtml-outerhtml-innertext-textcontent-qu-bie">18、innerHTML/outerHTML/innerText/textContent 区别</span><a href="#p18-innerhtml-outerhtml-innertext-textcontent-qu-bie" class="header-anchor">#</a></h2><p>inner 不包括自身 outer 包括自身</p><p>HTML 解析html标签 Text 不解析</p><ul><li>textContent和innerHTML的区别<ul><li>textContent 会获取style= “display:none” 中的文本，而innerText不会</li><li>innerText不会理会html格式，直接输出不换行的文本 ，textContent会根据标签里面的元素独立一行</li><li>innerText 对IE的兼容性较好 ，textContent虽然作为标准方法但是只支持IE8+以上的浏览器</li></ul></li></ul><h2><span id="p19-shu-zu-de-bian-li-fang-fa">19、数组的遍历方法</span><a href="#p19-shu-zu-de-bian-li-fang-fa" class="header-anchor">#</a></h2><p><code>forEach</code> <code>map</code> <code>filter</code> <code>some</code> <code>every</code> <code>reduce</code></p><h2><span id="p20-ru-he-she-zhi-yi-ge-zi-ding-yi-shu-xing">20、如何设置一个自定义属性</span><a href="#p20-ru-he-she-zhi-yi-ge-zi-ding-yi-shu-xing" class="header-anchor">#</a></h2><p><a href="http://dataset.xxx">dataset.xxx</a> = “111”</p><p><a href="http://dataset.xxx">dataset.xxx</a></p><p>delete <a href="http://detaset.xxx">detaset.xxx</a></p><h2><span id="p21-dom2-ji-bang-ding-shi-jian-yi-chu-shi-jian">21、DOM2级绑定事件、移除事件</span><a href="#p21-dom2-ji-bang-ding-shi-jian-yi-chu-shi-jian" class="header-anchor">#</a></h2><p>在DOM事件模型中，通过调用对象的addEventListnenr()方法注册事件</p><ul><li>type:注册事件的类型名,事件类型与事件属性不同,事件类型名没有on前缀,例如,对于事件属性 onclick来说,所对应的事件类型为 click</li><li>listener:监听函数,即事件处理函数,在指定类型的事件发生时将调用该函数,在调用这个函数时,默认传递给它的唯一参数是 event对象</li><li>useCapture:是一个布尔值,如果为true,则指定的事件处理函数将在事件传播的捕获阶段触发，如果为 false,则事件处理函数将在冒泡阶段触发</li></ul><p>DOM事件模型中，使用removeEventListener()方法可以从指定对象中删除已经注册的事件处理函数</p><p>removeEventListener()只能处理addEventListener方法注册的事件</p><h2><span id="p22-dom2-ji-he-dom0-ji-qu-bie">22、DOM2级和DOM0级区别</span><a href="#p22-dom2-ji-he-dom0-ji-qu-bie" class="header-anchor">#</a></h2><ol><li>兼容性</li><li>同时绑定相同事件的个数</li><li>注销方法</li></ol><h2><span id="p23-zu-zhi-shi-jian-chuan-bo">23、阻止事件传播</span><a href="#p23-zu-zhi-shi-jian-chuan-bo" class="header-anchor">#</a></h2><p>ev.stopPropagation();</p><p>ev.cancelBubble = true;</p><h2><span id="p24-ru-he-zu-zhi-mo-ren-shi-jian">24、如何阻止默认事件？</span><a href="#p24-ru-he-zu-zhi-mo-ren-shi-jian" class="header-anchor">#</a></h2><ul><li>在IE浏览器中， <code>e.returnValue=fasle</code></li><li>在其他浏览器中，<code>e.prevenDefault()</code></li><li><code>return false</code></li></ul><h2><span id="p25-this-de-li-jie-he-zhi-xiang">25、this的理解和指向 ！！</span><a href="#p25-this-de-li-jie-he-zhi-xiang" class="header-anchor">#</a></h2><h2><span id="p26-shi-jian-wei-tuo-shi-shi-me-yuan-li-you-dian">26、事件委托 是什么，原理，优点</span><a href="#p26-shi-jian-wei-tuo-shi-shi-me-yuan-li-you-dian" class="header-anchor">#</a></h2><p>事件委托（delegate） 也称为事件托管或者事件代理，就是把目标节点的事件绑定到祖先的节点上</p><p>原理 事件冒泡</p><p>优点</p><p>优化代码，提高效率</p><p>给未来的元素添加绑定</p><h2><span id="p27-call-apply-bind">27、call、apply、bind</span><a href="#p27-call-apply-bind" class="header-anchor">#</a></h2><p>fn.call( arg,…,… )</p><ol><li>把fn的this指向arg</li><li>执行fn</li><li>如果fn需要参数，则第二个参数开始依次传参</li></ol><p>fn.apply( arg,[,] )</p><ol><li>把fn的this指向arg</li><li>执行fn</li><li>如果fn需要参数，则第二个参数传递一个数组或者伪数组</li></ol><p>fn.bind( arg,…,… )</p><ol><li>把fn的this指向arg</li><li>不会执行fn，返回一个新this指向的fn的一个引用，如果想要调用，则需要手动调用</li><li>参数形式同call</li></ol><h2><span id="p28-yuan-xing-lian">28、原型链</span><a href="#p28-yuan-xing-lian" class="header-anchor">#</a></h2><h2><span id="p29-shi-me-shi-bian-liang-dui-xiang">29、什么是变量对象</span><a href="#p29-shi-me-shi-bian-liang-dui-xiang" class="header-anchor">#</a></h2><p>变量对象是与执行上下文相关的数据作用域，储存了在上下文中定义的变量和函数声明。</p><p>在一个执行上下文中，变量才会被激活。只有被激活的变量对象，其各种属性才能被访问。</p><h2><span id="p30-qing-yong-zi-ji-de-hua-jian-shu-shi-me-shi-bi-bao-zuo-yong-you-que-dian">30、请用自己的话简述什么是闭包，作用，优缺点 ！</span><a href="#p30-qing-yong-zi-ji-de-hua-jian-shu-shi-me-shi-bi-bao-zuo-yong-you-que-dian" class="header-anchor">#</a></h2><ol><li>闭包的产生是函数嵌套函数、内部函数引用外部变量、外部函数调用</li><li>闭包可以理解为内部的函数</li><li>深入理解的话，闭包就是包含 被内部引用变量 的对象</li></ol><p>闭包的优点</p><ol><li>外部间接的访问到了内部的变量</li><li>可以延长局部变量的生命周期</li></ol><p>缺点：内存泄露</p><p>闭包的生命周期</p><ol><li>产生 在内部函数被定义的时候就产生了</li><li>死亡 当内部函数没有被引用的时候，函数就会成为垃圾对象，会被清理</li></ol><h2><span id="p31-jin-cheng-he-xian-cheng">31、进程和线程</span><a href="#p31-jin-cheng-he-xian-cheng" class="header-anchor">#</a></h2><p>进程是程序一次执行占有的一片独有内存空间</p><p>线程是进程内一个独立单元，CPU基本调度单位，是程序执行的一个完整流程</p><p>一个进程中至少会有一个线程，也可以有多个线程，被称为多线程。一个进程内多个线程可以直接共享数据，多个进程之间的数据不能直接共享。</p><p>JS的单线程的，浏览器是多线程的。</p><h2><span id="p32-hun-he-ji-cheng">32、混合继承</span><a href="#p32-hun-he-ji-cheng" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父类型（构造模式）</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span> <span class="token parameter">name</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 父类型（原型模式）</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span> <span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// △ 继承属性 △</span>    <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承方法</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// △ 修正原型链 △</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例化对象</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">syaAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p33-shi-jian-xun-huan-ji-zhi">33、事件循环机制</span><a href="#p33-shi-jian-xun-huan-ji-zhi" class="header-anchor">#</a></h2><ul><li>执行初始代码，将事件回调函数交给对应模块管理</li><li>当事件发生时，管理模块会将回调函数及其数据添加到回调队列中</li><li>只有当初始化代码执行完成（需要一定时间），才会遍历读取回调队列中的回调函数并执行</li></ul><h2><span id="p34-dan-xing-bu-ju-xiang-guan-shu-xing">34、弹性布局相关属性 ！</span><a href="#p34-dan-xing-bu-ju-xiang-guan-shu-xing" class="header-anchor">#</a></h2><p>富余空间管理（主轴）</p><p>justify-content：</p><ul><li>flex-start</li><li>flex-end</li><li>center</li><li>space-around：富余空间包含伸缩项目</li><li>space-between：伸缩项目包含富裕空间</li></ul><p>富余空间管理（侧轴）</p><p>align-items：</p><ul><li>flex-start</li><li>flex-end</li><li>baseline</li><li>center</li><li>stretch</li></ul><p>主轴布局方向</p><p>flex容器flex-direction：</p><ul><li>row</li><li>row-reverse</li><li>column：主轴与侧轴发生对调</li><li>column-reverse</li></ul><h2><span id="p35-new-de-guo-cheng">35、new 的过程</span><a href="#p35-new-de-guo-cheng" class="header-anchor">#</a></h2><ol><li>创建一个空对象，将他的引用赋值给this，继承函数的原型。</li><li>通过this将属性和方法添加到这个对象。</li><li>最后返回this指向的新对象，也就是实例。</li></ol><h2><span id="p36-dui-html-yu-yi-hua-de-li-jie">36、对HTML语义化的理解</span><a href="#p36-dui-html-yu-yi-hua-de-li-jie" class="header-anchor">#</a></h2><ul><li>语义化标签更具有可读性，便于团队的开发和维护</li><li>没有css的情况下，网页也能很好的呈现出内容结构和代码结构</li><li>关于SEO，搜索引擎更能理解到网页中各部分之间的关系，更准确更快速搜索信息</li></ul><h2><span id="p37-html5-css3-de-xin-te-xing">37、HTML5、CSS3的新特性</span><a href="#p37-html5-css3-de-xin-te-xing" class="header-anchor">#</a></h2><ul><li>H5 语义化标签、增强型表单、音视频标签、、canvas、地理地位、本地存储localStorage sessionStotage、多线程</li><li>C3 新选择器、动画、过渡、圆角标签、弹性布局、媒体查询</li></ul><h2><span id="p38-es6-xin-te-xing">38、ES6 新特性</span><a href="#p38-es6-xin-te-xing" class="header-anchor">#</a></h2><ol><li>字符串和数组扩展方法，模版字符串，reduce</li><li>解构赋值</li><li>函数默认参数值，箭头函数</li><li>Promise</li><li>模块化</li></ol><h2><span id="p39-qing-xie-chu-ni-zhi-dao-de-she-zhi-yi-ge-yuan-su-chui-zhi-ju-zhong-de-suo-you-fang-shi">39、请写出你知道的设置一个元素垂直居中的所有方式？</span><a href="#p39-qing-xie-chu-ni-zhi-dao-de-she-zhi-yi-ge-yuan-su-chui-zhi-ju-zhong-de-suo-you-fang-shi" class="header-anchor">#</a></h2><h2><span id="p40-qing-chu-fu-dong-de-fang-shi">40、清除浮动的方式</span><a href="#p40-qing-chu-fu-dong-de-fang-shi" class="header-anchor">#</a></h2><p>高度塌陷：</p><ul><li>浮动元素以后，脱离父级内容区域，父级没有内容撑开自身的高度</li><li>父级的兄弟元素是 按照父级的位置进行布局的，所以页面会乱掉</li></ul><p>清除浮动的方法：</p><ol><li><p>给浮动元素的父级设置高度height（不推荐使用）</p><p>缺点：很多情况下 高度都是不缺定的  所有不适用</p></li><li><p>以浮制浮，给浮动元素的父元素设置浮动，原理是开启BFC（不推荐使用）</p><p>缺点：只有在父级需要浮动的时候，可以这么清除，否则父级的浮动会影响布局</p></li><li><p>overflow：hidden；给父级设置，原理也是开启BFC（可以使用）</p><p>优点：简单快捷</p><p>缺点：元素超出的时候，会隐藏超出部分</p></li><li><p>br清除浮动：在浮动元素的后边书写一个br。br中书写clear属性，值为all</p><p>缺点：增加不必要的元素，不符合样式与结构相分离的要求</p></li><li><p>clear清浮动法：给浮动元素的下边添加一个块元素，书写样式clear:both</p><p>缺点：增加额外的结构，不符合语义化标准</p></li><li><p>after伪元素清浮动（推荐）</p><p>可以给所有浮动元素的父级一个  clearFix的类名</p><p>当一个元素需要清除浮动的时候  直接设置clearFix类名即可</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearFix:after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"\200B"</span><span class="token punctuation">;</span>  必须拥有content属性   内容为空    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>   必须块标签才能清浮动    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>          高度为0 不占用空间    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        清除浮动<span class="token punctuation">&#125;</span><span class="token selector">.clearFix</span><span class="token punctuation">&#123;</span>  //兼容ie    *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>    //*是css  hack 只有ie6.7 认识    ie6、7 不支持伪元素，所以需要开启元素的haslayout来清除浮动<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p41-a-biao-qian-si-ge-wei-lei-shun-xu">41、a标签四个伪类顺序？</span><a href="#p41-a-biao-qian-si-ge-wei-lei-shun-xu" class="header-anchor">#</a></h2><p>四个伪类</p><p>link：当有链接属性时</p><p>visited:当连接被访问过以后</p><p>hover：当连接被鼠标悬浮的时候</p><p>active:当连接在激活状态的时候</p><h2><span id="p42-yong-js-xie-yi-ge-jiu-jiu-cheng-fa-biao">42、用JS写一个九九乘法表 +</span><a href="#p42-yong-js-xie-yi-ge-jiu-jiu-cheng-fa-biao" class="header-anchor">#</a></h2><h2><span id="p43-qing-kong-shu-zu-de-fang-shi">43、清空数组的方式</span><a href="#p43-qing-kong-shu-zu-de-fang-shi" class="header-anchor">#</a></h2><ul><li>arr.length = 0</li><li>arr.splice(0, arr.length)</li><li>arr = []</li></ul><h2><span id="p44-yong-js-sui-ji-sheng-cheng-1-dao-100-de-sui-ji-shu">44、用JS随机生成1到100的随机数 +</span><a href="#p44-yong-js-sui-ji-sheng-cheng-1-dao-100-de-sui-ji-shu" class="header-anchor">#</a></h2><h2><span id="p45-jie-shi-zuo-yong-yu-lian">45、解释作用域链</span><a href="#p45-jie-shi-zuo-yong-yu-lian" class="header-anchor">#</a></h2><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链，用途是保证对执行环境有权访问的所有变量和函数的有序访问。</p><h2><span id="p45-shi-me-shi-han-shu-fang-dou-han-shu-jie-liu">45、什么是函数防抖，函数节流 ！！</span><a href="#p45-shi-me-shi-han-shu-fang-dou-han-shu-jie-liu" class="header-anchor">#</a></h2><p>函数的节流(throttle)与防抖(debounce)<br>作用：为了节约函数的性能（让函数调用次数更少）<br>节流(throttle)：让函数在单位时间内只调用一次，第一次调用生效<br>应用场景：发送验证码按钮</p><p>防抖(debounce)：让函数在单位时间内只调用一次，最后一次调用生效<br>应用场景：搜索栏</p><h2><span id="p46-tan-tan-ni-dui-mian-xiang-dui-xiang-de-liao-jie">46、谈谈你对面向对象的了解？</span><a href="#p46-tan-tan-ni-dui-mian-xiang-dui-xiang-de-liao-jie" class="header-anchor">#</a></h2><h2><span id="p47-object-create-definedproperty-de-shi-yong">47、Object.create/definedProperty的使用</span><a href="#p47-object-create-definedproperty-de-shi-yong" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj3 <span class="token operator">=</span> Obje ct<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token punctuation">&#123;</span>        value<span class="token operator">:</span> <span class="token string">"Lily"</span><span class="token punctuation">,</span>        writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        enumeerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        configureable<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p48-geteter-setter">48、geteter、setter</span><a href="#p48-geteter-setter" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> Person<span class="token punctuation">&#123;</span>    firstName<span class="token operator">:</span> <span class="token string">"姓"</span><span class="token punctuation">,</span>    lastName<span class="token operator">:</span> <span class="token string">"名"</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">set</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newArr <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>；        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> newArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> newArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token string">"某 某某"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p49-var-let-const-qu-bie">49、var/let/const区别</span><a href="#p49-var-let-const-qu-bie" class="header-anchor">#</a></h2><p>var 没有块作用域，会声明提升，可以重复定义</p><p>let 声明的变量具有块作用域，不会声明提升，不能重复定义</p><p>const 常量，不允许修改的数据可以定义为常量，对象、数组等定义为常量只是保证地址不发生变化</p><h2><span id="p50-dui-xiang-de-jie-gou-fu-zhi">50、对象的解构赋值</span><a href="#p50-dui-xiang-de-jie-gou-fu-zhi" class="header-anchor">#</a></h2><h2><span id="p51-jian-tou-han-shu-qiu-yi-ge-shu-zu-de-he">51、箭头函数求一个数组的和</span><a href="#p51-jian-tou-han-shu-qiu-yi-ge-shu-zu-de-he" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">Sum</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=></span>  a<span class="token punctuation">.</span><span class="token function">reduce</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token parameter">prev<span class="token punctuation">,</span> now</span> <span class="token punctuation">)</span> <span class="token operator">=></span> prev <span class="token operator">+</span> now <span class="token punctuation">)</span>              <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p52-shi-me-shi-shu-xing-ming-biao-da-shi">52、什么是属性名表达式</span><a href="#p52-shi-me-shi-shu-xing-ming-biao-da-shi" class="header-anchor">#</a></h2><p>对象的属性名在ES6之前只能是字符串，不能作为变量解析，</p><p>在ES6中，提供新的写法，把属性名用中括号括起来 中括号就可以书写变量</p><h2><span id="p53-qing-jie-shi-symbol-he-bigint-shu-ju-lei-xing">53、请解释 symbol 和 bigInt 数据类型</span><a href="#p53-qing-jie-shi-symbol-he-bigint-shu-ju-lei-xing" class="header-anchor">#</a></h2><p><code>symbol</code> 的值由 symbol 函数产生，主要用给对象设置一个属性名表达式，代表一个独一无二的属性（避免覆盖的问题）。另外通过这个基本类型值命名的属性，无法通过常规方法遍历。</p><p>symbol 是为了给对象添加一个方法属性时，从根本上防止属性名冲突而新增的基本类型，他表示独一无二的值。作为对象key时，只能用专门的方法遍历，无法for in等。</p><p><code>bigInt</code> 是为了大数运算精度而设计的一个基本数据类型。定义时在在数字后加<code>n</code>。和数字型比较时，相等true 全等false。</p><p>bigInt 是为了提高大数运算精度而引入的一种基本类型，定义的时候在数字末尾加n就是，和number进行比较，相等t，全等false</p><h2><span id="p54-qing-jie-shi-set-he-map-lei-xing-bing-ju-li-shuo-ming">54、请解释 Set 和 Map 类型 并举例说明</span><a href="#p54-qing-jie-shi-set-he-map-lei-xing-bing-ju-li-shuo-ming" class="header-anchor">#</a></h2><p>set 类似数组，但成员的值都是唯一的(没有键名，只有键值，或者说二者相等)</p><p>Map 相对于对象 字符串-值 的对应来说，是一种 值-值的键值对结构，更完善的hash实现</p><h2><span id="p55-shu-xie-yi-ge-zi-lei-ji-cheng-fu-lei-de-an-li">55、书写一个子类继承父类的案例</span><a href="#p55-shu-xie-yi-ge-zi-lei-ji-cheng-fu-lei-de-an-li" class="header-anchor">#</a></h2><h2><span id="p56-jian-tou-han-shu-de-this-wen-ti">56、箭头函数的this问题</span><a href="#p56-jian-tou-han-shu-de-this-wen-ti" class="header-anchor">#</a></h2><h2><span id="p57-shou-xie-iterator-jie-kou">57、手写 iterator 接口</span><a href="#p57-shou-xie-iterator-jie-kou" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用一个计数器，保存现在处理到哪里了</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                    value<span class="token operator">:</span> arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    done<span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                    done<span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//只要调用这个Iterator接口，就可以依次处理成员了</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">Iterator</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p58-for-of-he-for-in-xun-huan-de-qu-bie">58、for of 和 for in 循环的区别</span><a href="#p58-for-of-he-for-in-xun-huan-de-qu-bie" class="header-anchor">#</a></h2><ul><li>JavaScript 原有的<code>for...in</code>循环，只能获得对象的键名，不能直接获取键值。ES6 提供<code>for...of</code>循环，允许遍历获得键值，如果要通过<code>for...of</code>循环，获取数组的索引，可以借助数组实例的<code>entries</code>方法和<code>keys</code>方法。</li><li><code>for...of</code>循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟<code>for...in</code>循环也不一样</li></ul><h2><span id="p59-tan-tan-promise">59、谈谈 promise</span><a href="#p59-tan-tan-promise" class="header-anchor">#</a></h2><p>Promise对象时一个异步变成的解决方案，<strong>可以将异步操作以同步的流程表达出来, 避免了层层嵌套的回调函数(俗称’回调地狱’)</strong></p><p>pending resolve reject</p><p>then / catch 方法返回值是一个新的promise对象</p><ul><li>新promise对象默认是成功状态</li><li>如果 then / catch 接受的函数返回值是一个promise对象，那么 then / catch 方法返回值的promise就是这个promise对象</li><li>如果没有返回 promise对象，就会新建一个默认成功状态promise</li><li>内部如果报错了，返回一个失败状态的promise</li></ul><h2><span id="p60-tan-tan-async-he-await">60、谈谈 async 和 await</span><a href="#p60-tan-tan-async-he-await" class="header-anchor">#</a></h2><p>async函数(源自ES2017 - ES8),真正意义上去解决异步回调的问题，同步流程表达异步操作,是 Generator的语法糖</p><p>async 函数会返回一个 Promise 对象，如果在函数中 <code>return</code> 一个直接量，async 会把这个直接量通过<code>Promise.resolve()</code> 封装成 Promise 对象。</p><p>async取代Generator函数的星号*，await取代Generator的yield</p><h2><span id="p61-nodejs-shi-jian-lun-xun">61、NodeJS事件轮询</span><a href="#p61-nodejs-shi-jian-lun-xun" class="header-anchor">#</a></h2><p>分为六类</p><ul><li><code>timers</code> 处理定时器的回调函数</li><li><code>pending callback</code> 处理系统回调</li><li><code>idle prepare</code> 处理NodeJS内部的操作</li><li><code>poll</code> 处理一些I/O操作 <br>（1）当有回调队列成员，则回调队列执行完毕或者达到最大回调数，进入下个阶段<br>（2）当是空的时候，<code>timers</code>队列的计时器超时了或者下个阶段设置了<code>setImmediate</code>的时候，就直接进入到下个阶段。</li><li><code>check</code> 专门处理<code>setImmediate</code></li><li><code>close</code> 处理一些执行关闭的回调函数</li></ul><h2><span id="p62-hong-ren-wu-he-wei-ren-wu">62、宏任务和微任务</span><a href="#p62-hong-ren-wu-he-wei-ren-wu" class="header-anchor">#</a></h2><p>宏任务是宿主环境提供的任务，包含了事件轮询机制中的各种回调函数。</p><p>微任务包含了<code>process.nextTick</code>（优先级最高）， <code>promise</code> 其他的微任务按照书写顺序执行。</p><p>微任务优先级高于宏任务，并且事件轮询每次到一个新的阶段之前，都会检查微任务队列。<br>微任务中如果新添加了微任务，则把新添加的微任务放到下一个微任务队列执行。</p><h2><span id="p63-tan-yi-xia-nodejs-mo-kuai-hua">63、谈一下NodeJS模块化</span><a href="#p63-tan-yi-xia-nodejs-mo-kuai-hua" class="header-anchor">#</a></h2><h2><span id="p64-npm-de-ji-chu-cao-zuo">64、npm的基础操作</span><a href="#p64-npm-de-ji-chu-cao-zuo" class="header-anchor">#</a></h2><p><code>npm -v</code> 查看npm版本</p><p><code>npm init</code> 初始化package.json文件</p><p><code>npm install/i 包名</code> 安装指定的包</p><p><code>--save -S</code> 安装指定包并添加到生产环境中</p><p><code>--save-dev</code> 安装到开发环境中</p><p><code>-g</code> 全局安装</p><p><code>npm -remove / r</code> 删除指定的包</p><h2><span id="p65-tan-yi-xia-ni-liao-jie-de-jia-mi">65、谈一下你了解的加密</span><a href="#p65-tan-yi-xia-ni-liao-jie-de-jia-mi" class="header-anchor">#</a></h2><p>非对称加密算法。它需要两个密钥，一个公钥，一个私钥。</p><p>因为 加密 和 解密 使用的是两个不同的密钥，所以这种算法称为 非对称加密算法。</p><p>md5、sha1、sha256、sha512等。</p><h2><span id="p66-huo-qu-dang-qian-wen-jian-jia-xia-mou-ge-wen-jian-de-jue-dui-lu-jing">66、获取当前文件夹下某个文件的绝对路径</span><a href="#p66-huo-qu-dang-qian-wen-jian-jia-xia-mou-ge-wen-jian-de-jue-dui-lu-jing" class="header-anchor">#</a></h2><h2><span id="p67-qing-jie-shi-http-xie-yi">67、请解释HTTP协议</span><a href="#p67-qing-jie-shi-http-xie-yi" class="header-anchor">#</a></h2><h2><span id="p68-lie-ju-ji-ge-chang-jian-de-mime-lei-xing">68、列举几个常见的MIME类型</span><a href="#p68-lie-ju-ji-ge-chang-jian-de-mime-lei-xing" class="header-anchor">#</a></h2><h2><span id="p69-chang-jian-xiang-ying-ma-zhuang-tai">69、 常见响应码状态</span><a href="#p69-chang-jian-xiang-ying-ma-zhuang-tai" class="header-anchor">#</a></h2><h2><span id="p70-cong-shu-ru-url-dao-jie-xi-wang-ye-chu-lai-de-quan-guo-cheng">70、从输入URL到解析网页出来的全过程</span><a href="#p70-cong-shu-ru-url-dao-jie-xi-wang-ye-chu-lai-de-quan-guo-cheng" class="header-anchor">#</a></h2><p>（1）DNS 查询、解析</p><ul><li>输入的是域名，需要DNS解析成IP地址</li><li>四个缓存和一个递归查询</li></ul><p>（2）TCP 三次握手</p><ul><li>客户端：我准备发请求了</li><li>服务器：我收到了，你发吧</li><li>客户端：好的，我准备发了</li><li>确认双方都有收发能力</li></ul><p>（3）发送请求</p><ul><li>客户端发请求报文给服务器</li></ul><p>（4）返回响应</p><ul><li>服务器处理完请求后，发响应报文给客户端</li></ul><p>（5）渲染页面</p><ul><li>根据html生成dom树</li><li>根据css生成cssom树</li><li>cssom + dom 生成 rendre tree 渲染树</li><li>根据层叠上下文分层</li><li>生成图层绘制指令</li><li>栅格化，把图层分为图块</li><li>合成和显示，最终绘制</li></ul><p>（6）TCP 四次挥手</p><ul><li>客户端：我请求发完了</li><li>服务器：好的我知道了</li><li>服务端：我响应发完了</li><li>客户端：好的我知道了</li></ul><h2><span id="p71-tan-yi-xia-jian-tou-han-shu">71、谈一下箭头函数</span><a href="#p71-tan-yi-xia-jian-tou-han-shu" class="header-anchor">#</a></h2><h2><span id="p72-huan-cun-de-guo-cheng-xie-shang-huan-cun-he-qiang-zhi-huan-cun">72、缓存的过程（协商缓存和强制缓存）</span><a href="#p72-huan-cun-de-guo-cheng-xie-shang-huan-cun-he-qiang-zhi-huan-cun" class="header-anchor">#</a></h2><h2><span id="p73-session-zen-me-shi-yong-liu-cheng">73、session怎么使用（流程）</span><a href="#p73-session-zen-me-shi-yong-liu-cheng" class="header-anchor">#</a></h2><h2><span id="p74-qing-fen-xi-cookie-session-localstorage-he-sessionstroage">74、请分析cookie session localstorage和sessionstroage</span><a href="#p74-qing-fen-xi-cookie-session-localstorage-he-sessionstroage" class="header-anchor">#</a></h2><h2><span id="p75-ru-he-shi-xian-liu-lan-qi-nei-duo-ge-biao-qian-ye-zhi-jian-de-tong-xin">75、如何实现浏览器内多个标签页之间的通信</span><a href="#p75-ru-he-shi-xian-liu-lan-qi-nei-duo-ge-biao-qian-ye-zhi-jian-de-tong-xin" class="header-anchor">#</a></h2><p>1、调用<code>localStorage</code></p><blockquote><p>在一个标签页里面使用 <code>localStorage.setItem(key,value)</code>添加（修改、删除）内容；<br>在另一个标签页里面监听 <code>storage</code> 事件。<br>即可得到 <code>localstorge</code> 存储的值，实现不同标签页之间的通信。</p></blockquote><p>2、调用<code>cookie+setInterval()</code></p><blockquote><p>将要传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息。</p></blockquote><h2><span id="p76-zai-qian-duan-she-ji-li-wang-ye-zi-gua-ying-ru-he-shi-xian">76、在前端设计里，网页自适应如何实现</span><a href="#p76-zai-qian-duan-she-ji-li-wang-ye-zi-gua-ying-ru-he-shi-xian" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 扩展模块</title>
      <link href="/03/10-NodeJS%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97/"/>
      <url>/03/10-NodeJS%E6%89%A9%E5%B1%95%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-puppeteer">一、Puppeteer</a></li><li><a href="#er-crypto">二、crypto</a></li></ul><!-- tocstop --></div><h1><span id="yi-puppeteer">一、Puppeteer</span><a href="#yi-puppeteer" class="header-anchor">#</a></h1><p><strong>Puppeteer</strong> 是一个NodeJS库，提供了一组用来操纵Chrome的API，通俗来说就是一个<code>headless Chrome</code>。既然是浏览器，那么我们手动在浏览器做的事情，Puppeteer 都能胜任。</p><p>作用</p><ul><li>生成网页截图或者PDF文档</li><li>高级爬虫，可以爬取大量异步渲染内容的网页</li><li>模拟键盘输入、表单自动提交、登陆网页等</li><li>实现UI自动化测试</li><li>捕获站点的时间线，以便追踪你的网站，帮助分析网站性能问题</li></ul><p>示例一</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先通过创建一个浏览器实例 Browser 对象</span>    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 然后通过 Browser 对象创建页面 Page 对象</span>    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 然后 page.goto() 跳转到指定的页面</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">'https://example.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用 page.screenshot() 对页面进行截图</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> <span class="token string">'example.png'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭浏览器</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例二</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 打开浏览器</span>    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        headless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 有头模式</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 新建一个标签页</span>    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 输入网址</span>    <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span><span class="token string">'http://search.dangdang.com/?key=%BC%C6%CB%E3%BB%FA&amp;act=input'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        waitUntil<span class="token operator">:</span> <span class="token string">'load'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 抓取页面数据</span>    <span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当前函数会在页面中调用</span>        <span class="token keyword">const</span> $lis <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bigimg>li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> title <span class="token operator">=</span> $lis<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".pic"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> img <span class="token operator">=</span> $lis<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".pic>img"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> price <span class="token operator">=</span> $lis<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".search_now_price"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> detail <span class="token operator">=</span> $lis<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".detail"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> url <span class="token operator">=</span> $lis<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">".name>a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                title<span class="token punctuation">,</span> <span class="token comment">// 详情页</span>                img<span class="token punctuation">,</span> <span class="token comment">// 海报</span>                price<span class="token punctuation">,</span> <span class="token comment">// 标题</span>                detail<span class="token punctuation">,</span> <span class="token comment">// 评分</span>                url            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 再去抓取其他数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> books<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> book <span class="token operator">=</span> books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            waitUntil<span class="token operator">:</span> <span class="token string">'load'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> desc <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 书籍介绍</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        book<span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 5. 关闭浏览器</span>    <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="er-crypto">二、crypto</span><a href="#er-crypto" class="header-anchor">#</a></h1><p>加密模块。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化</title>
      <link href="/03/04-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/03/04-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>模块化是工程化的基础。</p><h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-nodejs-mo-kuai-hua">一、NodeJS 模块化</a><ul><li><a href="#1-mo-kuai-bao-lu">1、模块暴露</a></li><li><a href="#2-mo-kuai-dao-ru">2、模块导入</a></li><li><a href="#3-lu-jing-fen-xi-he-wen-jian-ding-wei">3、路径分析和文件定位</a></li></ul></li><li><a href="#er-mo-kuai-hua-es6">二、模块化（ES6）</a><ul><li><a href="#1-dao-chu">1、导出</a></li><li><a href="#2-dao-ru">2、导入</a></li><li><a href="#3-ding-yi-bie-ming">3、定义别名</a></li><li><a href="#4-mo-ren-dao-chu-dao-ru">4、默认导出导入</a></li><li><a href="#5-tong-pei-fu-dao-chu">5、通配符导出</a></li></ul></li><li><a href="#san-amd-cmd">三、AMD、CMD</a></li></ul><!-- tocstop --></div><h1><span id="yi-nodejs-mo-kuai-hua">一、NodeJS 模块化</span><a href="#yi-nodejs-mo-kuai-hua" class="header-anchor">#</a></h1><p>NodeJS 借鉴了 Common 规范实现了一套模块系统，称为 <strong>CommonJS</strong> 模块化系统。</p><h2><span id="p1-mo-kuai-bao-lu">1、模块暴露</span><a href="#p1-mo-kuai-bao-lu" class="header-anchor">#</a></h2><p>默认情况下模块内部代码对于外部来说都是不可见的，可以通过以下方式向外部暴露变量和函数。</p><p>（1）通过 <code>module.exports</code> 来向外部暴露变量和函数</p><p><code>module.exports</code> 是导出的对象。</p><p>无论添加还是直接覆盖，他永远都是导出的对象。</p><p>如果是导出一个对象，可以写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment">//或者</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>obj<span class="token operator">:</span>obj<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果导出一组对象，可以写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">moudle<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>obj<span class="token operator">:</span>obj<span class="token punctuation">,</span> obj2<span class="token operator">:</span>obj2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果直接导出</p><pre class="line-numbers language-none"><code class="language-none">module.exports &#x3D; fun; &#x2F;&#x2F; 导出的对象是 fun 函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 暴露出去</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> add<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）将变量和函数设置为 <code>exports</code> 的属性来暴露变量和函数为了方便，Node为每个模块提供一个exports变量，指向module.exports，例如： <code>module.exports.fun = …</code>，相当于<code>exports.fun = ...</code>。</p><p><code>exports</code> 本身不具备导出功能，但是修改它的时候，其实是修改了<code>module.exports</code> 。<code>exports</code> 是指向 <code>moudlue.exports</code> 的对象地址的一个新对象。（<code>exports = xxx</code> 的用法是错误的，这样使其不再绑定。正确的用法是 <code>exports.xxx = xxx</code> ）</p><p>不能将一个值赋值给<code>exports</code>，而是使用<code>exports.XXX</code>来暴露。否则这样它将不再绑定到<code>module.exports</code>。如果exports导出的变量类型是引用类型如函数，则会断开与<code>module.exports</code>的地址指向，导致变量导出失败。因为最终还是要靠<code>module.exports</code>来导出变量的。</p><p>例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 暴露出去</span>exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span> <span class="token comment">// &#123; add: [Function: add] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-mo-kuai-dao-ru">2、模块导入</span><a href="#p2-mo-kuai-dao-ru" class="header-anchor">#</a></h2><p>通过 <code>require()</code> 来引入外部的模块</p><p>模块分为三种类型。</p><p>（1）系统模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）第三方模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// npm install express -save</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）自定义模块</p><p>可以不书写后缀名：默认按照 js json node 顺序解析</p><p>一定要加上<code>./</code> 或者 <code>../</code> 之类的路径 否则可能解析错误</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// f1,f2 是 函数 o1,o2 是对象</span><span class="token comment">// (1)</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>f1 <span class="token operator">=</span> f1<span class="token punctuation">;</span><span class="token operator">==</span><span class="token operator">></span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>f1<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>o1 <span class="token operator">=</span> o1<span class="token punctuation">;</span><span class="token operator">==</span><span class="token operator">></span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>o1<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">==</span><span class="token operator">></span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#123; o1: &#123;...&#125;&#125;</span><span class="token comment">// (2)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>f1<span class="token operator">:</span>f1<span class="token punctuation">,</span> f2<span class="token operator">:</span>f2<span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">></span> <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#123; o1: &#123;...&#125;, o2: &#123;...&#125; &#125;</span><span class="token comment">// (3)</span>exports<span class="token punctuation">.</span>f1 <span class="token operator">=</span> f1<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>f2 <span class="token operator">=</span> f2<span class="token punctuation">;</span><span class="token operator">==</span><span class="token operator">></span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>f1<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// (4)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">></span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./xxx/xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: f]</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>！实际使用例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// (1)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">></span><span class="token keyword">const</span> xxx <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-lu-jing-fen-xi-he-wen-jian-ding-wei">3、路径分析和文件定位</span><a href="#p3-lu-jing-fen-xi-he-wen-jian-ding-wei" class="header-anchor">#</a></h2><p>路径形式的文件模块：以<code>./</code> <code>../</code>路径形式的文件模块，将其转化为真实路径，根据真实路径索引去查找。</p><p>第三方模块会从 <code>node_modules</code> 逐层往上找，直到根目录的<code>node_modules</code>。</p><p><code>require()</code>中的文件，如果没有后缀名，会以<code>.js .json .node</code>次序补充扩展名，依次尝试。</p><h1><span id="er-mo-kuai-hua-es6">二、模块化（ES6）</span><a href="#er-mo-kuai-hua-es6" class="header-anchor">#</a></h1><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p><p>ES6的模块化分为导出（export）与导入（import）。</p><p>模块始终使用 <code>use strict</code>。</p><p>模块代码只执行一次。导出仅创建一次，然后会在导入之间共享。</p><h2><span id="p1-dao-chu">1、导出</span><a href="#p1-dao-chu" class="header-anchor">#</a></h2><p>使用关键字 <code>export</code> 导出模块。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 单个导出</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">export</span> funcion <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 批量导出</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>c<span class="token punctuation">,</span> d <span class="token keyword">as</span> e<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 这里也能定义别名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-dao-ru">2、导入</span><a href="#p2-dao-ru" class="header-anchor">#</a></h2><p>使用关键字 <code>import</code> 导出模块。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> fn<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./module/mo.js"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以少写，但是不能多写。</p><h2><span id="p3-ding-yi-bie-ming">3、定义别名</span><a href="#p3-ding-yi-bie-ming" class="header-anchor">#</a></h2><p>出现重名的情况，会报错，此时可以用关键字 <code>as</code> 定义<strong>别名</strong>。</p><p>通过别名可以解决命名冲突。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>fn<span class="token punctuation">,</span> name <span class="token keyword">as</span> ns<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./module/mo.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p4-mo-ren-dao-chu-dao-ru">4、默认导出导入</span><a href="#p4-mo-ren-dao-chu-dao-ru" class="header-anchor">#</a></h2><p>常用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里写对象</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// x 可以得到一个对象</span><span class="token keyword">import</span> x <span class="token keyword">from</span> <span class="token string">"./module/mo.js"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个文件只能定义一个 <code>export default</code> 。</p><p>混合导出导入 <code>import a, &#123;b&#125; from ...</code> 注意书写顺序</p><h2><span id="p5-tong-pei-fu-dao-chu">5、通配符导出</span><a href="#p5-tong-pei-fu-dao-chu" class="header-anchor">#</a></h2><p><code>import * as mo from ...</code></p><p>导出所有的。</p><h1><span id="san-amd-cmd">三、AMD、CMD</span><a href="#san-amd-cmd" class="header-anchor">#</a></h1><p>了解。</p><p>AMD —— 最古老的模块系统之一，最初由 require.js 库实现。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件循环机制</title>
      <link href="/03/02-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
      <url>/03/02-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-jin-cheng-yu-xian-cheng">一、进程与线程</a></li><li><a href="#er-webworkert">二、WebWorkert</a></li><li><a href="#san-zhi-xing-zhan">三、执行栈</a></li><li><a href="#si-liu-lan-qi-zhong-de-shi-jian-xun-huan">四、浏览器中的事件循环 △</a></li><li><a href="#wu-nodejs-zhong-de-shi-jian-xun-huan">五、NodeJS 中的事件循环 △</a></li><li><a href="#wu-hong-ren-wu-wei-ren-wu">五、宏任务、微任务 △</a><ul><li><a href="#1-wei-ren-wu">1、微任务</a></li><li><a href="#2-hong-ren-wu">2、宏任务</a></li><li><a href="#3-dai-ma-zhi-xing-shun-xu">3、代码执行顺序</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-jin-cheng-yu-xian-cheng">一、进程与线程</span><a href="#yi-jin-cheng-yu-xian-cheng" class="header-anchor">#</a></h1><p>JS 是单线程执行的，大多数浏览器是多线程的，HTML5的 Web Workers 可以构建多进程。</p><p><strong>进程</strong> 描述了 CPU 在运行指令及加载和保存上下文所需的时间，放在应用上来说就代表了一个程序。</p><p><strong>线程</strong>是进程中的更小单位，是进程内的一个独立单元，CPU基本调度单位，是程序执行的一个完整流程。</p><p>进程和线程的关系</p><ul><li>一个进程至少有一个运行的线程（主线程），如果一个进程有多个进程，则称进程是多线程运行的。</li><li>一个进程中的数据可以供其中多个线程直接共享，进程之间的数据是不能直接共享的。</li></ul><p>多线程</p><ul><li>优点 有效提高CPU的利用率。</li><li>缺点 增加开销（创建、切换），死锁与状态同步问题。</li></ul><p>单线程</p><ul><li>优点 顺序编程简单易懂。</li><li>缺点 效率低。</li></ul><h1><span id="er-webworkert">二、WebWorkert</span><a href="#er-webworkert" class="header-anchor">#</a></h1><p>WebWorkert 提供了JS分线程的实现。</p><p>相关API</p><ul><li><code>Worker</code> 构造函数, 加载分线程执行的JS文件</li><li><code>Worker.prototype.onmessage</code> 用于接收另一个线程的回调函数</li><li><code>Worker.prototype.postMessage</code> 向另一个线程发送消息</li></ul><p>缺点</p><ul><li>worker内代码不能操作DOM（更新UI）。</li><li>不能跨域加载JS。</li><li>兼容性问题，不是每个浏览器都支持这个新特性。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 多线程</span>oBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 实例化一个worker 把创建的分线程的js的地址传入</span>    <span class="token comment">// 1. 请求js  1) 在服务器环境下  2) 不能跨域请求</span>    <span class="token keyword">var</span> ww <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"./worker.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 把需要计算的数据发送给多线程</span>    ww<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 分线程执行完成会发送数据，这个是接收到数据就会触发</span>    ww<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>        <span class="token comment">// 关闭分线程</span>        ww<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// worker.js</span><span class="token comment">// 此 js文件 已经被worker构造函数实例化了，</span><span class="token comment">// this  指向 worker 的实例化对象</span><span class="token comment">// 分线程执行需要 this 来调用 onmessage 事件</span><span class="token comment">// 当接收主线程请求就会触发</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token comment">// 返回数据</span>    <span class="token function">postMessage</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关闭分线程</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-zhi-xing-zhan">三、执行栈</span><a href="#san-zhi-xing-zhan" class="header-anchor">#</a></h1><p>可以把执行栈认为是一个存储函数调用的<strong>栈结构</strong>，遵循先进后出的原则。</p><p><img src="/images/2020/%E6%89%A7%E8%A1%8C%E6%A0%88.gif" alt="执行栈"></p><p>当我们使用递归的时候，因为栈可存放的函数是有<strong>限制</strong>的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈的问题。</p><h1><span id="si-liu-lan-qi-zhong-de-shi-jian-xun-huan">四、浏览器中的事件循环 △</span><a href="#si-liu-lan-qi-zhong-de-shi-jian-xun-huan" class="header-anchor">#</a></h1><p><img src="/images/2020/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.jpg" alt="浏览器中的事件循环"></p><h1><span id="wu-nodejs-zhong-de-shi-jian-xun-huan">五、NodeJS 中的事件循环 △</span><a href="#wu-nodejs-zhong-de-shi-jian-xun-huan" class="header-anchor">#</a></h1><p>JS是单线程的，那么NodeJS是如何做到非阻塞的？</p><p>在NodeJS内部使用了第三方库<code>libuv</code> ，NodeJS会把IO、文件读取等异步操作交由它处理，而JS主线程可以去处理其他的事情。<code>libuv</code> 会开启不同的线程去处理这些延迟操作，处理完后，会将异步操作的回调函数放在NodeJS的<strong>轮询队列</strong>中，NodeJS会在适当的时候处理轮询队列中的回调函数，从而实现非阻塞。所以NodeJS在处理阻塞操作时，并不是单线程的。</p><p>分为六个阶段。</p><p><img src="/images/2020/NodeJS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.jpg" alt="NodeJS中的事件循环"></p><p>NodeJS事件轮询队列分为6个阶段</p><ol><li><code>timers</code> <strong>处理定时器</strong> <code>setTimeout</code> <code>setInterval</code></li><li><code>pending</code> <code>callbacks</code> 处理操作系统级的回调函数（了解）</li><li><code>idle</code> <code>prepare</code> 处理NodeJS内部操作调用（了解）</li><li><code>poll</code> <strong>处理读写操作，网络请求</strong>。（1）当这个阶段的回调函数队列不为空的时候，则处理队列中的回调函数，直到<strong>队列为空</strong>或者<strong>最大回调数</strong>的时候，就跳过此阶段，处理下一阶段。（2）当进入poll阶段的时候，如果此阶段的回调队列为空，系统会在此阶段等待新的回调函数入队，再进行处理。在这个阶段会同时进行检测**<code>timers</code>阶段是否已经有回调函数超时**，如果有，则马上跳过poll阶段，进入下一个阶段。如果**<code>check</code>设置了<code>setImmediate</code>**，也会进入下一个阶段。</li><li><code>check</code> <strong>专门处理<code>setImmediate</code>回调函数</strong>。</li><li><code>close callbacks</code> 专门执行关闭的回调函数。</li></ol><p><strong><code>process.nextTick</code></strong> <code>Promise</code> 不由<code>libuv</code> 管理，每次事件的轮询进入到下一个队列的时候，都会检查这两个队列是否为空，不为空则马上处理。（注意因为<code>process.nextTick</code>会在事件轮询每个阶段之间执行， 如果递归调用<code>nextTick</code>就会导致轮询阻塞，所以尽量避免使用<code>process.nextTick</code>， 可以使用<code>setImmediate</code>代替）。</p><h1><span id="wu-hong-ren-wu-wei-ren-wu">五、宏任务、微任务 △</span><a href="#wu-hong-ren-wu-wei-ren-wu" class="header-anchor">#</a></h1><p><img src="/images/2020/%E5%BE%AE%E9%98%9F%E5%88%97%E5%AE%8F%E9%98%9F%E5%88%97.png" alt="image-20200901142544815"></p><h2><span id="p1-wei-ren-wu">1、微任务</span><a href="#p1-wei-ren-wu" class="header-anchor">#</a></h2><ul><li><code>process.nextTick</code>（优先级最高）</li><li><code>Primise.then/catch</code> （依顺序）</li><li><code>queueMicrostask</code></li></ul><p>执行微队列时新增的微任务添加到当前微任务的下一个。（新添加的等下一轮执行）。</p><h2><span id="p2-hong-ren-wu">2、宏任务</span><a href="#p2-hong-ren-wu" class="header-anchor">#</a></h2><p>宿主环境提供的任务，具体看 NodeJS 事件循环机制。</p><p>微任务优先级高于宏任务。</p><h2><span id="p3-dai-ma-zhi-xing-shun-xu">3、代码执行顺序</span><a href="#p3-dai-ma-zhi-xing-shun-xu" class="header-anchor">#</a></h2><p>同步代码 --&gt; 微任务（<code>process.nextTick</code> --&gt; <code>Primise</code> <code>async</code> ） --&gt; 宏任务（<code>setTimeout</code> <code>setInterval</code> --&gt; <code>setImmediate</code>）</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 服务器</title>
      <link href="/03/07-NodeJS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/03/07-NodeJS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-nodejs-http-mo-kuai">一、NodeJS HTTP模块</a><ul><li><a href="#1-da-jian-fu-wu-qi-duan">1、搭建服务器端</a></li><li><a href="#2-da-jian-ke-hu-duan">2、搭建客户端</a></li><li><a href="#3-chang-yong-dai-ma-pian-duan">3、常用代码片段</a></li></ul></li><li><a href="#er-express-kuang-jia">二、Express 框架</a><ul><li><a href="#1-an-zhuang">1、安装</a></li><li><a href="#2-kai-qi-fu-wu-qi">2、开启服务器</a></li><li><a href="#3-she-zhi-jing-tai-zi-yuan-mu-lu">3、设置静态资源目录</a></li><li><a href="#4-she-zhi-lu-you">4、设置路由</a></li><li><a href="#5-jie-shou-shu-ju">5、接收数据</a><ul><li><a href="#body-parser">body-parser</a></li><li><a href="#query-params">query / params</a></li></ul></li></ul></li><li><a href="#san-json-server">三、json-server</a><ul><li><a href="#1-kai-shi">1、开始</a></li><li><a href="#2-postman">2、Postman</a></li><li><a href="#3-rest-api">3、REST API</a></li><li><a href="#4-cao-zuo">4、操作</a></li></ul></li><li><a href="#si-koa">四、koa *</a></li><li><a href="#wu-mo-ban-yin-qing-pug">五、模版引擎 - pug *</a></li><li><a href="#liu-mo-ban-yin-qing-ejs">六、模版引擎 - ejs *</a></li></ul><!-- tocstop --></div><h1><span id="yi-nodejs-http-mo-kuai">一、NodeJS HTTP模块</span><a href="#yi-nodejs-http-mo-kuai" class="header-anchor">#</a></h1><h2><span id="p1-da-jian-fu-wu-qi-duan">1、搭建服务器端</span><a href="#p1-da-jian-fu-wu-qi-duan" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment">// 创建服务</span><span class="token keyword">const</span> serve <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置响应头(文件格式，字符编码)</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"text/plain;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回响应内容</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span><span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span><span class="token comment">// 启动服务并确定域名和端口号</span>serve<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> host<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器打开失败"</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器启动成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-da-jian-ke-hu-duan">2、搭建客户端</span><a href="#p2-da-jian-ke-hu-duan" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"http://localhost:3838"</span><span class="token punctuation">;</span><span class="token comment">// 书写请求</span><span class="token keyword">const</span> request <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 响应状态码</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>"data“<span class="token punctuation">,</span><span class="token parameter">chunk</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 发送请求</span>request<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-chang-yong-dai-ma-pian-duan">3、常用代码片段</span><a href="#p3-chang-yong-dai-ma-pian-duan" class="header-anchor">#</a></h2><p>设置响应解析类型 <code>res.setHeader(&quot;Content-Type&quot;, &quot;text/html;charset=utf-8&quot;)</code></p><p>设置状态码 <code>res.statusCode = 200</code></p><p>获取当前URL <code>req.url</code> 去掉绝对路径 <code>req.url.slice(1)</code></p><p>中文URL转码 <code>decodeURL(req.url)</code></p><p><code>req.query</code></p><h1><span id="er-express-kuang-jia">二、Express 框架</span><a href="#er-express-kuang-jia" class="header-anchor">#</a></h1><p>Express 是一个保持最小规模的灵活的 Node.js Web 应用程序开发框架，为 Web 和移动应用程序提供一组强大的功能。</p><h2><span id="p1-an-zhuang">1、安装</span><a href="#p1-an-zhuang" class="header-anchor">#</a></h2><p>安装模块</p><p><code>npm install express --save</code></p><p>创建一个express项目</p><p><code>express 项目名字</code></p><p>安装 express 的中间件 express-static</p><p><code>npm install express-static --save</code></p><p>安装express 项目生成器</p><p><code>npm install express-generator -g</code></p><h2><span id="p2-kai-qi-fu-wu-qi">2、开启服务器</span><a href="#p2-kai-qi-fu-wu-qi" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//port</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>http 默认80端口，https 默认443端口。</p><h2><span id="p3-she-zhi-jing-tai-zi-yuan-mu-lu">3、设置静态资源目录</span><a href="#p3-she-zhi-jing-tai-zi-yuan-mu-lu" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>！明确到一个文件夹。</p><p>！可以指定多个。</p><h2><span id="p4-she-zhi-lu-you">4、设置路由</span><a href="#p4-she-zhi-lu-you" class="header-anchor">#</a></h2><pre class="line-numbers language-none"><code class="language-none">app.allapp.get( URL, (req, res)&#x3D;&gt;&#123;&#125;)app.post( URL, (req, res)&#x3D;&gt;&#123;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果指定多个，当遇到访问方法和地址相同时，遇到第一个，默认不会向下执行 – <strong>只会匹配第一个</strong></p><p>只能响应一次。</p><blockquote><p>也可以用 <code>next()</code> 继续向下查找是否有满足条件的路由。</p><p>第二次响应没有意义。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 允许所有站点跨域</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p5-jie-shou-shu-ju">5、接收数据</span><a href="#p5-jie-shou-shu-ju" class="header-anchor">#</a></h2><h3><span id="pbody-parser">body-parser</span><a href="#pbody-parser" class="header-anchor">#</a></h3><p>接收post方式传来的数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"body-parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span> bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>context<span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pquery-params">query / params</span><a href="#pquery-params" class="header-anchor">#</a></h3><p>接收get方式传来的数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// "?age=123"</span><span class="token keyword">const</span> age <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>age<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="san-json-server">三、json-server</span><a href="#san-json-server" class="header-anchor">#</a></h1><p>用来快速搭建模拟的 REST API 的工具包。</p><h2><span id="p1-kai-shi">1、开始</span><a href="#p1-kai-shi" class="header-anchor">#</a></h2><p>（1）安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i json-server -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）查看版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">json-server -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）准备一个 db.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; db.json&#123;    &quot;sword&quot;: [&#123;        &quot;id&quot;: 0,        &quot;name&quot;: &quot;木剑&quot;,        &quot;attr&quot;: &#123;            &quot;atk&quot;: 1,            &quot;parry&quot;: 1        &#125;    &#125;,&#123;        &quot;id&quot;: 1,        &quot;name&quot;: &quot;铜剑&quot;,        &quot;attr&quot;: &#123;            &quot;atk&quot;: 5,            &quot;parry&quot;: 3        &#125;    &#125;,&#123;        &quot;id&quot;: 2,        &quot;name&quot;: &quot;铁剑&quot;,        &quot;attr&quot;: &#123;            &quot;atk&quot;: 8,            &quot;parry&quot;: 6        &#125;    &#125;&#123;        &quot;id&quot;: 3,        &quot;name&quot;: &quot;钢剑&quot;,        &quot;attr&quot;: &#123;            &quot;atk&quot;: 12,            &quot;parry&quot;: 10        &#125;    &#125;],    &quot;shield&quot;: [&#123;        &quot;id&quot;: 0,        &quot;name&quot;: &quot;木盾&quot;,        &quot;def&quot;: 5    &#125;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）配置服务器</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; package.json&#x2F;&#x2F; &gt; npm run server&#123;    &quot;scripts&quot;: &#123;        &quot;s&quot;: &quot;json-server -w db.json -H 127.0.0.1 -p 8888&quot;    &#125;,    &quot;name&quot;: &quot;server&quot;,    &quot;version&quot;: &quot;1.0.0&quot;,    &quot;dependencies&quot;: &#123;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; json-server.json&#123;    &quot;port&quot;: 80,    &quot;watch&quot;: true,    &quot;host&quot;: &quot;127.0.0.1&quot;,    &#x2F;&#x2F; 设置静态目录    &quot;static&quot;: &quot;.&#x2F;public&quot;,    &quot;read-only&quot;: false,    &#x2F;&#x2F; 允许跨域    &quot;no-cors&quot;: false,    &quot;no-gzip&quot;: false,    &quot;delay&quot;: 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）开启服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">json-server --watch db.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">json-server --watch db.json --host 127.0.0.1 --port 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm run server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-postman">2、Postman</span><a href="#p2-postman" class="header-anchor">#</a></h2><p>API测试工具。</p><p><a href="postman.com/downloads">下载</a></p><h2><span id="p3-rest-api">3、REST API</span><a href="#p3-rest-api" class="header-anchor">#</a></h2><p>REST，Representational State Transfer，表现层状态转移的缩写，它是由罗伊·菲尔丁（Roy  Fielding）提出的，是用来描述创建HTTP  API的标准方法的，他发现这四种常用的行为（查看（view），创建（create），编辑（edit）和删除（delete））都可以直接映射到HTTP 中已实现的GET,POST,PUT和DELETE方法。</p><h2><span id="p4-cao-zuo">4、操作</span><a href="#p4-cao-zuo" class="header-anchor">#</a></h2><p>查询 - get</p><p>（1）get <code>books</code></p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）get id为1</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword?id&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）单条件查找</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword?name&#x3D;铁剑<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）多条件查找</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword?name&#x3D;铁剑&amp;atk&#x3D;10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）全局模糊搜索</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword?q&#x3D;剑<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（6）分页</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword?_limit&#x3D;1&amp;_page&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（7）排序（asc/desc）</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword?sort&#x3D;id&amp;_order&#x3D;desc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加数据 - post</p><p>postman中测试，设置主体 x-www-form-urlencoded</p><p>删除数据 - delete</p><p>postman中测试</p><pre class="line-numbers language-none"><code class="language-none">..&#x2F;sword&#x2F;6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>整体更新数据 - put</p><p>postman中测试，设置主体 x-www-form-urlencoded</p><p>局部更新数据 - fatch</p><p>postman中测试，设置主体 x-www-form-urlencoded</p><p><a href="https://blog.csdn.net/u012149969/article/details/108394159">参考文档</a></p><h1><span id="si-koa">四、koa *</span><a href="#si-koa" class="header-anchor">#</a></h1><h1><span id="wu-mo-ban-yin-qing-pug">五、模版引擎 - pug *</span><a href="#wu-mo-ban-yin-qing-pug" class="header-anchor">#</a></h1><h1><span id="liu-mo-ban-yin-qing-ejs">六、模版引擎 - ejs *</span><a href="#liu-mo-ban-yin-qing-ejs" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX</title>
      <link href="/03/08-AJAX/"/>
      <url>/03/08-AJAX/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-ajax">一、ajax</a><ul><li><a href="#1-gong-zuo-yuan-li">1、工作原理</a></li><li><a href="#2-te-dian">2、特点</a></li><li><a href="#3-xhr-xmlhttprequest">3、XHR - XMLHttpRequest</a></li><li><a href="#4-shi-yong-bu-zou">4、使用步骤</a><ul><li><a href="#1-chuang-jian-he-xin-dui-xiang">（1）创建核心对象</a></li><li><a href="#2-da-kai-jie-kou-she-zhi-shu-ju-lei-xing">（2）打开接口，设置数据类型</a></li><li><a href="#3-fa-song-qing-qiu">（3）发送请求</a></li><li><a href="#4-jie-shou-shu-ju">（4）接收数据</a></li></ul></li><li><a href="#5-xhr-api">5、XHR API △</a></li><li><a href="#6-get-fang-shi-qing-qiu-shi-li">6、GET方式请求示例</a></li><li><a href="#7-post-fang-shi-qing-qiu-shi-li">7、POST方式请求示例</a></li><li><a href="#8-jquery-qing-qiu-shi-li">8、jQuery请求示例</a></li></ul></li><li><a href="#er-fetch">二、fetch</a></li><li><a href="#san-axios">三、Axios △</a><ul><li><a href="#1-kai-shi">1、开始</a></li><li><a href="#2-ji-ben-shi-yong">2、基本使用</a></li><li><a href="#3-lan-jie-qi">3、拦截器</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-ajax">一、ajax</span><a href="#yi-ajax" class="header-anchor">#</a></h1><p><strong>AJAX</strong> 即 Asynchronous Javascript And XML，异步 JavaScript 和 XML。是指一种无需重新加载整个网页的情况下，能够更新部分网页的技术。通过Ajax可以在浏览器中向服务器发起异步请求。</p><p>XML 称为可扩展标记语言，被设计用来传输和存储数据，和 HTML 类似，不同的是 HTML 日常使用大部分都是预定义标签，XML 全部都是自定义标签，用来表示一些数据。</p><h2><span id="p1-gong-zuo-yuan-li">1、工作原理</span><a href="#p1-gong-zuo-yuan-li" class="header-anchor">#</a></h2><p>ajax 的工作原理相当于在用户和服务器之间加了一个中间层（Ajax引擎），使用户操作与服务器响应异步化。</p><h2><span id="p2-te-dian">2、特点</span><a href="#p2-te-dian" class="header-anchor">#</a></h2><p>优点</p><ul><li>无需刷新页面来和服务器通信。</li><li>允许你根据用户事件来更新部分页面内容。</li></ul><p>缺点</p><ul><li>没有浏览历史，无法回退。</li><li>存在跨域问题。</li><li>对SEO不友好。</li></ul><h2><span id="p3-xhr-xmlhttprequest">3、XHR - XMLHttpRequest</span><a href="#p3-xhr-xmlhttprequest" class="header-anchor">#</a></h2><p>Ajax 的所有操作都是通过 <code>XMLHttpRequest</code> 对象进行的。</p><h2><span id="p4-shi-yong-bu-zou">4、使用步骤</span><a href="#p4-shi-yong-bu-zou" class="header-anchor">#</a></h2><h3><span id="p-1-chuang-jian-he-xin-dui-xiang">（1）创建核心对象</span><a href="#p-1-chuang-jian-he-xin-dui-xiang" class="header-anchor">#</a></h3><p>创建 <code>XMLHttpRequest</code> 核心对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p-2-da-kai-jie-kou-she-zhi-shu-ju-lei-xing">（2）打开接口，设置数据类型</span><a href="#p-2-da-kai-jie-kou-she-zhi-shu-ju-lei-xing" class="header-anchor">#</a></h3><p>通过 <code>open(method, URL)</code> 打开接口。</p><ul><li><code>method</code> 请求方法，<code>POST</code> 或者 <code>GET</code>。</li><li><code>URL</code> 接口地址。</li></ul><p>！这里可以设置数据格式，即请求头，媒体类型有</p><ul><li><code>application/json</code></li><li><code>application/x-www-form-urlencoded</code></li><li><code>formdata</code></li></ul><p><code>xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1/weibo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p-3-fa-song-qing-qiu">（3）发送请求</span><a href="#p-3-fa-song-qing-qiu" class="header-anchor">#</a></h3><p>发送请求 <code>send(body)</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringifly</span><span class="token punctuation">(</span> content <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只能传字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>GET</code> 请求不需要参数， <code>POST</code> 请求需要。</p><h3><span id="p-4-jie-shou-shu-ju">（4）接收数据</span><a href="#p-4-jie-shou-shu-ju" class="header-anchor">#</a></h3><p><code>xhr.responseXML</code> 接收XML格式的响应数据。</p><p><code>xhr.responseText</code> 接收文本格式的响应数据。</p><p>a. 通过 <code>onreadystatechange</code> 事件接收数据，xhr 对象有 <code>readyState</code> 表示当前的请求状态，状态改变就会触发这个事件。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> text <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b. 通过 <code>onload</code> 事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p5-xhr-api">5、XHR API △</span><a href="#p5-xhr-api" class="header-anchor">#</a></h2><p>（01）<code>XMLHttpRequest()</code> 创建XHR对象的构造函数</p><p>（02）<code>readyState</code> 当前的请求状态</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token function">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 3</span>    <span class="token comment">// 4</span><span class="token punctuation">&#125;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"http://..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>状态</th><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>表示 <code>XMLHttpRequest</code> 实例已经生成，但是 <code>open()</code> 方法还没有被调用。</td></tr><tr><td>1</td><td>OPENED</td><td>表示 <code>send()</code>方法还没有被调用，仍然可以使用<code>setRequestHeader()</code>，设定HTTP请求的头信息。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>表示 <code>send()</code> 方法已经执行，并且头信息和状态码已经收到。</td></tr><tr><td>3</td><td>LOADING</td><td>表示正在接收服务器传来的body部分的数据，如果responseType属性是text或者空字符串，responseText就会包含已经收到的部分信息。</td></tr><tr><td>4</td><td>DONE</td><td>表示服务器数据已经接收完成，或者本次接收已经失败了。</td></tr></tbody></table><p>（03）<code>status</code> 响应状态码</p><p>（04）<code>statusText</code> 响应状态文本</p><p>（05）<code>onreadystatechange</code> 当<code>readyState</code>发生变化就会触发这个事件</p><p>（06）<code>responseType</code> 指定响应数据类型，如果是 json，得到响应后自动解析响应体数据</p><p>（07）<code>response</code> 响应体数据，类型取决于 <code>responseType</code> 的指定</p><p>（08）<code>timeout</code> 指定请求超时时间（毫秒），默认是0，代表没有限制</p><p>（09）<code>ontimeout</code> 超时之后触发的事件</p><p>（10）<code>onerror</code> 请求网络错误触发的事件</p><p>（11）<code>open(method, URL[, async])</code> 初始化一个请求</p><p>（12）<code>send(data)</code> 发送请求</p><p>（13）<code>abort()</code> 中断请求</p><p>（14）<code>getResponseHeader(name)</code>  获取指定名称的响应头值</p><p>（15）<code>getAllResponseHeaders()</code> 获取所有响应头组成的字符串</p><p>（16）<code>setRequestHeader(name, value)</code> 设置请求头</p><p>（17）<code>xhr.responseXML</code> 接收XML格式的响应数据</p><p>（18）<code>xhr.responseText</code> 接收文本格式的响应数据</p><h2><span id="p6-get-fang-shi-qing-qiu-shi-li">6、GET方式请求示例</span><a href="#p6-get-fang-shi-qing-qiu-shi-li" class="header-anchor">#</a></h2><h2><span id="p7-post-fang-shi-qing-qiu-shi-li">7、POST方式请求示例</span><a href="#p7-post-fang-shi-qing-qiu-shi-li" class="header-anchor">#</a></h2><h2><span id="p8-jquery-qing-qiu-shi-li">8、jQuery请求示例</span><a href="#p8-jquery-qing-qiu-shi-li" class="header-anchor">#</a></h2><h1><span id="er-fetch">二、fetch</span><a href="#er-fetch" class="header-anchor">#</a></h1><p>fetch 是新型 ajax 请求方式，返回的是一个 Promise 对象。</p><p>xhr --&gt; fetch</p><p>（1）get</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）post</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// application/json</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 get</span>    headers<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span><span class="token string">"绒布球之剑"</span><span class="token punctuation">,</span>        attr<span class="token operator">:</span><span class="token punctuation">&#123;</span>            atk<span class="token operator">:</span> <span class="token number">999</span><span class="token punctuation">,</span>            parry<span class="token operator">:</span> <span class="token number">999</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// application/x-www-form-urlencoded</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>     headers<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    body<span class="token operator">:</span> <span class="token string">"name=大绒布球之剑&amp;text=巫师的绒布球之剑"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）delete</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"delete"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）put</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"put"</span><span class="token punctuation">,</span>     headers<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span><span class="token string">"绒布球之大剑"</span><span class="token punctuation">,</span>        attr<span class="token operator">:</span><span class="token punctuation">&#123;</span>            atk<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>            parry<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">999</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）patch</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"patch"</span><span class="token punctuation">,</span>     headers<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span><span class="token string">"绒布球快乐剑"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-axios">三、Axios △</span><a href="#san-axios" class="header-anchor">#</a></h1><p><strong>Axios</strong> 是目前最受欢迎的 ajax 封装库， 基于 Promise。</p><p><a href="http://www.axios-js.com/zh-cn">文档</a></p><h2><span id="p1-kai-shi">1、开始</span><a href="#p1-kai-shi" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-ji-ben-shi-yong">2、基本使用</span><a href="#p2-ji-ben-shi-yong" class="header-anchor">#</a></h2><p><code>axios</code> 相当于 <code>axios.request</code></p><p>返回的是一个 Promise 对象</p><p>（1）GET - 默认</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1/sword/9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1/sword/9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）POST</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// application/json</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"破剑"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// application/x-www-form-urlencoded</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token string">"name=破晓快乐剑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">'http://127.0.0.1/sword'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"破铁剑"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）DELETE</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"delete"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（4）PUT</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"七色破晓剑"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"put"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"七色破晓剑"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）PATCH</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"轩辕剑"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"patch"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">"轩辕剑"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（6）连缀写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（7）await写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p3-lan-jie-qi">3、拦截器</span><a href="#p3-lan-jie-qi" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 请求拦截</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token parameter">config</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"url"</span> <span class="token operator">+</span> config<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 响应拦截</span>axios<span class="token punctuation">.</span>intercertors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域解决方案</title>
      <link href="/03/09-%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/03/09-%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-tong-yuan-ce-lue">一、同源策略</a></li><li><a href="#er-jsonp">二、JSONP</a><ul><li><a href="#gong-zuo-yuan-li">工作原理</a></li><li><a href="#ying-yong-shi-li">应用示例</a></li></ul></li><li><a href="#san-cors">三、CORS</a></li><li><a href="#si-fu-wu-qi-dai-li">四、服务器代理</a></li></ul><!-- tocstop --></div><h1><span id="yi-tong-yuan-ce-lue">一、同源策略</span><a href="#yi-tong-yuan-ce-lue" class="header-anchor">#</a></h1><p>Same-Origin Policy，<a href><strong>同源策略</strong></a> 最早由 Netscape 公司提出，是浏览器的一种安全策略。该策略表示<strong>协议</strong>、<strong>域名</strong>、<strong>端口号</strong>必须完全相同。</p><p>违背同源策略就是<a href><strong>跨域</strong></a>，主要是针对 AJAX 而言。</p><h1><span id="er-jsonp">二、JSONP</span><a href="#er-jsonp" class="header-anchor">#</a></h1><p>JSON with Padding，<strong>JSONP</strong> 是一个非官方的跨域解决方案，只支持get请求，而且需要服务器的配合。</p><h2><span id="pgong-zuo-yuan-li">工作原理</span><a href="#pgong-zuo-yuan-li" class="header-anchor">#</a></h2><p>在网页有一些标签天生具有跨域能力，比如 <code>img</code> <code>link</code> <code>iframe</code> <code>script</code>。JSONP就是利用 <code>script</code> 标签的跨域能力来发送请求的。</p><h2><span id="pying-yong-shi-li">应用示例</span><a href="#pying-yong-shi-li" class="header-anchor">#</a></h2><p>客户端</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 这是一个事件触发</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 新建一个 script 标签</span>        script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置需要跨域的URL</span>        script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://.../test?a=1&amp;cb=jp"</span><span class="token punctuation">;</span>        <span class="token comment">// 插入到页面</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 回调函数</span>    <span class="token keyword">function</span> <span class="token function">jp</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 这边要移除script 标签</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 后续操作</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span> <span class="token function">cb</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="san-cors">三、CORS</span><a href="#san-cors" class="header-anchor">#</a></h1><p>Cross-Origin Resource Sharing，CORS，<strong>跨域资源共享</strong>是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 GET 和 POST 请求。是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 服务端</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 设置白名单</span>    <span class="token keyword">const</span> arrOrigin <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"http://xxxxx"</span><span class="token punctuation">,</span>        <span class="token string">"xxxx"</span>    <span class="token punctuation">]</span>    <span class="token comment">// 如果访问的URL在白名单中</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arrOrigin<span class="token punctuation">.</span><span class="token function">oncludes</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>header<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 允许跨域</span>        res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>header<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 允许携带内容</span>        res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"content-type"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="si-fu-wu-qi-dai-li">四、服务器代理</span><a href="#si-fu-wu-qi-dai-li" class="header-anchor">#</a></h1><p>服务器和服务器之间没有同源策略限制，所以可以通过代理的方式进行跨域。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客框架</title>
      <link href="/09/Hexo/"/>
      <url>/09/Hexo/</url>
      
        <content type="html"><![CDATA[<h1><span id="hexo">Hexo</span><a href="#hexo" class="header-anchor">#</a></h1><p>[TOC]</p><h1><span id="yi-kai-shi">一、开始</span><a href="#yi-kai-shi" class="header-anchor">#</a></h1><h2><span id="p1-an-zhuang">1、安装</span><a href="#p1-an-zhuang" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-xin-jian-bo-ke">2、新建博客</span><a href="#p2-xin-jian-bo-ke" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init 博客名称cd 博客名称npm i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p3-chang-yong-ming-ling">3、常用命令</span><a href="#p3-chang-yong-ming-ling" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 启动博客（本地服务器）# 打开 localhost:4000 查看hexo s# 清除缓存hexo clean# 构建hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-bo-ke-pei-zhi">4、博客配置</span><a href="#p4-bo-ke-pei-zhi" class="header-anchor">#</a></h2><p>博客根目录下的 <code>_config</code> 为 <strong>博客配置文件</strong></p><p>主题目录下的 <code>_config</code> 为 <strong>主题配置文件</strong></p><h2><span id="p5-zhu-ti-pei-zhi">5、主题配置</span><a href="#p5-zhu-ti-pei-zhi" class="header-anchor">#</a></h2><p><a href="https://hexo.io/themes/">主题库</a></p><p>这边推荐 NEXT 主题。</p><h3><span id="pan-zhuang-next-zhu-ti">安装NEXT主题</span><a href="#pan-zhuang-next-zhu-ti" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;nextcd themes&#x2F;nextnpm i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改 博客根目录下 <code>_config</code>  文件 里面的主题为 <code>next</code></p><h2><span id="p6-github-page-gitee-page">6、Github Page / Gitee Page</span><a href="#p6-github-page-gitee-page" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># _config.yml# git 配置deploy:  type: git  repo: https&#x2F;&#x2F; .... .git  branch: master  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推上去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="er-xie-zuo">二、写作</span><a href="#er-xie-zuo" class="header-anchor">#</a></h1><h2><span id="p1-yaml-front-matter">1、YAML Front Matter</span><a href="#p1-yaml-front-matter" class="header-anchor">#</a></h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">---title: 这是标题## 这是创建时间、更新时间date: 2020-10-01updated: 2020-12-21## 这是标签tags: 标签tags: [标签一, 标签二]---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-cha-jian">三、插件</span><a href="#san-cha-jian" class="header-anchor">#</a></h1><p><a href="https://hexo.io/plugins/">插件库</a></p><h2><span id="pmu-lu-sheng-cheng">目录生成</span><a href="#pmu-lu-sheng-cheng" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-toc --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># _config.ymltoc:  # 目录深度，最多生成三级目录  maxDepth: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="psou-suo">搜索</span><a href="#psou-suo" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="pdai-ma-gao-liang">代码高亮</span><a href="#pdai-ma-gao-liang" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;     #主题选项  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可用的主题有</p><blockquote><p>coy,dark,funky,okaidia,solarizedlight,tomorrow,twilight,a11y-dark,atom-dark,base16-ateliersulphurpool.light,cb,darcula,dracula,duotone-dark,duotone-earth,duotone-forest,duotone-light,duotone-sea,duotone-space,ghcolors,hopscotch,material-dark,material-light,material-oceanic,pojoaque,shades-of-purple,synthwave84,vs,xonokai,default,</p></blockquote><h2><span id="pping-lun">评论</span><a href="#pping-lun" class="header-anchor">#</a></h2><h2><span id="pyuan-cheng-bian-ji">远程编辑</span><a href="#pyuan-cheng-bian-ji" class="header-anchor">#</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地化存储</title>
      <link href="/03/11-%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%AD%98%E5%82%A8/"/>
      <url>/03/11-%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-cookie">一、cookie</a><ul><li><a href="#1-liu-cheng">1、流程</a></li><li><a href="#2-fu-wu-qi-chu-li-cookie">2、服务器处理cookie</a></li><li><a href="#3-ke-hu-duan-chu-li-cookie">3、客户端处理cookie</a></li><li><a href="#4-que-dian">4、缺点</a></li><li><a href="#5-jiang-cookie-jie-xi-cheng-dui-xiang">5、将cookie解析成对象 △</a></li></ul></li><li><a href="#er-session">二、session</a><ul><li><a href="#1-te-dian">1、特点</a></li><li><a href="#2-liu-cheng">2、流程</a></li><li><a href="#3-shi-li">3、示例</a></li></ul></li><li><a href="#san-webstorage">三、WebStorage</a><ul><li><a href="#1-localstorage">1、localStorage</a></li><li><a href="#2-sessionstorage">2、sessionStorage</a></li></ul></li><li><a href="#si-qi-ta-cun-chu-ji-zhu">四、其他存储技术</a><ul><li><a href="#1-indexdb">1、indexDB</a></li><li><a href="#2-websql">2、webSQL</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-cookie">一、cookie</span><a href="#yi-cookie" class="header-anchor">#</a></h1><p>由于HTTP协议是无状态的，而很多服务器业务是必须要用状态。Cookie诞生的最初目的是为了存储网页中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。</p><h2><span id="p1-liu-cheng">1、流程</span><a href="#p1-liu-cheng" class="header-anchor">#</a></h2><ul><li>服务器向客户端发送cookie</li><li>浏览器保存cookie</li><li>之后每次http请求浏览器都会将cookie发送给服务器端</li></ul><h2><span id="p2-fu-wu-qi-chu-li-cookie">2、服务器处理cookie</span><a href="#p2-fu-wu-qi-chu-li-cookie" class="header-anchor">#</a></h2><p>服务器端像客户端发送Cookie是通过HTTP响应报文实现的。</p><p>cookie 是一个<strong>键值对</strong>的存储结构。</p><ul><li><code>expires</code> 设置失效时间</li><li><code>max-age</code> 有效时间，单位是秒（推荐）</li><li><code>httpOnly</code> 仅服务器可修改和可见</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"user=jack;max-age=3600;httpOnly=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token comment">// 删除</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> <span class="token string">"user=;max-age=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不设置时间，则代表是临时会话存储，浏览器关闭后就会消失。</p><h2><span id="p3-ke-hu-duan-chu-li-cookie">3、客户端处理cookie</span><a href="#p3-ke-hu-duan-chu-li-cookie" class="header-anchor">#</a></h2><p>客户端获取 <code>document.cookie</code></p><p>客户端设置 <code>document.cookie = 'name=rose;max-age=3600'</code></p><h2><span id="p4-que-dian">4、缺点</span><a href="#p4-que-dian" class="header-anchor">#</a></h2><ul><li>数量和长度有限制。</li><li>潜在的安全风险：可能被截取篡改，如果被拦截，就可能会被获取所有的会话信息。</li><li>有的用户禁用了浏览器或者客户端设备接受cookie的能力，因此限制了这一功能。</li><li>每次都会随着服务器端发送，具有一定的带宽压力。</li></ul><h2><span id="p5-jiang-cookie-jie-xi-cheng-dui-xiang">5、将cookie解析成对象 △</span><a href="#p5-jiang-cookie-jie-xi-cheng-dui-xiang" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 将cookie解析成对象</span><span class="token comment">// ['user=jack', 'name=rose'] --> &#123;user: 'jack', name: 'rose'&#125;</span><span class="token keyword">const</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     p<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>     <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="er-session">二、session</span><a href="#er-session" class="header-anchor">#</a></h1><p><strong>session</strong> 是存储于服务器的对象，是另一种记录客户状态的机制，cookie保存在客户端，session保存在服务器。session运行在服务器，客户端第一次访问服务器时，就可以将客户的登录信息保存。当客户访问其他界面时，可以判断客户的登录状态，做出提示，相当于登录拦截。</p><h2><span id="p1-te-dian">1、特点</span><a href="#p1-te-dian" class="header-anchor">#</a></h2><ul><li>存储于服务器上</li><li>大小和数量理论上没有限制</li><li>传输流量小（只有一个cookie）</li><li>安全性较高</li></ul><h2><span id="p2-liu-cheng">2、流程</span><a href="#p2-liu-cheng" class="header-anchor">#</a></h2><ul><li>客户端：发起登录请求，在请求报文体或者URL中携带登录信息</li><li>服务器：接受请求，创建一个session对象，将用户信息保存在session对象中，并创建一个session-id（唯一的）</li><li>服务器：返回响应，cookie携带session-id</li><li>客户端：接受session-id，保存在本地</li><li>客户端：当发起第二次请求的时候，会携带具有session-id的cookie</li><li>服务器：通过解析cookie，得到session-id，去session对象中查找当前id是否存在，从而识别用户是不是第一次访问，如果识别用户成功，直接响应通过，否则需要再次查询数据库等操作</li></ul><h2><span id="p3-shi-li">3、示例</span><a href="#p3-shi-li" class="header-anchor">#</a></h2><p>客户端</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:3000/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 0.12345-->'0.12345'-->"12345"</span>    <span class="token keyword">const</span> Random <span class="token operator">=</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到一个随机数字</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把当前的时间戳和随机数累加</span><span class="token punctuation">&#125;</span><span class="token comment">// console.log(createSessionId())</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//忽略小图标的请求</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/favicon.ico'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">//获取请求的地址信息 通过req.url</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断如果是登录 /login请求的话，我们要把携带的用户信息保存在session对象中</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取查询字符串 user=lily&amp;pass=123</span>        <span class="token comment">//["/login","user=lily&amp;pass=123"] ["user=lily","pass=123"]</span>        <span class="token keyword">const</span> userMessage <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">//获取到了用户信息，并处理为对象</span>        <span class="token comment">// console.log(userMessage);</span>        <span class="token comment">//获取到sessionid，并把sessionid：userMessage 装到session对象中</span>        <span class="token keyword">const</span> unqueID <span class="token operator">=</span> <span class="token function">createSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">[</span>unqueID<span class="token punctuation">]</span> <span class="token operator">=</span> userMessage<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span>        <span class="token comment">//把当前保存用户信息的sessionid 作为cookie值响应给用户</span>        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">session_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>unqueID<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;max-age=3600;httpOnly=true</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/user'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> userCookie <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>        <span class="token keyword">const</span> cookieResult <span class="token operator">=</span> userCookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["username","lily"]</span>            p<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cookieResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123; session_id: '58mg4bfjmfq' &#125;</span>        <span class="token keyword">const</span> SessionID <span class="token operator">=</span> cookieResult<span class="token punctuation">[</span><span class="token string">"session_id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">[</span>SessionID<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"text/plain;charset=utf-8"</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"text/plain;charset=utf-8"</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"请重新登录"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请访问 http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-webstorage">三、WebStorage</span><a href="#san-webstorage" class="header-anchor">#</a></h1><p><strong>WebStorage</strong> 是HTML5新特性，这个特性主要用来作为本地储存来使用的，解决了cookie存储空间不足的问题。</p><h2><span id="p1-localstorage">1、localStorage</span><a href="#p1-localstorage" class="header-anchor">#</a></h2><p>即永久存储。</p><p>（1）方法</p><p>存储数据 <code>localStorage.setItem(key, value)</code></p><p>读取数据 <code>localStorage.getItem(key)</code></p><p>删除数据 <code>localStorage.remove(key)</code></p><p>清空数据 <code>localStorage.clear()</code></p><p>（2）事件</p><p>storage事件：用来跨页面通信</p><p>当别的页面存储东西发生变化时触发的事件</p><p>只能由localStorage触发</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// storage事件：同源事件，当同源的其他页面的localStorage被改动，则当前页面的storage就是被触发</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onstorage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//同源事件的事件对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被改变的localStorage的key</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//旧值</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-sessionstorage">2、sessionStorage</span><a href="#p2-sessionstorage" class="header-anchor">#</a></h2><p>即临时会话存储。</p><p>方法同<code>localStorage</code> ，把前面改成<code>sessionStorage</code> 即可。</p><h1><span id="si-qi-ta-cun-chu-ji-zhu">四、其他存储技术</span><a href="#si-qi-ta-cun-chu-ji-zhu" class="header-anchor">#</a></h1><h2><span id="p1-indexdb">1、indexDB</span><a href="#p1-indexdb" class="header-anchor">#</a></h2><h2><span id="p2-websql">2、webSQL</span><a href="#p2-websql" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS 核心模块</title>
      <link href="/03/05-NodeJS%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/"/>
      <url>/03/05-NodeJS%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-buffer">一、Buffer</a></li><li><a href="#er-process">二、process</a></li><li><a href="#san-path">三、path</a><ul><li><a href="#1-resolve">1、resolve</a></li><li><a href="#2-huo-qu-dang-qian-wen-jian-jia">2、获取当前文件夹</a></li></ul></li><li><a href="#si-nodejs-wen-jian-xi-tong">四、NodeJS 文件系统 △</a><ul><li><a href="#1-wen-jian-de-du-qu">1、文件的读取</a><ul><li><a href="#1-jian-dan-du-qu-wen-jian">（1）简单读取文件</a></li><li><a href="#2-shi-yong-promisify-jie-jue-yi-bu-wen-ti">（2）使用 promisify 解决异步问题</a></li><li><a href="#3-liu-shi-du-qu-wen-jian">（3）流式读取文件</a></li></ul></li><li><a href="#2-wen-jian-de-xie-ru">2、文件的写入</a><ul><li><a href="#1-tong-bu-xie">（1）同步写</a></li><li><a href="#2-yi-bu-xie">（2）异步写</a></li></ul></li><li><a href="#3-liu-shi-wen-jian-cao-zuo">3、流式文件操作</a></li></ul></li><li><a href="#wu-events">五、events</a></li></ul><!-- tocstop --></div><h1><span id="yi-buffer">一、Buffer</span><a href="#yi-buffer" class="header-anchor">#</a></h1><p>缓冲器，二进制数据，性能较好。</p><p>不需要引用直接使用。</p><p>1 byte = 8 bit</p><p>一个字母或者数组 1字节</p><p>一个汉字或者全角 3字节</p><h1><span id="er-process">二、process</span><a href="#er-process" class="header-anchor">#</a></h1><p>进程模块，无需<code>require</code>。</p><p><code>.MODE_ENV</code> 设置是开发环境还是生产环境</p><p><code>cwd()</code> 返回当前进程的绝对路径</p><p><code>exit()</code></p><h1><span id="san-path">三、path</span><a href="#san-path" class="header-anchor">#</a></h1><p><code>path</code> 是专门用于处理文件路径、目录的核心模块。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p1-resolve">1、resolve</span><a href="#p1-resolve" class="header-anchor">#</a></h2><p><code>resolve</code> 方法将目录或者路径片段的序列解析成绝对路径。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-huo-qu-dang-qian-wen-jian-jia">2、获取当前文件夹</span><a href="#p2-huo-qu-dang-qian-wen-jian-jia" class="header-anchor">#</a></h2><p><code>--dirname</code> 表示当前目录。</p><p>开发中常用 <code>path.resolve(__dirname, &quot;xxxx&quot;)</code></p><h1><span id="si-nodejs-wen-jian-xi-tong">四、NodeJS 文件系统 △</span><a href="#si-nodejs-wen-jian-xi-tong" class="header-anchor">#</a></h1><p><code>fs</code> 就是 <code>file system</code> 是 NodeJS 核心的文件系统。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该模块大部分方法提供了两个版本的方法，同步和异步。</p><ul><li><p>同步方法 带<code>sync</code>的方法</p><p>同步方法会阻塞程序的执行</p><p>同步方法通过返回值返回结果</p></li><li><p>异步方法 不带sync的方法</p><p>异步方法不会阻塞程序的执行</p><p>异步方法都是通过回调函数来返回结果的</p></li></ul><h2><span id="p1-wen-jian-de-du-qu">1、文件的读取</span><a href="#p1-wen-jian-de-du-qu" class="header-anchor">#</a></h2><h3><span id="p-1-jian-dan-du-qu-wen-jian">（1）简单读取文件</span><a href="#p-1-jian-dan-du-qu-wen-jian" class="header-anchor">#</a></h3><p><code>fs.readFileSync(path[, options])</code><br><code>fs.readFile(path[, options], callback)</code></p><ul><li><p>path 读取文件的路径</p></li><li><p>options  配置对象  默认如下：  <code>&#123;encoding:&quot;utf8&quot;,flag:&quot;w&quot;,mode:0666&#125;</code></p></li><li><p>callback 回调函数，通过回调函数返回读取到的数据</p><p>err 错误对象</p><p>data 返回的数据（Buffer）</p></li></ul><h3><span id="p-2-shi-yong-promisify-jie-jue-yi-bu-wen-ti">（2）使用 promisify 解决异步问题</span><a href="#p-2-shi-yong-promisify-jie-jue-yi-bu-wen-ti" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//案例1</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>promisify<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./conf.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//案例2</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> promisify <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./index.html'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p-3-liu-shi-du-qu-wen-jian">（3）流式读取文件</span><a href="#p-3-liu-shi-du-qu-wen-jian" class="header-anchor">#</a></h3><p>适用于较大的文件。</p><h2><span id="p2-wen-jian-de-xie-ru">2、文件的写入</span><a href="#p2-wen-jian-de-xie-ru" class="header-anchor">#</a></h2><h3><span id="p-1-tong-bu-xie">（1）同步写</span><a href="#p-1-tong-bu-xie" class="header-anchor">#</a></h3><p>打开，写入，==关闭==。</p><p><code>fs.openSync(path[, flags, mode])</code></p><ul><li><p><code>path</code> 文件路径</p></li><li><p><code>flag</code> 文件系统标志<br><code>a</code> 追加，如果不存在就创建<br><code>w</code> 用于写，如果不存在就创建，存在覆盖<br><code>r</code> 用于读，如果不存在就异常（默认）</p></li><li><p><code>mode</code> 设置下一次打开文件时候的权限。<br><code>0o666</code> <code>110110110</code> 可读可写<br><code>0o111</code> <code>001001001</code> 可执行<br><code>0o222</code> <code>010010010</code> 可写<br><code>0o333</code> <code>100100100</code> 可读</p></li><li><p>返回文件描述符</p></li></ul><p><code>fs.writeSync(fd, buffer[, offset, length, position, encoding])</code></p><ul><li><code>fd</code> 文件描述符</li><li><code>buffer</code> 要写入的内容</li><li><code>offset</code></li><li><code>length</code></li><li><code>position</code></li><li><code>encoding</code> 写人文件的编码，默认<code>utf-8</code></li></ul><p><code>fs.closeSync(fd)</code></p><h3><span id="p-2-yi-bu-xie">（2）异步写</span><a href="#p-2-yi-bu-xie" class="header-anchor">#</a></h3><p><code>fs.open( path, flags[, ], (err, data)=&gt;&#123;&#125;)</code></p><ul><li>回调函数<code>err</code>在前是因为NodeJS是==错误优先处理机制==。如果有错误返回错误对象，否则返回<code>null</code>。<code>data</code> 就是文件描述符。</li><li>异步得到结果在回调函数中。</li></ul><p><code>fs.write(fd, string, call, (err, data)=&gt;&#123;&#125;)</code></p><p><code>fs.close(fd)</code></p><p>无论写入成功或者失败都要关闭文件。</p><h2><span id="p3-liu-shi-wen-jian-cao-zuo">3、流式文件操作</span><a href="#p3-liu-shi-wen-jian-cao-zuo" class="header-anchor">#</a></h2><ul><li>fs模块处理文件的缺点：将文件的数据全读到内存中，在把数据写到文件内，会大量占用内存</li><li>流（stream）是 Node.js 中处理流式数据的抽象接口，是一组有序的，有起点和终点的字节数据传输手段。可以实现将数据从一个地方流动到另一个地方，其边读取边写入的特点有别于fs模块的文件处理，并且可以做到控制读取文件和写入文件的速度，从而减少内存的占用</li><li>流是基于事件的，所有的流对象都用 on(once)绑定事件，并触发</li><li>流式文件写入适用于一些比较大的文件，可以分多次向文件中写入内容，有效避免内存溢出的问题。</li></ul><pre class="line-numbers language-none"><code class="language-none">fs.createWriteStream(path[, options])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> inputFilePath <span class="token operator">=</span> <span class="token string">'//Users//lipeihua//Desktop//nodeJS//08.简单文件写入.mp4'</span><span class="token punctuation">;</span><span class="token keyword">const</span> outputFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'d.mp4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建可读流 会自动关闭</span><span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>inputFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建可写流 不会自动关闭，需要手动关闭</span><span class="token keyword">const</span> ws <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>outputFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* rs.on('data', (chunk) => &#123;  // 当数据读取出来，要写入成另外一个文件  ws.write(chunk);&#125;).once('end', () => &#123;  // 可读流全部读取完毕了，关闭可写流  ws.end();&#125;) */</span><span class="token comment">// pipe会持续性消费可读流数据</span><span class="token comment">// 将可读流数据写入到可写流中</span><span class="token comment">// 会自动关闭可写流</span>rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="wu-events">五、events</span><a href="#wu-events" class="header-anchor">#</a></h1><p>事件触发器。</p><p><code>once()</code> 函数可注册最多只监听一次的函数。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 正则表达式</title>
      <link href="/03/15-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/03/15-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>正则表达式</strong>（regexp） 是搜索和替换字符串一种强大的方法。在 JS 中，正则表达式通过内置的 RegExp 类的对象来实现，并和字符串集成。</p><h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-ji-ben-yu-fa">一、基本语法</a><ul><li><a href="#1-chuang-jian">1、创建</a></li><li><a href="#2-xiu-shi-fu">2、修饰符</a></li><li><a href="#3-zi-fu-lei">3、字符类</a></li><li><a href="#4-mao-dian">4、锚点</a></li><li><a href="#5-unicode">5、Unicode</a></li><li><a href="#6-duo-xing-mo-shi">6、多行模式</a></li><li><a href="#7-zheng-ze-he-zi-fu-chuan-fang-fa">7、正则和字符串方法</a></li></ul></li><li><a href="#er-kuo-zhan-yu-fa">二、扩展语法</a><ul><li><a href="#1-ci-bian-jie">1、词边界</a></li><li><a href="#2-zhuan-yi-te-shu-zi-fu">2、转义、特殊字符</a></li><li><a href="#3-ji-he-he-fan-wei">3、集合和范围</a></li><li><a href="#4-liang-ci">4、量词</a></li><li><a href="#5-bu-huo-zu">5、捕获组</a></li><li><a href="#6-mo-shi-zhong-de-fan-xiang-yin-yong">6、模式中的反向引用</a></li><li><a href="#7-xuan-ze-or">7、选择（OR）</a></li><li><a href="#8-qian-zhan-duan-yan-yu-hou-zhan-duan-yan">8、前瞻断言与后瞻断言</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-ji-ben-yu-fa">一、基本语法</span><a href="#yi-ji-ben-yu-fa" class="header-anchor">#</a></h1><p>正则表达式包含 <strong>模式</strong> 和可选的 <strong>修饰符</strong>。</p><h2><span id="p1-chuang-jian">1、创建</span><a href="#p1-chuang-jian" class="header-anchor">#</a></h2><p>创建一个正则表达式有两种语法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 允许从字符串动态构造模式</span>reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"pattern"</span><span class="token punctuation">,</span> <span class="token string">"flags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 常用</span>reg2 <span class="token operator">=</span> <span class="token regex">/pattern/</span><span class="token punctuation">;</span>reg3 <span class="token operator">=</span> <span class="token regex">/pattern/gmi</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要在字符串中搜索，可以使用 <code>search()</code> 。这个方法返回匹配项的索引位置，如果没找到返回<code>-1</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例子</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"I love you!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/love/</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-xiu-shi-fu">2、修饰符</span><a href="#p2-xiu-shi-fu" class="header-anchor">#</a></h2><p>正则表达式的修饰符影响搜索结果，在 JS 中有五个修饰符：</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>搜索不区分大小写</td></tr><tr><td>g</td><td>搜索会查找所有的匹配项，而不是第一个</td></tr><tr><td>m</td><td>多行模式</td></tr><tr><td>u</td><td>开启完整的unicode支持</td></tr><tr><td>y</td><td>粘滞模式</td></tr></tbody></table><p>搜索默认是区分大小写的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"I love you!"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/LOVE/</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/LOVE/i</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-zi-fu-lei">3、字符类</span><a href="#p3-zi-fu-lei" class="header-anchor">#</a></h2><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配所有字符（除换行符外）</td></tr><tr><td><code>\d</code></td><td>任何一个数字（digit）</td></tr><tr><td><code>\D</code></td><td>非数字</td></tr><tr><td><code>\s</code></td><td>空格（制表符，换行符）</td></tr><tr><td><code>\S</code></td><td>非空格</td></tr><tr><td><code>\w</code></td><td>拉丁字母或者数字或者下划线。</td></tr><tr><td><code>\W</code></td><td>非单字</td></tr></tbody></table><h2><span id="p4-mao-dian">4、锚点</span><a href="#p4-mao-dian" class="header-anchor">#</a></h2><p>插入符 <code>^</code> 匹配文本开头，而美元符 <code>$</code> 则匹配文本末尾。它们被称为<strong>锚点</strong>。</p><h2><span id="p5-unicode">5、Unicode</span><a href="#p5-unicode" class="header-anchor">#</a></h2><p>JavaScript 使用 <strong>Unicode 编码</strong>（Unicode encoding）对字符串进行编码。大多数字符使用 2 个字节编码，但这种方式只能编码最多 65536 个字符。</p><p>这个范围不足以对所有可能的字符进行编码，这就是为什么一些罕见的字符使用 4 个字节进行编码，比如 <code>𝒳</code> （数学符号 X）或者 <code>😄</code> （笑脸），一些象形文字等等。</p><p><a href="https://zh.javascript.info/regexp-unicode">Unicode：修饰符 “u” 和 class \p{…}</a></p><h2><span id="p6-duo-xing-mo-shi">6、多行模式</span><a href="#p6-duo-xing-mo-shi" class="header-anchor">#</a></h2><p><a href="https://zh.javascript.info/regexp-multiline-mode">Flag “m” — 多行模式</a></p><h2><span id="p7-zheng-ze-he-zi-fu-chuan-fang-fa">7、正则和字符串方法</span><a href="#p7-zheng-ze-he-zi-fu-chuan-fang-fa" class="header-anchor">#</a></h2><p><a href="https://zh.javascript.info/regexp-methods">正则表达式（RegExp）和字符串（String）的方法</a></p><h1><span id="er-kuo-zhan-yu-fa">二、扩展语法</span><a href="#er-kuo-zhan-yu-fa" class="header-anchor">#</a></h1><h2><span id="p1-ci-bian-jie">1、词边界</span><a href="#p1-ci-bian-jie" class="header-anchor">#</a></h2><h2><span id="p2-zhuan-yi-te-shu-zi-fu">2、转义、特殊字符</span><a href="#p2-zhuan-yi-te-shu-zi-fu" class="header-anchor">#</a></h2><h2><span id="p3-ji-he-he-fan-wei">3、集合和范围</span><a href="#p3-ji-he-he-fan-wei" class="header-anchor">#</a></h2><h2><span id="p4-liang-ci">4、量词</span><a href="#p4-liang-ci" class="header-anchor">#</a></h2><h2><span id="p5-bu-huo-zu">5、捕获组</span><a href="#p5-bu-huo-zu" class="header-anchor">#</a></h2><h2><span id="p6-mo-shi-zhong-de-fan-xiang-yin-yong">6、模式中的反向引用</span><a href="#p6-mo-shi-zhong-de-fan-xiang-yin-yong" class="header-anchor">#</a></h2><h2><span id="p7-xuan-ze-or">7、选择（OR）</span><a href="#p7-xuan-ze-or" class="header-anchor">#</a></h2><h2><span id="p8-qian-zhan-duan-yan-yu-hou-zhan-duan-yan">8、前瞻断言与后瞻断言</span><a href="#p8-qian-zhan-duan-yan-yu-hou-zhan-duan-yan" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 异步</title>
      <link href="/03/01-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/03/01-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>JS 异步编程解决方案。</p><h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-gai-nian">一、概念</a><ul><li><a href="#1-bing-fa-bing-xing">1、并发、并行</a></li><li><a href="#2-hui-diao-han-shu">2、回调函数</a></li></ul></li><li><a href="#er-promise">二、Promise △</a><ul><li><a href="#1-zhuang-tai">1、状态</a></li><li><a href="#2-ji-ben-shi-yong">2、基本使用</a></li><li><a href="#3-promise-lian">3、Promise 链</a></li><li><a href="#4-promise-fang-fa">4、Promise 方法</a></li><li><a href="#5-si-kao">5、思考</a></li><li><a href="#6-shou-xie-promise">6、手写 Promise △△</a></li></ul></li><li><a href="#san-generstor">三、Generstor</a></li><li><a href="#si-async">四、async △</a><ul><li><a href="#1-async-han-shu">1、async 函数</a></li><li><a href="#2-await-biao-da-shi">2、await 表达式</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-gai-nian">一、概念</span><a href="#yi-gai-nian" class="header-anchor">#</a></h1><h2><span id="p1-bing-fa-bing-xing">1、并发、并行</span><a href="#p1-bing-fa-bing-xing" class="header-anchor">#</a></h2><blockquote><p>涉及面试题：并发与并行的区别？</p></blockquote><p><strong>并发</strong>（Concurrency）是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。</p><p><strong>并行</strong>（Parallelism）是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。</p><h2><span id="p2-hui-diao-han-shu">2、回调函数</span><a href="#p2-hui-diao-han-shu" class="header-anchor">#</a></h2><blockquote><p>涉及面试题：什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？</p></blockquote><p><strong>回调函数</strong>（Callback）分为同步回调（数组遍历）和异步回调。</p><p>使用回调函数容易导致<a href>回调地狱</a>问题。回调地狱的根本问题就是：</p><ol><li>嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身</li><li>嵌套函数一多，就很难处理错误。</li></ol><p>当然，回调函数还存在着别的几个缺点，比如不能使用 <code>try catch</code> 捕获错误，不能直接 <code>return</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出 3 3 3</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出 0 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="er-promise">二、Promise △</span><a href="#er-promise" class="header-anchor">#</a></h1><p>ES6 新规范，进行异步编程的新解决方案。<strong>以同步的形式把异步代码表达出来，避免回调函数层层嵌套的<a href>回调地狱</a>。</strong></p><h2><span id="p1-zhuang-tai">1、状态</span><a href="#p1-zhuang-tai" class="header-anchor">#</a></h2><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>pedding</code></td><td>初始化状态</td></tr><tr><td><code>fulfilled</code></td><td>成功状态，完成状态</td></tr><tr><td><code>reject</code></td><td>失败状态</td></tr></tbody></table><p><strong>状态只能被改变一次。</strong></p><h2><span id="p2-ji-ben-shi-yong">2、基本使用</span><a href="#p2-ji-ben-shi-yong" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// excutor 函数（同步的）</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// reject(2);</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 写法一</span><span class="token comment">// reslove</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// reject</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// reject</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 写法二</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-promise-lian">3、Promise 链</span><a href="#p3-promise-lian" class="header-anchor">#</a></h2><p><code>Promise</code> 实现了<strong>链式调用</strong>，也就是说每次调用 <code>then</code> 之后返回的都是一个 <code>Promise</code>，并且是一个全新的 <code>Promise</code>，原因也是因为状态不可变。如果你在 <code>then</code> 中 使用了 <code>return</code>，那么 <code>return</code> 的值会被 <code>Promise.resolve()</code> 包装。</p><h2><span id="p4-promise-fang-fa">4、Promise 方法</span><a href="#p4-promise-fang-fa" class="header-anchor">#</a></h2><p>（1）<code>Promise.prototype.then</code></p><p>返回一个<code>Promise</code> 对象。</p><p>（2）<code>Promise.prototype.catch</code></p><p>返回一个<code>Promise</code> 对象。</p><p>（3）<code>Promise.resolve</code></p><p>返回的<code>Promise</code>对象状态为<code>fulfilled</code>。</p><p>（4）<code>Promise.reject</code></p><p>返回一个状态为<strong>失败</strong>的<code>Promise</code>对象，并将给定的失败信息传递给对应的处理方法。</p><p>（5）<code>Promise.all</code></p><ul><li>接收一个数组，数组的每一个元素都的 <code>Promise</code></li><li>返回的是一个 <code>Promise</code></li><li>数组中所有成功，则返回成功，如果有一个失败，则返回失败状态</li></ul><p>这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。</p><p>（6）<code>Promise.race</code></p><p>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</p><p>（7）<code>Promise.any</code></p><p>接收一个Promise对象的集合，当其中的一个promise 成功，就返回那个成功的promise的值。</p><p>（8）<code>Promise.allSettled</code></p><p>等到所有promises都完成（每个promise返回成功或失败）。<br>返回一个promise，该promise在所有promise完成后完成。并带有一个对象数组，每个对象对应每个promise的结果。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 封装 ajax</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// ....</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">result</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// .....</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p5-si-kao">5、思考</span><a href="#p5-si-kao" class="header-anchor">#</a></h2><p>（1）如何改变 Promise 的状态</p><ul><li><code>resolve()</code></li><li><code>reject()</code></li><li>抛出异常</li></ul><p>（2）一个 <code>Promise</code> 指定多个成功、失败回调函数，都会调用吗？</p><ul><li>当Promise改变为对应的状态时都会调用。</li></ul><p>（3）先更改状态还是先执行回调？</p><h2><span id="p6-shou-xie-promise">6、手写 Promise △△</span><a href="#p6-shou-xie-promise" class="header-anchor">#</a></h2><p>（1）简单版</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">exec</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>resolveedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">resolved</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">RESOLVED</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        that<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=></span><span class="token function">v</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        that<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=></span><span class="token function">v</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token function">exec</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">rejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    onResolved <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function-variable function">onResolved</span><span class="token operator">:</span> <span class="token parameter">v</span><span class="token operator">=></span>v<span class="token punctuation">;</span>    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span><span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token operator">:</span>            that<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">RESOLVED</span><span class="token operator">:</span>            <span class="token function">onResolved</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">REJECTED</span><span class="token operator">:</span>            <span class="token function">onRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）教学版</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> _PENDING <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span><span class="token keyword">const</span> _RESOLVED <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span><span class="token keyword">const</span> _REJECTED <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> _PENDING<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>CallBackList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">_resolved</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//   1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> _PENDING<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> _RESOLVED<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment">//   2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>CallBackList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>CallBackList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    v<span class="token punctuation">.</span><span class="token function">onResolved</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">_rejected</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> _PENDING<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> _REJECTED<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> reason<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>CallBackList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>CallBackList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    v<span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//                  3</span>        <span class="token function">executor</span><span class="token punctuation">(</span><span class="token function">_resolved</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_rejected</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">_rejected</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//     4</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//   5</span>        onResolved <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function-variable function">onResolved</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=></span> value<span class="token punctuation">;</span>        onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> error        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token keyword">function</span> <span class="token function">_callback</span><span class="token punctuation">(</span><span class="token parameter">on</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//   6</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 7</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> _RESOLVED<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">_callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> _REJECTED<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token function">_callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//  8</span>            <span class="token keyword">case</span> _PENDING<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                CallBackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">_callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">_callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.jianshu.com/p/5cec4c00aa3e">参考链接</a></p><p>（3）符合 Promise/A+ 规范</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">RESOLVED</span> <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token parameter">exec</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>resolveedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    that<span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">resolved</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>that<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">RESOLVED</span><span class="token punctuation">;</span>         that<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>         that<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=></span><span class="token function">v</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">rejected</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>that<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>         that<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=></span><span class="token function">v</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token function">exec</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> rejected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">rejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// --- 以下未更新 ----</span><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    onResolved <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function-variable function">onResolved</span><span class="token operator">:</span> <span class="token parameter">v</span><span class="token operator">=></span>v<span class="token punctuation">;</span>    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span><span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token constant">PENDING</span><span class="token operator">:</span>            that<span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">RESOLVED</span><span class="token operator">:</span>            <span class="token function">onResolved</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">REJECTED</span><span class="token operator">:</span>            <span class="token function">onRejected</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-generstor">三、Generstor</span><a href="#san-generstor" class="header-anchor">#</a></h1><p>状态机，异步生成器。</p><p>基本语法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token operator">...</span>    <span class="token keyword">yield</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span>    gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Generstor</code> 是可迭代的（<code>for.. of</code>）。</li></ul><p>例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用计时器模拟依次请求 a数据 b数据</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a数据请求成功"</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b数据请求成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 开始请求</span><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://zh.javascript.info/generators">参考链接</a></p><h1><span id="si-async">四、async △</span><a href="#si-async" class="header-anchor">#</a></h1><p><code>async</code> 是 <code>Promise</code> 和 <code>Generstor</code> 语法糖。</p><h2><span id="p1-async-han-shu">1、async 函数</span><a href="#p1-async-han-shu" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p2-await-biao-da-shi">2、await 表达式</span><a href="#p2-await-biao-da-shi" class="header-anchor">#</a></h2><p><code>await</code> 表达式必须写在 <code>async</code> 函数中。</p><p><code>await</code> 右侧的表达式一般为 Promise 对象，但也可以是其他值。</p><p>如果表达式是 Promise 对象，返回的是 Promise 成功的值。如果失败的，则会抛出异常，需要通过 <code>try... catch</code> 捕捉。</p><p>如果是其他值，则直接将此值作为 await 的返回值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例子1</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Promise &#123; 1 &#125;</span>result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 例子2</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token string">"异常"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Promise &#123; &lt;rejected> '异常' &#125;</span>result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token comment">// 异常</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 例子3</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 失败的Promise</span>result<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token comment">// error</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>await</code> 会阻塞函数的运行，需要等后边的异步代码执行完毕才会向下执行。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP</title>
      <link href="/03/06-HTTP/"/>
      <url>/03/06-HTTP/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-tcp">一、TCP</a><ul><li><a href="#1-lian-jie">1、连接</a><ul><li><a href="#1-1-san-ci-wo-shou">1.1 三次握手</a></li><li><a href="#1-2-si-ci-hui-shou">1.2 四次挥手</a></li></ul></li></ul></li><li><a href="#er-udp">二、UDP</a></li><li><a href="#san-http">三、HTTP △</a><ul><li><a href="#1-xiang-ying-de-nei-rong">1、响应的内容</a></li><li><a href="#2-bao-wen">2、报文</a><ul><li><a href="#get-qing-qiu-bao-wen">GET 请求报文</a></li><li><a href="#get-xiang-ying-bao-wen">GET 响应报文</a></li><li><a href="#post-qing-qiu-bao-wen">POST 请求报文</a></li><li><a href="#post-xiang-ying-bao-wen">POST 响应报文</a></li></ul></li><li><a href="#3-qing-qiu-fang-shi">3、请求方式</a></li><li><a href="#4-mime-lei-xing">4、MIME 类型</a></li><li><a href="#5-xiang-ying-zhuang-tai-ma">5、响应状态码 △</a></li><li><a href="#6-wang-luo-mo-xing">6、网络模型</a></li><li><a href="#7-cong-shu-ru-url-dao-wang-ye-zui-zhong-xuan-ran">7、从输入URL到网页最终渲染 △</a></li></ul></li><li><a href="#si-http-tls-https">四、HTTP + TLS = HTTPS</a><ul><li><a href="#1-liang-chong-jia-mi-fang-shi">1、两种加密方式</a></li><li><a href="#2-tls-wo-shou">2、TLS 握手</a></li></ul></li><li><a href="#wu-websocket">五、WebSocket</a><ul><li><a href="#1-gai-nian">1、概念</a></li><li><a href="#2-ji-ben-shi-yong">2、基本使用</a></li><li><a href="#3-xin-tiao">3、心跳</a></li><li><a href="#4-socket-io">4、Socket.io</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-tcp">一、TCP</span><a href="#yi-tcp" class="header-anchor">#</a></h1><p><strong>TCP</strong>，Transmission Control Protool，传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC-793定义。</p><p>TCP是一种面向广域网的通信协议，目的是在跨越多个网络通信时，为两个通信端点之间提供一条具有下列特点的通信方式：</p><ul><li>基于流的方式</li><li>面向连接</li><li>可靠通信方式</li><li>在网络状况不佳的时候尽量降低系统由于重传带来的带宽开销</li><li>通信连接维护是面向通信的两个端点的，而不考虑中间网段和节点</li></ul><h2><span id="p1-lian-jie">1、连接</span><a href="#p1-lian-jie" class="header-anchor">#</a></h2><h3><span id="p1-1-san-ci-wo-shou">1.1 三次握手</span><a href="#p1-1-san-ci-wo-shou" class="header-anchor">#</a></h3><p><img src="/images/2020/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.gif" alt="Alt text"></p><h3><span id="p1-2-si-ci-hui-shou">1.2 四次挥手</span><a href="#p1-2-si-ci-hui-shou" class="header-anchor">#</a></h3><p><a href="https://blog.csdn.net/sinat_36629696/article/details/80740678">待更新</a></p><h1><span id="er-udp">二、UDP</span><a href="#er-udp" class="header-anchor">#</a></h1><p>待更新。</p><h1><span id="san-http">三、HTTP △</span><a href="#san-http" class="header-anchor">#</a></h1><p><strong>HTTP</strong>，Hyper Text Transfer Protocol，超文本传输协议（通信协议规范）。</p><p>客户端和服务器端通信传输的内容称为<strong>报文</strong>。</p><p><code>请求报文 </code> <code>响应报文</code></p><p><code>request</code> 请求</p><p><code>response</code> 响应</p><h2><span id="p1-xiang-ying-de-nei-rong">1、响应的内容</span><a href="#p1-xiang-ying-de-nei-rong" class="header-anchor">#</a></h2><p><code>Headers</code> 报文的头部</p><ul><li>General 通用头部</li><li>Response Headers 响应头部</li><li>Request Headers 请求头部</li></ul><p><code>Preview</code> 预览响应的数据</p><p><code>Response</code> 响应的具体数据</p><p><code>Initiator</code> 初始化内容</p><p><code>Timing</code> 时间</p><p><code>Cookies</code> 携带的cookie</p><h2><span id="p2-bao-wen">2、报文</span><a href="#p2-bao-wen" class="header-anchor">#</a></h2><p>HTTP应用程序之间发送的<strong>数据块</strong>。在客户端、服务器、代理之间流动。分为<strong>请求报文</strong>和<strong>响应报文</strong>。</p><h3><span id="pget-qing-qiu-bao-wen">GET 请求报文</span><a href="#pget-qing-qiu-bao-wen" class="header-anchor">#</a></h3><p>请求报文首行</p><p><code>请求方式</code> <code>请求地址</code> <code>请求参数(查询字符串)</code> <code>协议版本</code></p><ul><li>请求方式 <code>GET</code></li><li>协议版本 <code>HTTP/1.1</code> 兼容性 <code>HTTP/2</code> 最新</li></ul><p>请求报文头部</p><ul><li>请求的主机地址 <code>Host</code></li><li>连接方式 <code>Connection</code> 保持长连接 <code>keep-alive</code></li><li><code>Upgrade-Insecure-Requests</code> 允许使用https访问</li><li><code>User-Agent</code> 用户代理（浏览器信息）</li><li><code>Accept</code> 可以接收的类型</li><li><code>Sec-Fetch-Size</code> <code>-Mode</code> <code>-User</code> <code>-Dest</code></li><li><code>Accept-Encoding</code> 客户端可以接受的压缩格式</li><li><code>Accept-Language</code> 可以支持的语言</li></ul><p>请求报文空行 一个回车或者空格</p><p>请求报文体</p><h3><span id="pget-xiang-ying-bao-wen">GET 响应报文</span><a href="#pget-xiang-ying-bao-wen" class="header-anchor">#</a></h3><p>响应报文首行</p><p><code>协议版本</code> <code>状态码</code></p><p>响应报文头部</p><ul><li><code>Context-Type</code> 响应数据类型</li><li><code>Date</code> 响应的时间</li><li><code>Connection</code> 连接方式</li><li><code>Content-Length</code> 响应的字节长度</li></ul><p>响应报文空行</p><p>响应报文体</p><h3><span id="ppost-qing-qiu-bao-wen">POST 请求报文</span><a href="#ppost-qing-qiu-bao-wen" class="header-anchor">#</a></h3><p>请求内容在报文体里</p><h3><span id="ppost-xiang-ying-bao-wen">POST 响应报文</span><a href="#ppost-xiang-ying-bao-wen" class="header-anchor">#</a></h3><h2><span id="p3-qing-qiu-fang-shi">3、请求方式</span><a href="#p3-qing-qiu-fang-shi" class="header-anchor">#</a></h2><p><code>GET</code> - 查</p><ul><li>从服务器读取数据</li><li>用于请求指定的页面信息，并返回实体</li></ul><p><code>POST</code> - 增</p><ul><li>向服务器端添加新数据</li><li>向指定资源提交数据，进行处理</li><li>一般用于登陆注册</li></ul><p><code>PUT</code> - 改</p><ul><li>更新服务器端数据（完整更新）</li></ul><p><code>PATCH</code> - 改</p><ul><li>更新服务器端数据（局部更新）</li></ul><p><code>DELETE</code> - 删</p><ul><li>删除服务器端数据</li></ul><p><code>OPTIONS</code></p><ul><li>跨域请求</li></ul><h2><span id="p4-mime-lei-xing">4、MIME 类型</span><a href="#p4-mime-lei-xing" class="header-anchor">#</a></h2><ul><li>text/plain 纯文本类型</li><li>text/html</li><li>text/css</li><li>application/javascript</li></ul><h2><span id="p5-xiang-ying-zhuang-tai-ma">5、响应状态码 △</span><a href="#p5-xiang-ying-zhuang-tai-ma" class="header-anchor">#</a></h2><p>1xx 信息响应</p><ul><li>100 请求继续</li><li>101 正在切换协议</li></ul><p>2xx 请求成功</p><ul><li><strong>200 请求成功</strong></li><li>204 请求成功 页面主体不发生修改 put delete 一般返回</li></ul><p>3xx 重定向</p><ul><li>301 永久重定向</li><li>302 临时重定向</li><li>304 读取缓存（协商缓存）</li></ul><p>4xx 客户端错误</p><ul><li>400 响应报文有问题需要修改</li><li>401 未授权/请求要求用户的身份认证</li><li>403 服务器拒绝访问</li><li><strong>404 服务器找不到请求的资源/服务端不想响应</strong></li></ul><p>5xx 服务端错误</p><ul><li>500 服务器执行请求发生错误</li><li>503 服务器超负荷或者停机维护中 无法请求处理</li></ul><h2><span id="p6-wang-luo-mo-xing">6、网络模型</span><a href="#p6-wang-luo-mo-xing" class="header-anchor">#</a></h2><p><img src="/images/2020/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.jpg" alt="网络模型"></p><h2><span id="p7-cong-shu-ru-url-dao-wang-ye-zui-zhong-xuan-ran">7、从输入URL到网页最终渲染 △</span><a href="#p7-cong-shu-ru-url-dao-wang-ye-zui-zhong-xuan-ran" class="header-anchor">#</a></h2><p>（1）DNS 查询</p><ul><li>输入的是域名，解析成IP地址</li><li>四个缓存（浏览器DNS缓存，计算机DNS缓存，路由器DNS缓存，网络运营商DNS缓存），一个迭代查询/递归查询</li><li>DNS 是基于UDP做的查询。</li></ul><p>（2）TCP连接（三次握手）</p><ul><li>浏览器 我准备好了</li><li>服务器 我收到了</li><li>浏览器 我收到确认信息了，准备发</li><li><strong>确认客户端、服务端双方都有正常的收发能力</strong>（为什么要三次握手呢？）</li><li>保持长连接说的就是这里。</li></ul><p>（3）发送请求 客户端发请求给服务器</p><p>（4）返回响应 服务器返回响应</p><p>（5）渲染页面</p><ul><li>构建DOM树（DOM树）</li><li>样式计算（CSSOM树）</li><li>合成Render树，布局</li><li>在生成Render树的过程中，浏览器就开始调用 GPU绘制，合成图层，栅格化</li><li>将内容显示在屏幕上面</li></ul><p>（6）断开连接（四次挥手）</p><ul><li>客户端 我请求完了</li><li>服务器 我收到了</li><li>服务器 我响应完了</li><li>客户端 我收到了</li></ul><h1><span id="si-http-tls-https">四、HTTP + TLS = HTTPS</span><a href="#si-http-tls-https" class="header-anchor">#</a></h1><p>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。</p><p>在 TLS 中使用了两种加密技术，分别为<strong>对称加密</strong>和<strong>非对称加密</strong>。</p><h2><span id="p1-liang-chong-jia-mi-fang-shi">1、两种加密方式</span><a href="#p1-liang-chong-jia-mi-fang-shi" class="header-anchor">#</a></h2><p><strong>对称加密</strong></p><p>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p><p>这种加密方式固然很好，但是问题就在于如何让双方知道秘钥。因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的。</p><p><strong>非对称加密</strong></p><p>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p><p>这种加密方式就可以完美解决对称加密存在的问题。假设现在两端需要使用对称加密，那么在这之前，可以先使用非对称加密交换秘钥。</p><p>简单流程如下：首先服务端将公钥公布出去，那么客户端也就知道公钥了。接下来客户端创建一个秘钥，然后通过公钥加密并发送给服务端，服务端接收到密文以后通过私钥解密出正确的秘钥，这时候两端就都知道秘钥是什么了。</p><h2><span id="p2-tls-wo-shou">2、TLS 握手</span><a href="#p2-tls-wo-shou" class="header-anchor">#</a></h2><p><img src="/images/2020/TLS%E6%8F%A1%E6%89%8B.jpg" alt="TLS握手"></p><p>客户端发送一个随机值以及需要的协议和加密方式。</p><p>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）</p><p>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</p><p>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</p><p>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</p><p>以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。</p><h1><span id="wu-websocket">五、WebSocket</span><a href="#wu-websocket" class="header-anchor">#</a></h1><h2><span id="p1-gai-nian">1、概念</span><a href="#p1-gai-nian" class="header-anchor">#</a></h2><ul><li>它是一种网络通信协议，是 <code>HTML5</code> 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</li><li>因为 HTTP 协议有一个缺陷：通信只能由客户端发起</li><li>我们都知道轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）, 因此websocket应运而生。</li><li>WebSocket用于在Web浏览器和服务器之间进行任意的双向数据传输的一种技术。WebSocket协议基于TCP协议实现，包含初始的握手过程，以及后续的多次数据帧双向传输过程。其目的是在WebSocket应用和WebSocket服务器进行频繁双向通信时，可以使服务器避免打开多个HTTP连接进行工作来节约资源，提高了工作效率和资源利用率。</li><li>WebSocket目前支持两种统一资源标志符<code>ws</code>和<code>wss</code>，类似于HTTP和HTTPS</li><li>浏览器发出webSocket的连线请求，服务器发出响应，这个过程称为<code>握手</code>,握手的过程只需要一次，就可以实现持久连接。</li></ul><h2><span id="p2-ji-ben-shi-yong">2、基本使用</span><a href="#p2-ji-ben-shi-yong" class="header-anchor">#</a></h2><p>WS 表示一个WebSocket对象。</p><p><code>WS.readyState</code> 检查连接状态</p><ul><li>0 未连接</li><li>1 <code>WS.OPEN</code> 连接已建立</li><li>2 连接正在关闭</li><li>3 连接已经关闭</li></ul><h2><span id="p3-xin-tiao">3、心跳</span><a href="#p3-xin-tiao" class="header-anchor">#</a></h2><p>待补充。</p><h2><span id="p4-socket-io">4、</span><a href="#p4-socket-io" class="header-anchor">#</a></h2><p>Socket.io是一个NodeJS <code>webSocket</code>库，目标是构建不同浏览器和移动设备上使用的实时应用。它会自动根据浏览器从<code>webSocket</code> <code>ajax长轮询</code> <code>ifrane流</code>等各种方式选择最佳的方式。</p><p>聊天室的实现</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 服务端</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建http server</span><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">"/socket.io.js"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./public/socket.io.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/javascript;charset=utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 响应页面</span>  <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./public/chat.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rs <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rs<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建WebSocket服务</span><span class="token keyword">const</span> io <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"socket.io"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// io可以代表所有客户端连接对象</span>io<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// socket代表当前连接上服务的客户端对象</span>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"client_to_server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 除它以外，通知其他客户端</span>    socket<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"server_to_client"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动服务</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token string">'localhost'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 客户端</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".chat-btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> content <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#chat-name>input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> chatContent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".chat-content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 客户端连接上服务端</span><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">"ws://192.168.10.2:3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// socket代表当前连接客户端对象</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前用户名</span>    <span class="token keyword">const</span> username <span class="token operator">=</span> input<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入用户名！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取用户输入的消息</span>    <span class="token keyword">const</span> msg <span class="token operator">=</span> content<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入聊天内容！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 客户端向服务端发送消息</span>    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"client_to_server"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        username<span class="token punctuation">,</span>        msg<span class="token punctuation">,</span>        time<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 显示在你的聊天内容</span>    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div class="title right-title"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">          </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">        &lt;/div>        &lt;div class="right-content"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    chatContent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 聊天内容清空</span>    content<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"server_to_client"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> time <span class="token punctuation">&#125;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 显示别人的聊天内容</span>    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;div class="title left-title"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">          </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">        &lt;/div>        &lt;div class="left-content"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>msg<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    chatContent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本控制工具</title>
      <link href="/09/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/09/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-git">一、Git</a><ul><li><a href="#1-an-zhuang-he-pei-zhi">1、安装和配置</a></li><li><a href="#2-ban-ben-ku">2、版本库</a></li><li><a href="#3-chang-yong-cao-zuo-ming-ling">3、常用操作命令</a></li></ul></li><li><a href="#tian-jia-suo-you-xiu-gai-de-wen-jian-dao-zan-cun-qu">添加所有修改的文件到暂存区</a></li><li><a href="#bu-hui-xian-shi-shan-chu-huo-zhe-xin-zeng-wen-jian">不会显示删除或者新增文件</a></li><li><a href="#cha-kan-zan-cun-qu-he-cang-ku-qu-de-chai-yi">查看暂存区和仓库区的差异</a></li><li><a href="#qu-xiao-zan-cun-qu-de-wen-jian">取消暂存区的文件</a></li><li><a href="#hui-tui-ban-ben">回退版本</a></li><li><a href="#cha-kan-jian-yi-li-shi-ban-ben">查看简易历史版本</a></li><li><a href="#cha-kan-suo-you-ri-zhi-xin-xi">查看所有日志信息</a></li><li><a href="#cha-kan-fen-zhi">查看分支</a></li><li><a href="#qie-huan-fen-zhi">切换分支</a></li><li><a href="#shan-chu-fen-zhi">删除分支</a></li><li><a href="#qie-huan-bing-chuang-jian-fen-zhi">切换并创建分支</a></li><li><a href="#he-bing-fen-zhi">合并分支</a><ul><li><a href="#4-gitgnore">4、.gitgnore</a></li></ul></li><li><a href="#hu-lue-suo-you-yi-test-jie-wei-de-wen-jian">忽略所有以 .test 结尾的文件</a></li><li><a href="#hu-lue-node-modules-wen-jian-he-wen-jian-jia">忽略 node_modules 文件和文件夹</a></li><li><a href="#er-github">二、Github</a><ul><li><a href="#1-chang-yong">1、常用</a></li><li><a href="#2-pei-zhi-ssh-mian-mi-deng-lu">2、配置 SSH 免密登录</a></li></ul></li><li><a href="#san-svn">三、SVN *</a></li></ul><!-- tocstop --></div><h1><span id="yi-git">一、Git</span><a href="#yi-git" class="header-anchor">#</a></h1><p><strong>Git</strong> 是一款开源免费的<strong>分布式</strong>的版本控制系统。相对来说，SVN 是集中式版本控制系统。</p><p>Git 可以备份代码、版本回退、协作开发、权限控制。</p><h2><span id="p1-an-zhuang-he-pei-zhi">1、安装和配置</span><a href="#p1-an-zhuang-he-pei-zhi" class="header-anchor">#</a></h2><p>（1）<a href="https://git-scm.com/">下载</a>并安装 Git</p><p>（2）打开命令行工具检查是否安装成功</p><p>（3）配置用户名和邮箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config -global user.name &quot;xxx&quot;git config -global user.email &quot;xxx&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（4）配置完成后查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）<strong>新建仓库</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-ban-ben-ku">2、版本库</span><a href="#p2-ban-ben-ku" class="header-anchor">#</a></h2><p>版本库分为三个区域</p><ul><li>工作区</li><li>暂存区 <code>staged</code></li><li>仓库区</li></ul><h2><span id="p3-chang-yong-cao-zuo-ming-ling">3、常用操作命令</span><a href="#p3-chang-yong-cao-zuo-ming-ling" class="header-anchor">#</a></h2><p>（1）查看当前状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>nothing to commit, working tree clean</code> 工作区和仓库一样，暂存区空</li><li><code>untracked files</code> 工作区未跟踪的文件</li><li><code>changes to be commited</code> 暂存区文件</li><li><code>no staged for commit</code> 以下文件还没添加到暂存区</li></ul><p>（2）将文件加入暂存区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add 文件名# 添加所有修改的文件到暂存区git add . git add *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）提交暂存区的文件到仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git commit -m &#39;注释内容&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释不能为空</p><p>注释规范</p><ul><li>feat 新增功能</li><li>fix 修复bug</li><li>cors 对核心功能进行修改</li><li>docs 修改文档</li></ul><p>（4）查看工作区和暂存区的差异</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看工作区和暂存区的修改# 不会显示删除或者新增文件git diff# 查看暂存区和仓库区的差异git diff -cached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）恢复改动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 恢复工作区改动的内容git restore# 取消暂存区的文件git restore --staged 文件名# 回退版本git reset --hard &lt;七位哈希&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（6）查看日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看历史版本git log# 查看简易历史版本git log --oneline# 查看所有日志信息git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（7）分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 创建分支git branch 分支名# 查看分支git branch# 切换分支git checkout 分支名# 删除分支git branch -d 分支名# 切换并创建分支git checkout -b 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（8）冲突和合并</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 冲突 CONFLICT# 合并分支git merge 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p4-gitgnore">4、.gitgnore</span><a href="#p4-gitgnore" class="header-anchor">#</a></h2><p>配置忽略文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 忽略所有的 .idea 文件.idea# 忽略所有以 .test 结尾的文件*.test# 忽略 node_modules 文件和文件夹&#x2F;node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="er-github">二、Github</span><a href="#er-github" class="header-anchor">#</a></h1><p>这边以远程仓库<code>Github</code>为例。</p><p><code>fork</code> 拷贝别人代码到自己仓库</p><h2><span id="p1-chang-yong">1、常用</span><a href="#p1-chang-yong" class="header-anchor">#</a></h2><ul><li>新建本地仓库</li><li>创建github仓库 <code>oringin</code></li><li>关联 <code>git remote add origin 远程仓库地址</code></li><li><code>git push -u origin</code> 推送到云端仓库<ul><li>`git push origin dev</li></ul></li><li><code>git pull</code> 下载到本地仓库</li><li><code>git clone 远程仓库地址</code> 克隆远程仓库到本地</li><li><code>git fetch origin </code></li></ul><p><code>git fetch</code>是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中。</p><p>而<code>git pull</code> 则是将远程主机的最新内容拉下来后直接合并，即：<code>git pull = git fetch + git merge</code>，这样可能会产生冲突，需要手动解决。</p><h2><span id="p2-pei-zhi-ssh-mian-mi-deng-lu">2、配置 SSH 免密登录</span><a href="#p2-pei-zhi-ssh-mian-mi-deng-lu" class="header-anchor">#</a></h2><ol><li><p>创建非对称加密对</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen &#x2F;&#x2F;在任意位置输入命令即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>文件默认存储在目录（c:/用户/用户名/.ssh）的 .ssh 文件夹中。</p><ul><li>id_rsa 私钥</li><li>id_rsa.pub 公钥</li></ul></li><li><p>将公钥（.pub）文件内容配置到账号的秘钥中</p><ul><li>首页 -&gt; 右上角头像-&gt; settings -&gt; SSH and GPG keys -&gt; new SSH Key</li></ul></li><li><p>克隆代码时，选择 ssh 模式进行克隆 （地址 在仓库首页 绿色 克隆的位置 选择 use ssh）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone git@github.com&#x2F;xiaohigh&#x2F;team-repo-1.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1><span id="san-svn">三、SVN *</span><a href="#san-svn" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 已更新 </tag>
            
            <tag> 工程化 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS开始</title>
      <link href="/03/03-NodeJS%E5%BC%80%E5%A7%8B/"/>
      <url>/03/03-NodeJS%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-gai-shu">一、概述</a><ul><li><a href="#1-te-xing">1、特性</a></li><li><a href="#2-rerl">2、RERL</a></li><li><a href="#3-global-dui-xiang">3、Global 对象</a></li></ul></li><li><a href="#er-bao-he-bao-guan-li-qi">二、包和包管理器</a><ul><li><a href="#1-package-json">1、package.json</a></li><li><a href="#2-npm">2、npm</a><ul><li><a href="#2-1-chang-yong-ming-ling">2.1 常用命令</a></li></ul></li></ul></li><li><a href="#chu-shi-hua-xiang-mu">初始化项目</a></li><li><a href="#an-zhuang-xiang-mu-de-suo-you-yi-lai">安装项目的所有依赖</a></li><li><a href="#an-zhuang">安装</a></li><li><a href="#an-zhuang-dao-xiang-mu-de-sheng-chan-yi-lai">安装到项目的生产依赖</a></li><li><a href="#an-zhuang-dao-xiang-mu-de-kai-fa-yi-lai">安装到项目的开发依赖</a></li><li><a href="#an-zhuang-dao-quan-ju-huan-jing">安装到全局环境</a></li><li><a href="#shan-chu-bao">删除包</a><ul><li><a href="#2-2-cnpm">2.2 cnpm</a></li></ul></li><li><a href="#huo-zhe">或者</a><ul><li><a href="#2-3-yarn">2.3 Yarn</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-gai-shu">一、概述</span><a href="#yi-gai-shu" class="header-anchor">#</a></h1><p>Node.js是一个基于ChromeV8引擎的JS运行环境。</p><h2><span id="p1-te-xing">1、特性</span><a href="#p1-te-xing" class="header-anchor">#</a></h2><p>优点</p><ul><li>异步的非阻塞（处理高并发）</li><li>事件循环机制</li><li>单线程</li><li>跨平台</li><li>事件驱动</li></ul><p>主要应用场景</p><ul><li>中间层 BFF(backends for frontends)、RESTful API。</li><li>I/O 密集型的领域，如服务端渲染，前端项目构建。</li><li>低延迟的网络应用，如即时聊天。</li></ul><h2><span id="p2-rerl">2、RERL</span><a href="#p2-rerl" class="header-anchor">#</a></h2><p>在命令行窗口运行JS程序。</p><h2><span id="p3-global-dui-xiang">3、Global 对象</span><a href="#p3-global-dui-xiang" class="header-anchor">#</a></h2><p>全局对象。</p><h1><span id="er-bao-he-bao-guan-li-qi">二、包和包管理器</span><a href="#er-bao-he-bao-guan-li-qi" class="header-anchor">#</a></h1><h2><span id="p1-package-json">1、package.json</span><a href="#p1-package-json" class="header-anchor">#</a></h2><p>NodeJS 的包基本遵循 CommonJS 规范，包将一组相关的模块组合在一起，形成一套完整的工具，主要文件就是 <code>package.json</code>。</p><p><code>package.json</code> 文件其实就是对项目或者模块包的描述，里面包含许多元信息。比如项目名称，项目版本，项目执行入口文件，项目贡献者等等。<code>npm install</code>命令会根据这个文件下载所有依赖模块。</p><p>在项目根目录下执行 <code>npm init</code>，然后根据提示一步步输入相应的内容完成后即可自动创建该文件。</p><p>包描述文件包含以下字段：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">name - 包名，不能有中文、特殊字符等version - 包的版本号description - 包的描述homepage - 包的官网URLauthor - 包的作者contributors - 包的其他贡献者description - 项目描述，是一个字符串keywords - 项目关键字，是一个字符串数组private - 是否私有，设置为 true 时，npm 拒绝发布license - 软件授权条款，让用户知道他们的使用权利和限制bugs - bug 提交地址repository - 项目仓库地址homepage - 项目包的官网 URLdependencies - 生产环境下，项目运行所需依赖，运行包时需要使用的依赖\&gt; 显示的版本号：\&gt; 1.12.4 --&gt; 必须是 1.12.4 版本\&gt; ^1.12.4 --&gt; 必须是 1.12.x 版本，x取最新的\&gt; ~1.12.4 --&gt; 必须是 1.x.x 版本，x取最新的devDependencies - 开发环境下，项目所需依赖，构建包时需要使用依赖scripts - 执行 npm 脚本命令简写，比如 “start”: “react-scripts start”, 执行 npm start 就是运行 “react-scripts start”bin - 内部命令对应的可执行文件的路径。eslintConfig - EsLint 检查文件配置，自动读取验证engines - 项目运行的平台browseslist - 供浏览器使用的版本列表files - 被项目包含的文件名数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-npm">2、npm</span><a href="#p2-npm" class="header-anchor">#</a></h2><p>Node Package Manager</p><h3><span id="p2-1-chang-yong-ming-ling">2.1 常用命令</span><a href="#p2-1-chang-yong-ming-ling" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看版本npm -v# 初始化项目npm initnpm init -y # 安装项目的所有依赖npm inpm install# 安装npm i 包名npm install 包名# 安装到项目的生产依赖npm install 包名 --savenpm install 包名 -S# 安装到项目的开发依赖npm install 包名 --save-devnpm install 包名 -D# 安装到全局环境npm install 包名 -g# 删除包npm remove 包名npm r 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-2-cnpm">2.2 cnpm</span><a href="#p2-2-cnpm" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org# 或者npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="p2-3-yarn">2.3 Yarn</span><a href="#p2-3-yarn" class="header-anchor">#</a></h3><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收集箱</title>
      <link href="/%E6%94%B6%E9%9B%86/"/>
      <url>/%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1><span id="kao-shi-nei-rong">考试内容</span><a href="#kao-shi-nei-rong" class="header-anchor">#</a></h1><p>ES6 git NodeJS http ajax</p>]]></content>
      
      
      <categories>
          
          <category> 未归类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/02/23-jQuery/"/>
      <url>/02/23-jQuery/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-kai-shi">一、开始</a><ul><li><a href="#1-yin-ru">1、引入</a></li><li><a href="#2-dai-ma-feng-ge">2、代码风格</a></li><li><a href="#3-jquery-dui-xiang-yu-js-dui-xiang">3、jQuery对象与JS对象</a></li><li><a href="#4-zhi-xing-shi-ji">4、执行时机 △</a></li></ul></li><li><a href="#er-chang-gui-cao-zuo">二、常规操作</a><ul><li><a href="#1-lei-shu-zu-cao-zuo">1、类数组操作</a></li><li><a href="#2-xuan-ze-qi-cao-zuo">2、选择器操作</a></li></ul></li><li><a href="#san-jquery-dong-hua">三、jQuery 动画</a><ul><li><a href="#1-xian-shi-yin-cang">1. 显示、隐藏</a></li><li><a href="#2-hua-dong-juan-dong">2. 滑动、卷动</a></li><li><a href="#3-dan-ru-dan-chu">3. 淡入、淡出</a></li><li><a href="#4-zi-ding-yi-dong-hua">4. 自定义动画</a></li><li><a href="#5-ting-zhi-dong-hua">5. 停止动画</a></li><li><a href="#6-yan-chi-dong-hua">6. 延迟动画</a></li></ul></li><li><a href="#si-jquery-yuan-su-yang-shi-cao-zuo">四、jQuery 元素样式操作</a></li><li><a href="#wu-jquery-dom-cao-zuo">五、jQuery DOM 操作</a><ul><li><a href="#1-she-zhi-nei-rong-he-shu-xing">1、设置内容和属性</a></li><li><a href="#2-jie-dian-cao-zuo">2、节点操作</a></li></ul></li><li><a href="#liu-jquery-shi-jian">六、jQuery 事件</a><ul><li><a href="#1-jian-xie-shi-jian">1、简写事件</a></li><li><a href="#2-shi-jian-dui-xiang">2、事件对象</a></li><li><a href="#3-jquery-bang-ding-shi-jian">3、jQuery 绑定事件</a></li></ul></li><li><a href="#qi-jquery-kuo-zhan">七、jQuery 扩展+</a></li><li><a href="#ba-jquery-shu-xie-cha-jian">八、jQuery 书写插件+</a></li><li><a href="#jiu-zepto">九、Zepto</a></li></ul><!-- tocstop --></div><h1><span id="yi-kai-shi">一、开始</span><a href="#yi-kai-shi" class="header-anchor">#</a></h1><p><strong>jQuery</strong> 是John Resig创建的一个JS开源类库，它通过封装原生的JavaScript函数得到一整套定义好的方法。</p><p><a href>jQuery API手册</a></p><h2><span id="p1-yin-ru">1、引入</span><a href="#p1-yin-ru" class="header-anchor">#</a></h2><p>（1）本地</p><p>（2）CDN 引入</p><p>CDN，Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户<strong>就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率</strong>。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）版本</p><p>版本格式 大版本.小版本.bugfix</p><ul><li>1.x.x 完全兼容IE6-8</li><li>2.1.4 不再兼容IE6-8</li><li>3.1.1 源码使用ES6语法</li></ul><p><code>jquery.js</code> | <code>jquery.min.js</code> 压缩版，正式上线使用压缩版本。</p><h2><span id="p2-dai-ma-feng-ge">2、代码风格</span><a href="#p2-dai-ma-feng-ge" class="header-anchor">#</a></h2><p>（1）全局函数 <code>jQuery()</code> ，快捷别名 <code>$</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> windows<span class="token punctuation">.</span>$ <span class="token operator">=</span> jQuery<span class="token punctuation">;</span><span class="token comment">// 选择器选中 box 元素，获取了 jQuery 对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token comment">// CSS方法设置样式</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）链式调用</p><p>jQuery的<strong>每个方法返回的都是jQuery对象</strong>，所以可以链式调用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"font-size"</span><span class="token punctuation">,</span><span class="token string">"40px"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p3-jquery-dui-xiang-yu-js-dui-xiang">3、jQuery对象与JS对象</span><a href="#p3-jquery-dui-xiang-yu-js-dui-xiang" class="header-anchor">#</a></h2><p><strong>JS对象</strong> 即DOM对象，即是我们用传统的方法获得的对象。</p><p><strong>jQuery对象</strong> 即是用jQuery类库的选择器获得的类数组对象，就是通过jQuery包装DOM对象后产生的对象，它是jQuery独有的。如果一个对象是jQuery对象，那么就可以使用jQuery里的方法。</p><p>对象的转换</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// jQuery对象 转 DOM对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// DOM对象 转 jQuery 对象</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token constant">BOM</span>对象<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-zhi-xing-shi-ji">4、执行时机 △</span><a href="#p4-zhi-xing-shi-ji" class="header-anchor">#</a></h2><table><thead><tr><th></th><th>window.onload</th><th>$(document).ready()</th></tr></thead><tbody><tr><td>执行时机</td><td>等待网页全部加载完成然后才会执行</td><td>等待DOM结构加载完成就执行</td></tr><tr><td>执行次数</td><td>只会执行一次<br>写第二次会覆盖第一次</td><td>可以执行多次<br>不会覆盖</td></tr><tr><td>简写方案</td><td>无</td><td>$(function (){});</td></tr></tbody></table><h1><span id="er-chang-gui-cao-zuo">二、常规操作</span><a href="#er-chang-gui-cao-zuo" class="header-anchor">#</a></h1><h2><span id="p1-lei-shu-zu-cao-zuo">1、类数组操作</span><a href="#p1-lei-shu-zu-cao-zuo" class="header-anchor">#</a></h2><ul><li><code>children()</code> 获取选择器元素的<strong>子元素</strong>节点集合，如果指定了参数，那么该参数也是筛选表达式</li><li><code>parent()</code>  获取选择器元素的<strong>父元素</strong>节点集合（只有一个），，如果指定了参数，那么该参数也是筛选表达式</li><li><code>siblings()</code>  获取选择器元素的<strong>兄弟元素</strong>节点集合，如果指定了参数，那么该参数也是筛选表达式</li><li><code>find()</code> 寻找后代元素，参数直接写选择器</li><li><code>end</code> 返回上一次破坏性操作之前的伪数组</li><li>对于类数组的常用方法还有很多，比如 <code>prev()</code>、<code>next()</code>等等。</li></ul><h2><span id="p2-xuan-ze-qi-cao-zuo">2、选择器操作</span><a href="#p2-xuan-ze-qi-cao-zuo" class="header-anchor">#</a></h2><p>直接参数传递选择器。</p><ul><li>基础选择器 <code>#id</code>、<code>.class</code></li><li>层次选择器 <code>A B</code>、<code>A+B</code>、<code>A~B</code></li><li>过滤选择器 <code>:first</code>、<code>first-child</code>、<code>not()</code>、<code>even</code>、<code>odd</code><ul><li><code>:first</code> / <code>:last</code> 选取第一个元素/最后一个元素</li><li><code>:first-child</code> / <code>:last-child</code> 选取第一个子元素/最后一个子元素。</li><li><code>:only-child</code> 选取只有一个子元素的节点。</li><li><code>nth-child(index/even/odd/equation)</code> 选取序列特定的元素</li><li><code>:even</code> / <code>:odd</code> 选取索引是单数、双数的元素</li><li><code>:eq(index)</code> 选取指定index值的元素</li><li><code>:gt(index)</code> / <code>:lt(index)</code> 选取索引大于/小于指定的元素</li><li><code>:not(seletor)</code> 排除选定的元素</li><li><code>:contains(text)</code> 选取包含指定文本text的元素。</li><li><code>:empty</code> 选取空元素</li><li><code>:has(seletor)</code> 选取含有指定选择器的元素。</li><li><code>:parent</code> 选取含有子元素或文本的元素。</li></ul></li><li>属性过滤选择器 <code>[attr]</code></li><li>表单选择器 <code>:input</code></li></ul><h1><span id="san-jquery-dong-hua">三、jQuery 动画</span><a href="#san-jquery-dong-hua" class="header-anchor">#</a></h1><h2><span id="p1-xian-shi-yin-cang">1. 显示、隐藏</span><a href="#p1-xian-shi-yin-cang" class="header-anchor">#</a></h2><p><code>.show()</code> 显示 | <code>.hide()</code> 隐藏</p><ul><li>第一个参数 控制速度   600ms  <code>slow</code> | 默认 400ms <code>normal</code> | 200ms <code>fast</code></li><li>第二个参数 控制动画形式   <code>linear</code> | <code>swing</code></li><li>第三个参数 书写回调函数</li></ul><p><code>.tiggle()</code> 开关（显示的时候隐藏，隐藏的时候显示）</p><h2><span id="p2-hua-dong-juan-dong">2. 滑动、卷动</span><a href="#p2-hua-dong-juan-dong" class="header-anchor">#</a></h2><p><code>.slideUp()</code> 向上收缩| <code>.slideDown()</code> 向上展开 | <code>.sildeToggle()</code></p><h2><span id="p3-dan-ru-dan-chu">3. 淡入、淡出</span><a href="#p3-dan-ru-dan-chu" class="header-anchor">#</a></h2><p><code>.fadeIn()</code> | <code>.fadeOut()</code> | <code>.fadeToggle()</code></p><h2><span id="p4-zi-ding-yi-dong-hua">4. 自定义动画</span><a href="#p4-zi-ding-yi-dong-hua" class="header-anchor">#</a></h2><p>（1）基础使用</p><p><code>animate( params, speed, callback)</code></p><ul><li>第1个参数 包含样式属性和值的映射速度</li><li>第2个参数 可选</li><li>第3个参数 在动画完成时执行的回调函数</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    left<span class="token operator">:</span> <span class="token string">"1000px"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 回调函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）动画队列</p><p>如果要按照顺序执行动画，只需要按照代码顺序就可以。（只有动画会放在队列中，其他方法会立即执行 ）</p><h2><span id="p5-ting-zhi-dong-hua">5. 停止动画</span><a href="#p5-ting-zhi-dong-hua" class="header-anchor">#</a></h2><p>（1） 停止方法</p><p><code>stop( clearQueue, gotoEnd )</code></p><ul><li>第1个参数 可选 布尔值 是否需要清空未执行完的动画队列</li><li>第2个参数 可选 布尔值 是否直接将正在执行的动画跳转到末状态</li></ul><p>这个方法会结束当前正在进行的动画，并立即执行队列中的下一个动画。</p><p>（2）判断元素是否处于动画状态</p><p>当用户在某个元素上执行 <code>animate()</code> 动画时，就会出现动画积累，</p><p>使用 <code>is(&quot;:animated&quot;)</code> 来判断是否处于动画状态，如果不处于动画状态，才会给元素添加新动画。</p><h2><span id="p6-yan-chi-dong-hua">6. 延迟动画</span><a href="#p6-yan-chi-dong-hua" class="header-anchor">#</a></h2><p><code>delay()</code></p><p>参数是延迟的毫秒数。</p><h1><span id="si-jquery-yuan-su-yang-shi-cao-zuo">四、jQuery 元素样式操作</span><a href="#si-jquery-yuan-su-yang-shi-cao-zuo" class="header-anchor">#</a></h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>css( name )</code></td><td>获取元素的样式</td></tr><tr><td><code>css( name, value)</code></td><td>设置元素的样式</td></tr><tr><td><code>css( name:value, name2:value2,..)</code></td><td>设置元素的样式（多个）</td></tr><tr><td><code>addClass(Class)</code>/<code>removeClass(Class)</code></td><td>添加类/ 移除类</td></tr><tr><td><code>toggleClass(Class)</code></td><td>来回切换默认样式和指定样式</td></tr><tr><td><code>width()</code>/<code>height()</code></td><td>获取和设置宽高</td></tr><tr><td><code>innerWidth()</code> / <code>innerHeight()</code></td><td>获取包含内边距的宽高</td></tr><tr><td><code>outerWidth()</code> / <code>outerHeight()</code></td><td>获取包含边框和内边距的宽高<br>如果参数是<code>true</code>则包含外边距</td></tr><tr><td><code>offset()</code></td><td>获取元素相对文档的偏移位置</td></tr><tr><td><code>position()</code></td><td>获取元素相对父元素的偏移位置</td></tr><tr><td><code>scrollTop()</code> / <code>scrollLeft</code></td><td>获取和设置水平/垂直滚动条</td></tr></tbody></table><h1><span id="wu-jquery-dom-cao-zuo">五、jQuery DOM 操作</span><a href="#wu-jquery-dom-cao-zuo" class="header-anchor">#</a></h1><h2><span id="p1-she-zhi-nei-rong-he-shu-xing">1、设置内容和属性</span><a href="#p1-she-zhi-nei-rong-he-shu-xing" class="header-anchor">#</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>html()</code></td><td>获取和设置元素中的内容</td></tr><tr><td><code>text()</code></td><td>获取和设置元素中的文本内容</td></tr><tr><td><code>val()</code></td><td>获取和设置表单元素的文本内容</td></tr><tr><td><code>prop/attr(key[, value])</code> <br><code>prop/attr(key:value, key2:value2, )</code></td><td>获取和设置元素 key 属性值<br>处理自带属性使用 <code>prop</code><br>处理自定义属性使用 <code>attr</code></td></tr><tr><td><code>removeattr(key)</code></td><td>删除指定的属性</td></tr></tbody></table><h2><span id="p2-jie-dian-cao-zuo">2、节点操作</span><a href="#p2-jie-dian-cao-zuo" class="header-anchor">#</a></h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>$(&quot;&lt;标签名&gt;&lt;/标签名&quot;)</code></td><td><code>createElement()</code></td></tr><tr><td><code>$(&quot;&lt;标签名&gt;文本&lt;/标签名&gt;&quot;)</code></td><td><code>createTextNode()</code></td></tr><tr><td>直接写在创建的标签中 | <code>setAttribute( name, value)</code></td><td>创建属性节点</td></tr><tr><td><code>append(Content)</code> 元素内部后面插入 <br><code>appendTo(Content)</code> <br><code>prepend(Content)</code> 元素内部前面插入 <br><code>prepentTo(Content)</code> <br><code>after()</code> 元素外部后面 <br><code>insertAfter()</code> <br><code>before()</code> 元素外部前面 <br><code>insertBefore()</code></td><td>插入节点</td></tr><tr><td><code>remove()</code></td><td><code>removeChild()</code></td></tr><tr><td><code>replaceAll()</code></td><td><code>replaceChild()</code><br>节点被替换后，所包含的事件行为就全部消失了。</td></tr><tr><td><code>clone()</code></td><td><code>cloneNode()</code><br>参数可以为空，只复制元素和内容，<br>加上 <code>true</code> 参数的话，会复制这个元素的事件处理行为。</td></tr></tbody></table><h1><span id="liu-jquery-shi-jian">六、jQuery 事件</span><a href="#liu-jquery-shi-jian" class="header-anchor">#</a></h1><h2><span id="p1-jian-xie-shi-jian">1、简写事件</span><a href="#p1-jian-xie-shi-jian" class="header-anchor">#</a></h2><p>jQuery 封装了常用的事件以节约更多的代码，称为<strong>简写事件</strong>。</p><table><thead><tr><th>方法</th><th>触发</th></tr></thead><tbody><tr><td><code>click(fn)</code></td><td>鼠标单击</td></tr><tr><td><code>dblclick(fn)</code></td><td>鼠标双击</td></tr><tr><td><code>mousedown(fn)</code></td><td>鼠标点击后</td></tr><tr><td><code>mouseup(fn)</code></td><td>鼠标点击后弹起</td></tr><tr><td><code>mouseover(fn)</code></td><td>鼠标移入</td></tr><tr><td><code>mouseout(fn)</code></td><td>鼠标移出</td></tr><tr><td><code>mousemove(fn)</code></td><td>鼠标移动</td></tr><tr><td><code>mouseeenter(fn)</code></td><td>鼠标穿过</td></tr><tr><td><code>mouselevave(fn)</code></td><td>鼠标穿出</td></tr><tr><td><code>keydown(fn)</code></td><td>键盘按下</td></tr><tr><td><code>keyup(fn)</code></td><td>键盘弹起</td></tr><tr><td><code>resize(fn)</code></td><td>文档改变大小</td></tr><tr><td><code>scroll(fn)</code></td><td>滚动条滚动</td></tr><tr><td><code>focus(fn)</code></td><td>表单交单激活</td></tr><tr><td><code>blur(fn)</code></td><td>表单交单丢失</td></tr><tr><td><code>focusin(fn)</code></td><td>表单焦点激活</td></tr><tr><td><code>select(fn)</code></td><td>表单文本选定</td></tr><tr><td><code>change(fn)</code></td><td>表单元素值改变</td></tr><tr><td><code>submit(fn)</code></td><td>表单提交</td></tr></tbody></table><h2><span id="p2-shi-jian-dui-xiang">2、事件对象</span><a href="#p2-shi-jian-dui-xiang" class="header-anchor">#</a></h2><p>对于原生的事件对象，由于浏览器差异，开发者总是需要做兼容性处理。jQuery 解决了原生事件对象的兼容性问题，还提供了很多新的属性和方法。</p><p><code>stopPropagation()</code> 阻止事件冒泡</p><p><code>preventDefault()</code> 阻止默认行为</p><h2><span id="p3-jquery-bang-ding-shi-jian">3、jQuery 绑定事件</span><a href="#p3-jquery-bang-ding-shi-jian" class="header-anchor">#</a></h2><p><code>bind()</code> 方法无法动态绑定尚未存在的元素。此外还有 <code>live()</code> <code>delegate</code> 等已经被废弃，底层实际使用 <code>on()</code>。</p><p><strong><code>on( events, selector, data, fn)</code></strong> 绑定事件jQuery 1.7+</p><ul><li><code>events</code> 事件类型</li><li><code>selector</code> 触发事件选择器元素的后代</li><li><code>data</code> 当一个事件被触发要传递 event.data 给事件处理函数</li><li><code>fn</code> 该事件被触发时的执行函数</li></ul><p>还可以<strong>绑定多个事件绑定同一个函数、多个事件绑定不同函数</strong>。</p><p><code>unbind()</code> 解除绑定事件。</p><p><strong><code>off( events, selector, fn)</code></strong> 解除绑定事件。</p><p><code>one( type, data, fn )</code> 绑定元素执行完毕后自动移除事件，方法仅触发一次。</p><ul><li><code>type</code> 添加到元素的一个或者多个事件。</li><li><code>data</code> 将要传递给事件处理函数的数据映射。</li><li><code>fn</code> 每当事件触发时执行的函数。</li></ul><h1><span id="qi-jquery-kuo-zhan">七、jQuery 扩展+</span><a href="#qi-jquery-kuo-zhan" class="header-anchor">#</a></h1><p>自定义了<code>extent()</code>和 <code>fn.extent()</code> 方法，扩展jQuery类本身，为类添加新的方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>$<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> item<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="ba-jquery-shu-xie-cha-jian">八、jQuery 书写插件+</span><a href="#ba-jquery-shu-xie-cha-jian" class="header-anchor">#</a></h1><h1><span id="jiu-zepto">九、Zepto</span><a href="#jiu-zepto" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式布局</title>
      <link href="/02/11-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
      <url>/02/11-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-xiang-ying-shi-bu-ju">一、响应式布局</a><ul><li><a href="#1-san-ge-te-zheng">1、三个特征</a></li><li><a href="#2-xiang-su-bi">2、像素比</a></li><li><a href="#3-shi-me-shi-hou-yong-xiang-ying-shi-bu-ju">3、什么时候用响应式布局</a></li></ul></li><li><a href="#er-mei-ti-cha-xun">二、媒体查询</a><ul><li><a href="#1-mei-ti-lei-xing">1、媒体类型</a></li><li><a href="#2-she-bei-te-zheng">2、设备特征</a></li><li><a href="#3-luo-ji-tiao-jian">3、逻辑条件</a></li><li><a href="#4-she-zhi-duan-dian">4、设置断点</a></li><li><a href="#5-css3-mei-ti-cha-xun">5、CSS3 媒体查询</a></li></ul></li><li><a href="#san-yi-dong-duan-gua-pei">三、移动端适配</a></li><li><a href="#si-bootstrap">四、Bootstrap</a><ul><li><a href="#1-rong-qi">1、容器</a></li><li><a href="#2-zha-ge-xi-tong">2、栅格系统</a></li><li><a href="#3-yuan-ma-fen-xi">3、源码分析</a></li></ul></li><li><a href="#wu-swiper">五、Swiper</a></li></ul><!-- tocstop --></div><h1><span id="yi-xiang-ying-shi-bu-ju">一、响应式布局</span><a href="#yi-xiang-ying-shi-bu-ju" class="header-anchor">#</a></h1><p>响应式布局是在2010年提出的一个概念，简而言之，<strong>就是一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本</strong>。用户会使用不同的终端，由于屏幕分辨率不同，想要用户体验更好，就有必要让你的网页兼容多个终端。响应式布局设计可以让一个网站适配多种设备和多个屏幕，可以让网站的布局和功能随用户的使用环境（屏幕大小，输入方式，设备/浏览器能力）而变化。</p><h3><span id="p1-san-ge-te-zheng">1、三个特征</span><a href="#p1-san-ge-te-zheng" class="header-anchor">#</a></h3><ul><li><p>媒体查询 检查设备在渲染我们作品时的物理特性</p></li><li><p>流动布局</p></li><li><p>灵活的视觉效果</p></li></ul><h3><span id="p2-xiang-su-bi">2、像素比</span><a href="#p2-xiang-su-bi" class="header-anchor">#</a></h3><p>2x图、3x图</p><h3><span id="p3-shi-me-shi-hou-yong-xiang-ying-shi-bu-ju">3、什么时候用响应式布局</span><a href="#p3-shi-me-shi-hou-yong-xiang-ying-shi-bu-ju" class="header-anchor">#</a></h3><h1><span id="er-mei-ti-cha-xun">二、媒体查询</span><a href="#er-mei-ti-cha-xun" class="header-anchor">#</a></h1><p><strong>媒体查询</strong>（media query)，CSS2推出，CSS3优化。</p><p><code>navigator.userAgent</code> 获取浏览器的识别码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="p1-mei-ti-lei-xing">1、媒体类型</span><a href="#p1-mei-ti-lei-xing" class="header-anchor">#</a></h3><p><code>all</code> 所有设备</p><p><code>screen</code> 屏幕，默认值</p><p><code>tv</code> 电视</p><h3><span id="p2-she-bei-te-zheng">2、设备特征</span><a href="#p2-she-bei-te-zheng" class="header-anchor">#</a></h3><p><code>width</code> <code>height</code> <code>min/max-width/height</code></p><p><code>orientation</code> 横屏竖屏判断</p><p><code>resolution</code> 分辨率</p><p><code>devicePixelRatio</code> 像素比</p><p>检测横屏、竖屏</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (orientation: portrait)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (orientation: landscape)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="p3-luo-ji-tiao-jian">3、逻辑条件</span><a href="#p3-luo-ji-tiao-jian" class="header-anchor">#</a></h3><ul><li><code>and</code> 与</li><li><code>not </code> 是对后边所有逻辑语句的否定，not只能写第一位</li><li><code>,</code> 或</li><li><code>only</code></li></ul><h3><span id="p4-she-zhi-duan-dian">4、设置断点</span><a href="#p4-she-zhi-duan-dian" class="header-anchor">#</a></h3><h3><span id="p5-css3-mei-ti-cha-xun">5、CSS3 媒体查询</span><a href="#p5-css3-mei-ti-cha-xun" class="header-anchor">#</a></h3><p><code>@media</code></p><h1><span id="san-yi-dong-duan-gua-pei">三、移动端适配</span><a href="#san-yi-dong-duan-gua-pei" class="header-anchor">#</a></h1><p>视口 viewport</p><p>rem</p><p>触摸事件</p><p>vh vw</p><ul><li>width=device-width：让宽度=设备缩放之后的宽度，就是320、360、375、414这些。</li><li>initial-scale=1：初始化的缩放比例1，这个属性和css中transform: scale(1);有异曲同工之妙。</li><li>minimum-scale=1：最小缩放比例，相当于你给div设置mix-height一样，带有限制。</li><li>maximum-scale=1：最大缩放比例，同上，不说了。</li><li>user-scalable=no：是否允许用户使用双指进行缩放，（默认不允许）。</li></ul><h1><span id="si-bootstrap">四、Bootstrap</span><a href="#si-bootstrap" class="header-anchor">#</a></h1><p><strong>Bootstrap</strong>是一个响应式的栅格系统UI框架。</p><h3><span id="p1-rong-qi">1、容器</span><a href="#p1-rong-qi" class="header-anchor">#</a></h3><p><code>container</code> 容器</p><p><code>row</code> 行</p><p><code>columns</code> 列</p><h3><span id="p2-zha-ge-xi-tong">2、栅格系统</span><a href="#p2-zha-ge-xi-tong" class="header-anchor">#</a></h3><p><code>Bootstrap</code> 提供了一套响应式，移动设备优先的流式栅格系统，随着屏幕或者视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><p>基本原理：<code>float</code>，<code>margin</code>。</p><h3><span id="p3-yuan-ma-fen-xi">3、源码分析</span><a href="#p3-yuan-ma-fen-xi" class="header-anchor">#</a></h3><p><code>less</code></p><p>混合、函数、</p><p><a href="https://v3.bootcss.com/css/#grid">参考</a></p><h1><span id="wu-swiper">五、Swiper</span><a href="#wu-swiper" class="header-anchor">#</a></h1><p><a href="https://www.swiper.com.cn/">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 事件</title>
      <link href="/02/21-JS%E4%BA%8B%E4%BB%B6/"/>
      <url>/02/21-JS%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-gai-nian">一、概念</a><ul><li><a href="#1-shi-jian-mo-xing">1、事件模型</a></li><li><a href="#2-shi-jian-liu">2、事件流</a></li><li><a href="#3-shi-jian-bang-ding">3、事件绑定</a></li></ul></li><li><a href="#er-shi-jian-lei-xing-dom0-ji">二、事件类型（DOM0级）</a><ul><li><a href="#1-shi-qu-he-huo-qu-jiao-dian-shi-jian">1、失去和获取焦点事件</a></li><li><a href="#2-dian-ji-shi-jian-shu-biao-shi-jian">2、点击事件、鼠标事件</a></li><li><a href="#3-jian-pan-shi-jian">3、键盘事件</a></li><li><a href="#4-biao-dan-shi-jian">4、表单事件</a></li><li><a href="#5-gun-dong-tiao-shi-jian">5、滚动条事件</a></li><li><a href="#6-jia-zai-wan-cheng-shi-jian-chang-yong">6、加载完成事件（常用）</a></li><li><a href="#7-qi-ta">7、其他</a></li></ul></li><li><a href="#san-shi-jian-chu-li-han-shu">三、事件处理函数</a><ul><li><a href="#1-zhu-ce-shi-jian-addeventlistener">1、注册事件 - addEventListener</a></li><li><a href="#2-xiao-hui-shi-jian-removeeventlistener">2、销毁事件 - removeEventListener</a></li><li><a href="#3-jian-rong-xing-xiang-guan">3、兼容性相关</a></li></ul></li><li><a href="#wu-ding-shi-qi">五、定时器 △△</a><ul><li><a href="#1-chao-shi-diao-yong-settimeout">1、超时调用 - setTimeout</a></li><li><a href="#2-jian-xie-diao-yong-setinterval">2、间歇调用 - setInterval</a></li></ul></li><li><a href="#si-shi-jian-qi-ta">四、事件其他</a><ul><li><a href="#1-domcontentloaded-shi-jian">1、DOMContentLoaded 事件</a></li><li><a href="#2-event-shi-jian-dui-xiang">2、event 事件对象</a></li><li><a href="#3-shu-biao-de-event-shi-jian">3、鼠标的 event 事件</a></li><li><a href="#4-zu-zhi-chuan-bo">4、阻止传播 △</a></li><li><a href="#5-zu-zhi-mo-ren-shi-jian">5、阻止默认事件 △</a></li><li><a href="#6-shi-jian-wei-tuo">6、事件委托 △</a></li><li><a href="#7-bu-chong-nei-rong">7、补充内容</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-gai-nian">一、概念</span><a href="#yi-gai-nian" class="header-anchor">#</a></h1><h2><span id="p1-shi-jian-mo-xing">1、事件模型</span><a href="#p1-shi-jian-mo-xing" class="header-anchor">#</a></h2><p><code>DOM0</code> 基本事件模型。</p><p><code>DOM2</code> DOM事件模型，标准的事件处理模型。</p><h2><span id="p2-shi-jian-liu">2、事件流</span><a href="#p2-shi-jian-liu" class="header-anchor">#</a></h2><p><strong>事件流</strong>就是多个节点对象对同一个事件响应的先后顺序。</p><p>冒泡型 从目标元素向 document 进行响应 （IE标准）</p><p>捕获型 从 document 向 目标元素 进行响应 （网景标准）</p><p><strong>混合型</strong> W3C事件流，先捕获，执行目标事件，最后冒泡。</p><p><img src="/images/2020/%E4%BA%8B%E4%BB%B6%E6%B5%81.jpg" alt></p><h2><span id="p3-shi-jian-bang-ding">3、事件绑定</span><a href="#p3-shi-jian-bang-ding" class="header-anchor">#</a></h2><p>（1）静态绑定</p><p>（2）动态绑定（DOM0级绑定）</p><p><strong><code>元素 . on+事件类型 = 函数</code></strong></p><ul><li>绑定事件简单，把事件函数赋值给DOM对象的事件属性上</li><li>执行的事件流是冒泡</li><li>对一个元素绑定同一个事件多次，前面的会被后面覆盖</li><li>注销事件只需要给事件属性赋值为 null</li></ul><p>（3）<strong>事件处理函数</strong></p><p><strong><code>元素 . addEventListener(type function Boolean)</code></strong></p><ul><li>可以绑定同一个元素同一个事件多次。</li><li>可以控制冒泡或者捕获。</li><li>DOM2级事件（DOMContentLoader事件），只能使用这种方法绑定。</li></ul><p>（4） IE事件模型绑定方法（了解）</p><p><code>元素 . attachEvent( onType function )</code></p><p>事件的this指向事件源对象。</p><h1><span id="er-shi-jian-lei-xing-dom0-ji">二、事件类型（DOM0级）</span><a href="#er-shi-jian-lei-xing-dom0-ji" class="header-anchor">#</a></h1><h2><span id="p1-shi-qu-he-huo-qu-jiao-dian-shi-jian">1、失去和获取焦点事件</span><a href="#p1-shi-qu-he-huo-qu-jiao-dian-shi-jian" class="header-anchor">#</a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>focus</code></td><td>获取焦点事件</td></tr><tr><td><code>blur</code></td><td>失去焦点事件</td></tr></tbody></table><h2><span id="p2-dian-ji-shi-jian-shu-biao-shi-jian">2、点击事件、鼠标事件</span><a href="#p2-dian-ji-shi-jian-shu-biao-shi-jian" class="header-anchor">#</a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>click</strong></td><td>鼠标点击（通常左键）<br>在当前元素按下并抬起才会触发</td></tr><tr><td>contextmenu</td><td>鼠标点击（右键）</td></tr><tr><td>dblclick</td><td>鼠标双击（左键）<br>需在300毫秒内完成</td></tr><tr><td>mousedown</td><td>鼠标按下</td></tr><tr><td>mouseup</td><td>鼠标抬起</td></tr><tr><td>mousemove</td><td>鼠标移动<br>触发频率很高，要书写节流函数</td></tr><tr><td>mouseover</td><td>鼠标移入-可以触发事件冒泡</td></tr><tr><td>mouseenter</td><td>鼠标移入-不会触发事件冒泡</td></tr><tr><td>mouseout</td><td>鼠标移出-可以触发事件冒泡</td></tr><tr><td>mouseleave</td><td>鼠标移出-不会触发事件冒泡</td></tr></tbody></table><h2><span id="p3-jian-pan-shi-jian">3、键盘事件</span><a href="#p3-jian-pan-shi-jian" class="header-anchor">#</a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>keydown</td><td>键盘按下</td></tr><tr><td><strong>keyup</strong></td><td>键盘抬起（常用）</td></tr></tbody></table><p>如果是表单输入，则对表单绑定键盘事件。如果不是表单，则对document绑定键盘事件，控制其他元素。</p><p><code>keyCode</code> 对应键盘中对应键位的键值</p><p><code>shiftKey</code>、<code>ctrlKey</code>、<code>altKey</code> 是否按下对应按键 返回布尔值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出按键的ascii码值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-biao-dan-shi-jian">4、表单事件</span><a href="#p4-biao-dan-shi-jian" class="header-anchor">#</a></h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>input</td><td>当表单内容改变时触发</td></tr><tr><td>change</td><td>当表单内容改变并且失去焦点时候触发</td></tr></tbody></table><h2><span id="p5-gun-dong-tiao-shi-jian">5、滚动条事件</span><a href="#p5-gun-dong-tiao-shi-jian" class="header-anchor">#</a></h2><p><code>scroll</code> 元素滚动条在滚动时触发。</p><p><code>window.onscroll </code></p><h2><span id="p6-jia-zai-wan-cheng-shi-jian-chang-yong">6、加载完成事件（常用）</span><a href="#p6-jia-zai-wan-cheng-shi-jian-chang-yong" class="header-anchor">#</a></h2><p><code>load事件</code> 在资源加载完成后执行。</p><p><code>window.onload</code> 等待html所有的DOM节点，以及所有资源全部加载完成后执行。一个页面只能出现一次，因为<code>DOM0</code>级事件会覆盖。</p><h2><span id="p7-qi-ta">7、其他</span><a href="#p7-qi-ta" class="header-anchor">#</a></h2><p><code>window.onresize</code> 重置窗口大小时触发。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取视口大小封装函数</span><span class="token keyword">var</span> <span class="token function-variable function">getScreen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> w <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token operator">||</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        width<span class="token operator">:</span>w<span class="token punctuation">,</span>        height<span class="token operator">:</span>h   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>selectstart</code> 目标对象被开始选中时触发（选中动作刚开始，并未实质开始。）可用于屏蔽页面复制黏贴等。</p><h1><span id="san-shi-jian-chu-li-han-shu">三、事件处理函数</span><a href="#san-shi-jian-chu-li-han-shu" class="header-anchor">#</a></h1><h2><span id="p1-zhu-ce-shi-jian-addeventlistener">1、注册事件 - addEventListener</span><a href="#p1-zhu-ce-shi-jian-addeventlistener" class="header-anchor">#</a></h2><p><strong><code>addEventListener()</code></strong>  注册事件（事件处理函数）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">X</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数： </span><span class="token comment">// 1. 事件类型（不用加on）</span><span class="token comment">// 2. 处理函数</span><span class="token comment">// 3. Boolean 控制冒泡或捕获</span><span class="token comment">//    - false 冒泡</span><span class="token comment">//    - true 捕获</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-xiao-hui-shi-jian-removeeventlistener">2、销毁事件 - removeEventListener</span><a href="#p2-xiao-hui-shi-jian-removeeventlistener" class="header-anchor">#</a></h2><p><strong><code>removeEventListener()</code></strong> 销毁事件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">X</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span> type<span class="token punctuation">,</span> fn <span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">// - type 事件类型</span><span class="token comment">// - fn 函数</span><span class="token comment">// 如果要移除事件句柄，addEventListener() 的执行函数必须使用外部函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-jian-rong-xing-xiang-guan">3、兼容性相关</span><a href="#p3-jian-rong-xing-xiang-guan" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 封装</span><span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span> <span class="token parameter">e<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> boo</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> e<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> boo<span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token operator">+</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">[</span><span class="token string">"on"</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">removeEvent</span><span class="token punctuation">(</span> <span class="token parameter">e<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="wu-ding-shi-qi">五、定时器 △△</span><a href="#wu-ding-shi-qi" class="header-anchor">#</a></h1><p>JS是单线程语言，但它允许通过设置超时值和间歇时间值来调度代码在特定的时刻执行。**<a href>超时调用</a><strong>是在指定的时间过后执行代码（一次），而</strong><a href>间歇调用</a>**则是每隔指定的时间就执行一次代码。</p><h2><span id="p1-chao-shi-diao-yong-settimeout">1、超时调用 - setTimeout</span><a href="#p1-chao-shi-diao-yong-settimeout" class="header-anchor">#</a></h2><p>超时调用需要使用 <code>window</code> 对象的 <code>setTimeout()</code> 方法，能够在指定的时间段后执行特定代码。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> TimerID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> code<span class="token punctuation">,</span> delay <span class="token punctuation">[</span><span class="token punctuation">,</span>arg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">// code  -- 表示延迟执行的字符串型代码（或者函数）</span><span class="token comment">//          如果包含多个语句，应该使用分号间隔</span><span class="token comment">//          函数不用调用，只是书写函数</span><span class="token comment">// delay -- 延迟时间，单位毫秒</span><span class="token comment">// arg   -- 如果code是一个函数，则之后是任意多个参数</span><span class="token comment">// 返回值</span><span class="token comment">// TimeID 指向延迟执行的代码控制句柄。（唯一的）</span><span class="token comment">// 写法1</span><span class="token keyword">var</span> TimerID1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'var a=1;alert(a);'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写法2</span><span class="token keyword">var</span> TimerID2 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写法3</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> TimerID3 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传参方法1</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">"f(1,2)"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">// 传参方法2</span><span class="token keyword">var</span> b <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取消超时调用（特定条件）：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-jian-xie-diao-yong-setinterval">2、间歇调用 - setInterval</span><a href="#p2-jian-xie-diao-yong-setinterval" class="header-anchor">#</a></h2><p>方法是<code>setInterval()</code>，使用方法和超时调用基本相同。</p><p>取消方法是<code>clearInterval(timerID)</code>。</p><p>注意<strong>清除计时器</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 计时器的this指向</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一般都是指向 window</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="si-shi-jian-qi-ta">四、事件其他</span><a href="#si-shi-jian-qi-ta" class="header-anchor">#</a></h1><h2><span id="p1-domcontentloaded-shi-jian">1、DOMContentLoaded 事件</span><a href="#p1-domcontentloaded-shi-jian" class="header-anchor">#</a></h2><p>DOM2级事件，需要使用事件函数绑定。<strong>当DOM节点加载完成后即可执行，不需要等待加载资源。</strong></p><p>而 <code>window.onload</code> 是等待html所有的DOM节点，以及所有资源加载完成后才会执行。</p><h2><span id="p2-event-shi-jian-dui-xiang">2、event 事件对象</span><a href="#p2-event-shi-jian-dui-xiang" class="header-anchor">#</a></h2><p>由事件自动创建，记录当前事件的状态。</p><h2><span id="p3-shu-biao-de-event-shi-jian">3、鼠标的 event 事件</span><a href="#p3-shu-biao-de-event-shi-jian" class="header-anchor">#</a></h2><table><thead><tr><th></th><th>描述</th></tr></thead><tbody><tr><td><code>clientX</code> <code>clientY</code></td><td>浏览器窗口定位<br>原点是浏览器窗口左上角</td></tr><tr><td><code>offsetX</code> <code>offsetY</code></td><td>当前事件目标对象定位</td></tr><tr><td><code>screenX</code> <code>screenY</code></td><td>计算机屏幕定位</td></tr><tr><td><code>pageX</code> <code>pageY</code></td><td>文档定位</td></tr></tbody></table><p><img src="/images/2020/%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1.jpg" alt="鼠标事件对象"></p><h2><span id="p4-zu-zhi-chuan-bo">4、阻止传播 △</span><a href="#p4-zu-zhi-chuan-bo" class="header-anchor">#</a></h2><p><code>stopPropagation()</code> 现代浏览器</p><p><code>cancelBubble = true</code> IE低版本</p><h2><span id="p5-zu-zhi-mo-ren-shi-jian">5、阻止默认事件 △</span><a href="#p5-zu-zhi-mo-ren-shi-jian" class="header-anchor">#</a></h2><p>取消事件的默认操作，阻止默认事件。</p><p>（1）通用 <code>preventDefault()</code></p><p>（2）IE低版本 <code>returnValue = false</code></p><p>（3）<code>return false</code></p><h2><span id="p6-shi-jian-wei-tuo">6、事件委托 △</span><a href="#p6-shi-jian-wei-tuo" class="header-anchor">#</a></h2><p><strong>事件委托（delegate）</strong> 也称为事件托管、事件代理，就是把目标节点的事件绑定到祖先节点上。</p><p>原理：冒泡事件流。</p><p>优点：</p><ul><li>优化代码，提高效率</li><li>给未来的元素添加绑定</li></ul><h2><span id="p7-bu-chong-nei-rong">7、补充内容</span><a href="#p7-bu-chong-nei-rong" class="header-anchor">#</a></h2><p>禁止选择：<code>onselectstart=&quot;return false&quot;</code></p><p>使用场景：实现元素内文本不被选中</p><p>禁止拖放：<code>ondragstart=&quot;return false&quot;</code></p><p>使用场景：禁止鼠标在网页上拖动</p><p>禁止拷贝：<code>oncopy=&quot;return false&quot;</code></p><p>使用场景：很多网站上的页面内容是不允许复制的，这样可以防止用户或者程序恶意的去抓取页面数据。</p><p>禁止粘贴：<code>onpaste=&quot;return false&quot;</code></p><p>使用场景：网银转账时，输入对方卡号，需要输入两次，通常第二次输入的输入框是不允许粘贴的，这样就在一定程度上保证了卡号的准确性。</p><p>禁止剪贴：<code>oncut = &quot;return false&quot;</code></p><p>禁止鼠标右键：<code>oncontextmenu=&quot;return false&quot;</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 常用API</title>
      <link href="/02/18-JS%E6%89%A9%E5%B1%95/"/>
      <url>/02/18-JS%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-object-api">一、Object API</a><ul><li><a href="#object-assign">Object.assign()</a></li><li><a href="#object-keys">Object.keys()</a></li><li><a href="#object-prototype-hasownproperty">Object.prototype.hasOwnProperty()</a></li><li><a href="#object-freeze">Object.freeze()</a></li></ul></li><li><a href="#er-ke-li-hua">二、柯里化</a></li><li><a href="#san-proxy-he-reflect">三、Proxy和Reflect</a></li><li><a href="#si-eval">四、Eval</a></li><li><a href="#wu-dong-tai-import">五、动态import</a></li><li><a href="#liu-bao-zhuang-dui-xiang">六、包装对象</a></li></ul><!-- tocstop --></div><h1><span id="yi-object-api">一、Object API</span><a href="#yi-object-api" class="header-anchor">#</a></h1><h2><span id="pobject-assign">Object.assign()</span><a href="#pobject-assign" class="header-anchor">#</a></h2><h2><span id="pobject-keys">Object.keys()</span><a href="#pobject-keys" class="header-anchor">#</a></h2><p>基本语法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span> obj<span class="token punctuation">)</span><span class="token comment">/* 参数- obj 要返回其枚举自身属性的对象。返回值: 一个表示给定对象的所有 可枚举 属性的字符串数组。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 参数是 一个数组时</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['0', '1', '2']</span><span class="token comment">// 参数是 一个伪数组时</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  ['0', '1', '2']</span><span class="token keyword">let</span> anObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">100</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token string">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>anObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// console: ['2', '7', '100']</span><span class="token keyword">var</span> myObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  getFoo<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// console: ['foo']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想获取一个对象的所有属性,，甚至包括不可枚举的，请查看<code>Object.getOwnPropertyNames</code>。</p><p>ES5里，如果此方法的参数不是对象（而是一个原始值），那么它会抛出 TypeError。在ES6中，非对象的参数将被强制转换为一个对象。</p><h2><span id="pobject-prototype-hasownproperty">Object.prototype.hasOwnProperty()</span><a href="#pobject-prototype-hasownproperty" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 判断 属性 是否在obj的实例对象上</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="pobject-freeze"></span><a href="#pobject-freeze" class="header-anchor">#</a></h2><p><strong><code>Object.freeze()</code></strong> 方法可以<strong>冻结</strong>一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。<code>freeze()</code> 返回和传入的参数相同的对象。</p><h1><span id="er-ke-li-hua">二、柯里化</span><a href="#er-ke-li-hua" class="header-anchor">#</a></h1><p><strong>柯里化</strong>（Currying），是一种函数的转换，它是指将一个函数从可调用的 <code>f(a, b, c)</code> 转换为可调用的 <code>f(a)(b)(c)</code>。柯里化不会调用函数。它只是对函数进行转换。</p><h1><span id="san-proxy-he-reflect">三、Proxy和Reflect</span><a href="#san-proxy-he-reflect" class="header-anchor">#</a></h1><p><a href="https://zh.javascript.info/proxy">参考</a></p><h1><span id="si-eval">四、Eval</span><a href="#si-eval" class="header-anchor">#</a></h1><p>执行代码字符串。</p><h1><span id="wu-dong-tai-import">五、动态import</span><a href="#wu-dong-tai-import" class="header-anchor">#</a></h1><ul><li><code>import</code> 函数的参数，指定所要加载的模块的位置。</li><li><code>import </code>命令能够接受什么参数，<code>import() </code>函数就能接受什么参数，两者区别主要是后者为动态加载</li><li><code>import()</code>返回一个 Promise 对象。</li><li>它是运行时执行，也就是说，什么时候运行到这一句，就会加载指定的模块</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./a.js"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>//a.jsconsole.log('a.js执行了~');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="liu-bao-zhuang-dui-xiang">六、包装对象</span><a href="#liu-bao-zhuang-dui-xiang" class="header-anchor">#</a></h1><p>在JS中，提供了三个特殊的构造函数<code>Number</code>、<code>String</code>、<code>Boolean</code>，可以使用new来操作，会生成对应类型的对象。（实际开发中不用）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这确实是一个对象</span><span class="token comment">// 被当成对象</span><span class="token comment">// __proto__指向原型对象。原型方法有大量的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行过程：</p><ol><li>声明了一个字符串放入了str中。</li><li>当发现你把str当做对象调用时，js内部会自动调用<code>new String('abc')</code>创建了一个对象（字符串对象，包装对象）；</li><li>然后使用包装对象的属性、方法。当使用完成之后，又会将包装对象转换成字符串。</li></ol><p><code>number</code>、<code>boolean</code>、<code>string</code> 都会经过上面的过程。</p><p>普通对象和包装对象的区别：主要针对对象的<strong>生命周期</strong>。</p><ul><li>使用 new 操作符创建的引用类型的实例，在执行流离开之前的作用域中将会一直存在。</li><li>自动创建的基本包装类型对象，只存在于那一行代码的执行的一瞬间，然后立即销毁了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS API（2）</title>
      <link href="/02/17-JS_API2/"/>
      <url>/02/17-JS_API2/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-json">一、JSON</a><ul><li><a href="#1-zhi">1、值</a></li><li><a href="#2-fang-fa">2、方法</a><ul><li><a href="#1-json-stringify">（1）JSON.stringify()</a></li><li><a href="#2-json-parse">（2）JSON.parse()</a></li></ul></li></ul></li><li><a href="#er-date">二、Date</a><ul><li><a href="#1-ji-ben-shi-yong">1、基本使用</a></li><li><a href="#2-shi-jian-chuo">2、时间戳</a></li><li><a href="#3-she-zhi-shi-jian">3、设置时间</a></li><li><a href="#4-shi-jian-huo-qu">4、时间获取</a></li><li><a href="#5-she-zhi-dan-du-de-shi-jian">5、设置单独的时间</a></li><li><a href="#6-shi-li">6、示例</a></li></ul></li><li><a href="#san-math">三、Math</a><ul><li><a href="#1-jin-zhi">1、进制</a></li><li><a href="#2-qu-zheng">2、取整</a></li><li><a href="#3-zui-zhi">3、最值</a></li><li><a href="#4-shu-xue-yun-suan">4、数学运算</a></li><li><a href="#5-bu-chong">5、补充</a></li><li><a href="#6-sheng-cheng-zhi-ding-fan-wei-de-sui-ji-shu">6、生成指定范围的随机数</a></li><li><a href="#7-sheng-cheng-wei-yi-de-sui-ji-zi-fu-chuan">7、生成唯一的随机字符串</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-json">一、JSON</span><a href="#yi-json" class="header-anchor">#</a></h1><p><strong>JSON</strong> 是ES内置对象（不用定义就能用）。</p><p>json 是一种常用于前后端数据交互的格式，本质是字符串。</p><h2><span id="p1-zhi">1、值</span><a href="#p1-zhi" class="header-anchor">#</a></h2><p>可以表示三种类型数据：</p><p>（1）简单值</p><p>除了 <code>undefined</code> 之外的基本数据类型，<strong>表示字符串必须使用双引号。</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">5&quot;hello world&quot;   &#x2F;&#x2F;表示字符串需加双引号nullfalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）对象 表示的是一组无序的键值对，属性必须用双引号包起来。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;    &quot;name&quot;:&quot;Tom&quot;,    &quot;age&quot;&quot;18&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）数组 有序的集合、键值对。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">[25, &quot;hi&quot;, true]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-fang-fa">2、方法</span><a href="#p2-fang-fa" class="header-anchor">#</a></h2><p>用于前后台发送数据。</p><h3><span id="p-1-json-stringify">（1）JSON.stringify()</span><a href="#p-1-json-stringify" class="header-anchor">#</a></h3><p>将JS值序列化为JSON字符串。</p><p>函数，原型成员，undefined会被忽略。</p><h3><span id="p-2-json-parse">（2）JSON.parse()</span><a href="#p-2-json-parse" class="header-anchor">#</a></h3><p>将JSON字符串解析成原生的JS值。</p><p>不是有效的JSON字符串就会报错。</p><h1><span id="er-date">二、Date</span><a href="#er-date" class="header-anchor">#</a></h1><p><code>Date</code> 是JS中用来处理<strong>日期和时间</strong>的内置对象。</p><p><a href="http://doc.lipeihua.vip:8800/#/./JS%E5%9F%BA%E7%A1%80/11.Date%E5%AF%B9%E8%B1%A1">参考链接</a></p><h2><span id="p1-ji-ben-shi-yong">1、基本使用</span><a href="#p1-ji-ben-shi-yong" class="header-anchor">#</a></h2><p>获取一个Date对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token comment">// 2020-08-26T12:11:25.743Z</span><span class="token keyword">typeof</span> now <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个时间</p><ul><li>传入一个毫秒数（会把毫秒数转换成一个时间c  然后加上1970年1月1日 8：00 的时间）</li><li>传入一个字符串格式的时间</li><li>传入多个参数 分别代表年 月 日 时 分 秒 毫秒</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1546354578234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-10-01 8:0:0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-10-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果不写时间 只写年月日 那么时间按照00点来计算</span><span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"8:0:0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Invalid Date 如果不写年月日 那么时间是错误的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当数字形式传递或者获取月份的时候，月份是从0开始算  0 代表 1月</span><span class="token keyword">var</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间超出分为 会自动向前进一位  但是不建议这么写</span><span class="token keyword">var</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-shi-jian-chuo">2、时间戳</span><a href="#p2-shi-jian-chuo" class="header-anchor">#</a></h2><p><strong>时间戳</strong>是一个整数，保存1970年1月1日到现在的毫秒数。</p><p>获取时间戳方法</p><ul><li><code>Date.now()</code></li><li><code>new Date().getTime()</code></li><li><code>Date.parse(new Date())</code></li><li><code>new Date().valueOf()</code></li></ul><h2><span id="p3-she-zhi-shi-jian">3、设置时间</span><a href="#p3-she-zhi-shi-jian" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取当前的时间戳</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前时间</span><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// now => 2020-07-14T06:00:41.645Z</span><span class="token comment">// 作为构造函数使用</span><span class="token keyword">let</span> dt  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>年<span class="token punctuation">,</span>月<span class="token punctuation">,</span>日<span class="token punctuation">,</span><span class="token punctuation">[</span>时<span class="token punctuation">,</span>分<span class="token punctuation">,</span>秒<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动校准机制，超过范围的会自动换算。</p><h2><span id="p4-shi-jian-huo-qu">4、时间获取</span><a href="#p4-shi-jian-huo-qu" class="header-anchor">#</a></h2><table><thead><tr><th>方法</th><th>功能</th><th>范围</th></tr></thead><tbody><tr><td><code>getFullYear()</code></td><td>获得四位年份</td><td></td></tr><tr><td><code>getMonth()</code></td><td>获取月份</td><td><strong>0-11</strong></td></tr><tr><td><code>getDate()</code></td><td>获取月份中的天数</td><td>1-31</td></tr><tr><td><code>getDay()</code></td><td>获取星期，0表示周日</td><td>0-6</td></tr><tr><td><code>getHours()</code></td><td>小时</td><td>0-23</td></tr><tr><td><code>getMinutes()</code></td><td>分钟</td><td>0-59</td></tr><tr><td><code>getSeconds()</code></td><td>秒数</td><td>0-59</td></tr><tr><td><code>getMilliseconds()</code></td><td>毫秒数</td><td>0-999</td></tr></tbody></table><h2><span id="p5-she-zhi-dan-du-de-shi-jian">5、设置单独的时间</span><a href="#p5-she-zhi-dan-du-de-shi-jian" class="header-anchor">#</a></h2><ul><li>设置年份 setFullYear</li><li>设置月份 setMonth</li><li>设置日 setDate</li><li>设置小时 setHours</li><li>设置分钟 setMinutes</li><li>设置秒 setSeconds</li><li>设置毫秒 setMilliseconds</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>设置时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置年份</span>    now<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置月份</span>    now<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置日期</span>    now<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置 小时</span>    now<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置分钟</span>    now<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置秒</span>    now<span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置毫秒</span>    now<span class="token punctuation">.</span><span class="token function">setMilliseconds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>    <span class="token comment">//设置星期  不允许 没有这个方法</span>    now<span class="token punctuation">.</span><span class="token function">setDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置一个3天后的当前时间</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//设置一个3天后的当前时间</span><span class="token comment">/* //获取当前时间 var now = new Date(); //获取当前时间的日期 var nowDate = now.getDate(); //让当前的日期 加上3 newDate = nowDate+3; // 获取一个当前的时间，然后把当前时间的日期 设置为newDate // console.log(newDate) var newTime = new Date(); newTime = newTime.setDate(newDate); console.log(newTime);*/</span> <span class="token keyword">var</span> threeDatLast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> threeDatLast<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>threeDatLast<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p6-shi-li">6、示例</span><a href="#p6-shi-li" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取类似 2020-08-08 12:04:56 格式的字符串</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>        <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-math">三、Math</span><a href="#san-math" class="header-anchor">#</a></h1><h2><span id="p1-jin-zhi">1、进制</span><a href="#p1-jin-zhi" class="header-anchor">#</a></h2><p>（1）进制表示</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 二进制</span><span class="token number">0b101</span><span class="token comment">// 八进制</span><span class="token number">0o123</span><span class="token comment">// 十六进制</span><span class="token number">0x123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）进制转换（待补充）</p><h2><span id="p2-qu-zheng">2、取整</span><a href="#p2-qu-zheng" class="header-anchor">#</a></h2><p>将小数转换成整数，如果是整数则不改变。</p><ul><li><code>Math.ceil()</code>  进一取整</li><li><code>Math.floor()</code> 舍一取整</li><li><code>Math.round()</code>  标准的四舍五入</li></ul><h2><span id="p3-zui-zhi">3、最值</span><a href="#p3-zui-zhi" class="header-anchor">#</a></h2><p><code>Math.max()</code> <code>Math.min()</code> 获取一个参数列表的最大值，最小值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取一个数组的最值</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment">// ES5</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ES6</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-shu-xue-yun-suan">4、数学运算</span><a href="#p4-shu-xue-yun-suan" class="header-anchor">#</a></h2><p><code>Math.abs()</code>  取绝对值</p><p><code>Math.pow(底数，次方)</code> <code>**</code> 幂运算</p><p><code>Math.PI</code> 圆周率π</p><p><code>Math.random()</code> 返回大于等于0小于1的一个随机数</p><p><code>Math.sign()</code>   判断正负<br>正数 <code>1</code><br>零或者 <code>null</code>  <code>0</code><br>负数 <code>-1</code><br>其他 <code>NaN</code></p><p><code>Math.sqrt()</code> <code>Math.cbrt()</code> <code>Math.hypot(3, 4)==5</code>  平分根、立方根</p><h2><span id="p5-bu-chong">5、补充</span><a href="#p5-bu-chong" class="header-anchor">#</a></h2><p>去掉小数部分 <code>Math.trunc()</code></p><h2><span id="p6-sheng-cheng-zhi-ding-fan-wei-de-sui-ji-shu">6、生成指定范围的随机数</span><a href="#p6-sheng-cheng-zhi-ding-fan-wei-de-sui-ji-shu" class="header-anchor">#</a></h2><p><code>Math.floor (Math. random()*( MAX-MIN+1 ) + MIN)</code></p><h2><span id="p7-sheng-cheng-wei-yi-de-sui-ji-zi-fu-chuan">7、生成唯一的随机字符串</span><a href="#p7-sheng-cheng-wei-yi-de-sui-ji-zi-fu-chuan" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">uniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// substring去掉.</span>  <span class="token keyword">const</span> randomNum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// .toString(32) 转换为32进制</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>randomNum <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 面向对象</title>
      <link href="/02/16-JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/02/16-JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-mian-xiang-dui-xiang-ji-ben-gai-nian">一、面向对象基本概念</a></li><li><a href="#er-dui-xiang-de-chuang-jian-he-shi-yong">二、对象的创建和使用</a><ul><li><a href="#1-sheng-ming-yi-ge-dui-xiang">1、声明一个对象</a><ul><li><a href="#1-1-zi-mian-liang-fang-shi-sheng-ming">1.1 字面量方式声明</a></li><li><a href="#1-2-gou-zao-han-shu-fang-shi-sheng-ming">1.2 构造函数方式声明</a></li><li><a href="#1-3-gong-han-mo-shi-sheng-ming">1.3 工厂模式声明</a></li><li><a href="#1-4-object-create">1.4 Object.create</a></li></ul></li><li><a href="#2-dui-xiang-de-shi-yong">2、对象的使用</a><ul><li><a href="#2-1-fang-wen-dui-xiang-zhong-de-shu-xing">2.1 访问对象中的属性</a></li><li><a href="#2-2-zeng-jia-he-xiu-gai-shu-xing">2.2 增加和修改属性</a></li><li><a href="#2-3-shan-chu-shu-xing">2.3 删除属性</a></li></ul></li><li><a href="#3-chuang-jian-mo-shi">3、创建模式</a></li></ul></li><li><a href="#san-yuan-xing">三、原型 △</a><ul><li><a href="#1-han-shu-de-prototype-shu-xing-xian-shi-yuan-xing">1. 函数的 prototype 属性（显式原型）</a></li><li><a href="#2-shi-li-dui-xiang-de-proto-shu-xing-yin-shi-yuan-xing">2. 实例对象的 <code>__proto__</code> 属性（隐式原型）</a></li><li><a href="#3-yuan-xing-lian">3. 原型链 △△</a></li></ul></li><li><a href="#si-ji-cheng">四、继承</a><ul><li><a href="#1-gou-zao-han-shu-ji-cheng">1. 构造函数继承</a></li><li><a href="#2-yuan-xing-lian-ji-cheng">2. 原型链继承</a></li><li><a href="#3-hun-he-ji-cheng">3. 混合继承 △</a></li></ul></li><li><a href="#liu-dui-xiang-de-bian-li">六、对象的遍历</a><ul><li><a href="#1-die-dai-qi-iterator">1、迭代器 iterator △</a><ul><li><a href="#2-for-of">2、for … of</a></li><li><a href="#2-for-in">2、for … in</a></li></ul></li></ul></li><li><a href="#qi-jie-gou-fu-zhi">七、解构赋值</a></li><li><a href="#ba-cun-chu-qi-shu-xing-getter-setter">八、存储器属性 getter、setter</a></li><li><a href="#jiu-dui-xiang-de-bu-chong">九、对象的补充</a><ul><li><a href="#1-instanceof-cao-zuo-fu">1、instanceof 操作符</a></li><li><a href="#2-new-yun-suan-fu-liu-cheng">2、new 运算符流程</a></li><li><a href="#3-dui-xiang-de-kao-bei">3、对象的拷贝</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-mian-xiang-dui-xiang-ji-ben-gai-nian">一、面向对象基本概念</span><a href="#yi-mian-xiang-dui-xiang-ji-ben-gai-nian" class="header-anchor">#</a></h1><p><strong>面向对象</strong>和<strong>面向过程</strong>是两种截然不同的编程思想和方法。面向过程是以过程为中心，就像流水线一样设计程序的思想。面向对象是以对象为中心的编程思想。更符合人类的思维习惯。</p><p>在面向对象的概念中，<strong>类</strong>是一类相似事物的统称，对象是类的实例化，类是对象的模版。（JS中没有具体类的概念，ES6 引入的类实际上是函数。）</p><p>面向对象的三个基本特性: <strong>封装、继承、多态</strong>。</p><p><strong>对象（Object）</strong> 可以是一个变量，一个函数，一种数据结构。在JS中，一切皆为对象。JS允许自定义对象，从狭义的概念来分析，对象是最基本的数据类型，是复合型的结构、引用型的数据，它是无序数据集合。对象中每个成员被称为<strong>属性</strong>。对象是无序的键值对，数组是有序的键值对，函数是一种可执行的特殊对象。</p><p><strong>实例对象</strong> 与 <strong>函数对象</strong>。</p><h1><span id="er-dui-xiang-de-chuang-jian-he-shi-yong">二、对象的创建和使用</span><a href="#er-dui-xiang-de-chuang-jian-he-shi-yong" class="header-anchor">#</a></h1><h2><span id="p1-sheng-ming-yi-ge-dui-xiang">1、声明一个对象</span><a href="#p1-sheng-ming-yi-ge-dui-xiang" class="header-anchor">#</a></h2><h3><span id="p1-1-zi-mian-liang-fang-shi-sheng-ming">1.1 字面量方式声明</span><a href="#p1-1-zi-mian-liang-fang-shi-sheng-ming" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token function-variable function">sleep</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 函数体</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字面量方式声明的对象由多个<strong>键值对</strong>组成，每个键值对之间用逗号分隔。每个键值对就是一个<strong>属性</strong>，包括属性名和属性值。</p><p>属性名是字符串并且通常情况下不加引号，如果是其他类型也会转换成字符串。如果键名不符合变量命名规则必须加上引号。</p><p>属性值可以是任意类型，包括对象。</p><h3><span id="p1-2-gou-zao-han-shu-fang-shi-sheng-ming">1.2 构造函数方式声明</span><a href="#p1-2-gou-zao-han-shu-fang-shi-sheng-ming" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">          <span class="token comment">// 构造函数</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">;</span>    <span class="token function-variable function">sleep</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>new</code> 是操作符，调用后面的 <strong>构造函数</strong> 创建一个对象（字面量方式创建对象也会在内部调用<code>new Object</code>）。</p><p>构造函数可以使用return语句，如果return的是基本类型数据，那么值会被忽略。如果返回的是其他对象，那么就返回这个对象。</p><p>函数既是对象也是可以执行的代码块：</p><ul><li>在对象方面来说它也有属性和方法。</li><li>从代码块方面来说，既可以执行特定的代码块（普通函数），又可以创建特定类型的对象（函数的构造调用）<ul><li>普通函数，没有return返回的是undefined，return返回的是指定的值。</li><li>函数的构造调用，没有return，返回的是新生成的对象。有的话看是基本数据类型还是对象。</li></ul></li></ul><h3><span id="p1-3-gong-han-mo-shi-sheng-ming">1.3 工厂模式声明</span><a href="#p1-3-gong-han-mo-shi-sheng-ming" class="header-anchor">#</a></h3><p>上面两种声明对象的最大缺点就是代码重复，会产生大量重复的代码。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 一般要首字母大写</span><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p1-4-object-create">1.4 Object.create</span><a href="#p1-4-object-create" class="header-anchor">#</a></h3><p><code>Object.create( prototype, descriptors)</code></p><p>ES5新增的一个静态方法，用来定义一个实例对象。</p><ul><li>参数<code>prototype</code> 必须是一个已有对象或者<code>null</code>，是新创建这个对象的原型对象。指定原型对象，继承方式。==</li><li>参数<code>descriptors</code> 可选，设置新创建的对象。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建一个以已有对象obj为原型变量的对象</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> Objcet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">// 创建一个普通对象（字面量）</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>protype<span class="token punctuation">)</span><span class="token comment">// 创建一个干净的对象</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">// 创建一个干净的对象并设置</span><span class="token keyword">var</span> obj4 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token comment">// 对象的特性描述必须是一个对象</span>        value<span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span>         <span class="token comment">// 指定属性值</span>        writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment">// 设置值是否可写，默认false</span>        enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment">// 设置属性是否可以枚举（遍历），默认</span>        configurable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment">// 设置属性是否可修改特性和删除特性，默认</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-dui-xiang-de-shi-yong">2、对象的使用</span><a href="#p2-dui-xiang-de-shi-yong" class="header-anchor">#</a></h2><h3><span id="p2-1-fang-wen-dui-xiang-zhong-de-shu-xing">2.1 访问对象中的属性</span><a href="#p2-1-fang-wen-dui-xiang-zhong-de-shu-xing" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一种方法</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">// 第二种方法，最大优点是可以通过变量、表达式来访问属性</span>obj<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 1. 如果键名命名不符合标识符命名规则</span><span class="token comment">// 则只能通过第二种方法访问。</span><span class="token comment">// 2. 点操作符比比中括号操作符高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-2-zeng-jia-he-xiu-gai-shu-xing">2.2 增加和修改属性</span><a href="#p2-2-zeng-jia-he-xiu-gai-shu-xing" class="header-anchor">#</a></h3><p><strong><code>Object.defineProperty(obj, prop, descriptors)</code></strong></p><p>给对象添加属性或者修改现有属性（可以设置属性的描述）</p><p>参数<code>prop</code> 要修改的属性，要加字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 例子</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    value<span class="token operator">:</span> <span class="token string">"Java"</span><span class="token punctuation">,</span>    <span class="token comment">// 如果这个属性的正常创建的，则正常使用，如枚举</span>    <span class="token comment">// wriable, enumerable, configurable </span>    <span class="token comment">// 同 Object.create</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Object.defineProperties( obj, descriptors)</code></strong></p><p>可以同时设置多个属性，格式和<code>Object.create()</code>基本相同。</p><h3><span id="p2-3-shan-chu-shu-xing">2.3 删除属性</span><a href="#p2-3-shan-chu-shu-xing" class="header-anchor">#</a></h3><p><code>delete 对象.属性</code></p><blockquote><p><strong>变量带var和不带var的区别</strong></p><p>window对象是JS中最顶层对象。在全局中声明的变量（即带var的）会作为window对象的属性（变量）。不带var的变量也会被作为window对象的属性，他只是window对象的属性。var声明的全局变量不能使用delete删除，但是不带var的所谓全局变量可以用delete删除，因为它只是属性。</p></blockquote><h2><span id="p3-chuang-jian-mo-shi">3、创建模式</span><a href="#p3-chuang-jian-mo-shi" class="header-anchor">#</a></h2><p>（1）构造函数模式</p><p>先创建空对象，再动态添加属性和方法</p><p>适用于 起始不能确定对象内部数据</p><p>问题 语句太多</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ver p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）对象字面量模式</p><p>使用<code>&#123; &#125;</code>创建对象，同时指定属性和方法</p><p>适用于 起始时对象内部数据是确定的</p><p>问题 如果创建多个对象，有重复代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）工厂模式</p><p>通过工厂函数动态创建对象并返回</p><p>适用于 需要创建多个对象</p><p>问题 对象没有一个具体的类型，都是 Object 类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          name<span class="token operator">:</span> name<span class="token punctuation">,</span>          age<span class="token operator">:</span> age<span class="token punctuation">,</span>          <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）自定义构造函数模式</p><p>自定义构造函数，通过 <code>new</code> 创建对象</p><p>适用 需要多个类型确定的对象</p><p>问题 每个对象都有相同的数据，浪费内存</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在构造函数中书写的属性和方法都是实例化对象私有</span>    <span class="token comment">// 每个实例化对象在构造函数中的属性方法都不一样</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Tom2'</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）构造函数 + 原型的组合模式</p><p>自定义构造函数，属性在函数中初始化，方法添加到原型上</p><p>适用 需要创建多个类型确定的对象</p><p>属性一般来说都是对象私有的，而方法基本上都是对象公有的。</p><p>构造函数模式用于定义实例属性，原型模式用于定义方法和共享的属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 属性一般来说都是私有的</span><span class="token comment">// 并且只有在构造函数中才能给对象的属性传参</span><span class="token comment">// 方法基本上都是公有的</span><span class="token comment">// 所以方法基本写在原型对象上</span><span class="token keyword">function</span> <span class="token function">Person</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'JAck'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'TOM3'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-yuan-xing">三、原型 △</span><a href="#san-yuan-xing" class="header-anchor">#</a></h1><p>当我们用<code>obj.xxx</code>访问一个对象的属性时，JS 引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到 <code>Object.prototype</code> 对象，最后，如果还没有找到，就只能返回<code>undefined</code>。</p><h2><span id="p1-han-shu-de-prototype-shu-xing-xian-shi-yuan-xing">1. 函数的 prototype 属性（显式原型）</span><a href="#p1-han-shu-de-prototype-shu-xing-xian-shi-yuan-xing" class="header-anchor">#</a></h2><p>每个函数在创建的时候都会创建一个 <strong><code>prototype</code></strong> 属性（指针），指向函数的<strong>原型对象</strong>。该属性中存储的是一个对象的引用（默认是一个空对象）。</p><blockquote><p>Foo.prototype === Foo 的原型对象</p></blockquote><p>在原型对象中也有一个属性叫 <strong><code>constructor</code></strong> ，指向的是拥有这个原型对象的<a href>构造函数</a>。</p><blockquote><p>Foo.prototype.constructor === Foo</p></blockquote><p><img src="/images/2020/%E5%8E%9F%E5%9E%8B.jpg" alt="原型"></p><p>prototype 属性只有在函数被当做构造函数调用的时候（函数的构造调用）才会生效。<strong>由同一个构造函数生成的各个实例对象之间共享属性和方法。</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>fun<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">// 是一个object</span>fun<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> fun<span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-shi-li-dui-xiang-de-proto-shu-xing-yin-shi-yuan-xing">2. 实例对象的 <code>__proto__</code> 属性（隐式原型）</span><a href="#p2-shi-li-dui-xiang-de-proto-shu-xing-yin-shi-yuan-xing" class="header-anchor">#</a></h2><p>当调用构造函数创建一个新实例之后，该实例内部将包含一个内部属性 <strong><code>__proto__</code></strong>，指向构造函数的原型对象。<strong>实例化之后才能用</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 构造函数中给this扩展的属性是私有的</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xxx"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// f1是fun的实例化对象</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"18"</span>f1<span class="token punctuation">.</span>age <span class="token comment">// 18</span><span class="token comment">// f1上面没有age所以通过f1的__proto__属性</span><span class="token comment">// 找到f的构造函数的原型对象</span><span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> f1<span class="token punctuation">.</span>__proto__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数中的 prototype 属性（显示原型）和构造函数实例化出来的对象 <code>__proto__</code>属性（隐式原型）指向同一个对象。</p><p>先在本对象中查找对应的属性，找不到去 <code>__proto__</code> 里面找。</p><p>在原型中查找值的过程是搜索。对原型对象所做的任何修改都能立即从实例上反映出来。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">==</span> p<span class="token punctuation">.</span>__proto__ <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原型分为 <strong>显式原型</strong>（构造函数的prototype属性） 和 <strong>隐式原型</strong>（调用构造函数实例化出来的对象的<code>__proto__</code>属性）。（ES5只允许操作 prototype，ES6都可以）</p><h2><span id="p3-yuan-xing-lian">3. 原型链 △△</span><a href="#p3-yuan-xing-lian" class="header-anchor">#</a></h2><p><strong>原型链</strong>是实现<strong>继承</strong>的主要方法。</p><p>构造函数、原型和实例的关系 每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例。显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的<strong>原型链</strong>的基本概念。<strong>原型链的终点是 null。</strong></p><p><img src="/images/2020/%E7%BB%88%E6%9E%81%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg" alt="终极原型链"></p><h1><span id="si-ji-cheng">四、继承</span><a href="#si-ji-cheng" class="header-anchor">#</a></h1><p><strong>继承</strong>是子类对象能够使用父类对象的数据和方法。</p><h2><span id="p1-gou-zao-han-shu-ji-cheng">1. 构造函数继承</span><a href="#p1-gou-zao-han-shu-ji-cheng" class="header-anchor">#</a></h2><h2><span id="p2-yuan-xing-lian-ji-cheng">2. 原型链继承</span><a href="#p2-yuan-xing-lian-ji-cheng" class="header-anchor">#</a></h2><p>子类型的原型为父类型的一个实例对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父类型</span><span class="token keyword">function</span> <span class="token function">Supper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>superProp <span class="token operator">=</span> <span class="token string">'The super prop'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 原型的数据所有的实例对象都可见</span><span class="token class-name">Supper</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSupperProp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>superProp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类型</span><span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subProp <span class="token operator">=</span> <span class="token string">'The sub prop'</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类的原型为父类的实例</span><span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 修正原型链</span><span class="token comment">// 修正 Sub.prototype.constructor 为 Sub本身</span><span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub<span class="token class-name">Sub</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">showSubProp</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subProp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建子类型的实例</span><span class="token keyword">var</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 调用父类型的方法</span>sub<span class="token punctuation">.</span><span class="token function">showSubProp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 调用子类型的方法</span>sub<span class="token punctuation">.</span><span class="token function">showSupperProp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-hun-he-ji-cheng">3. 混合继承 △</span><a href="#p3-hun-he-ji-cheng" class="header-anchor">#</a></h2><p>继承的主要方式。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 父类型（构造模式）</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span> <span class="token parameter">name</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 父类型（原型模式）</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span> <span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// △ key1 继承属性 △</span>    <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承方法</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// △ 修正原型链 △</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> SubType<span class="token punctuation">;</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例化对象</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">syaAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="liu-dui-xiang-de-bian-li">六、对象的遍历</span><a href="#liu-dui-xiang-de-bian-li" class="header-anchor">#</a></h1><h2><span id="p1-die-dai-qi-iterator">1、迭代器 iterator △</span><a href="#p1-die-dai-qi-iterator" class="header-anchor">#</a></h2><p>遍历器（迭代器，iterator）</p><p>统一的接口来遍历 Array Object Map Set</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 返回值 </span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                   done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否遍历完成</span>                   value<span class="token operator">:</span> arr<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                   done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 完成了</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-for-of">2、for … of</span><a href="#p2-for-of" class="header-anchor">#</a></h3><h3><span id="p2-for-in">2、for … in</span><a href="#p2-for-in" class="header-anchor">#</a></h3><p><code>for...in</code> 用来遍历自身和原型链中可枚举的属性。</p><p>不关对象本身的属性能被遍历，在对象的原型链上的属性也能被遍历。</p><blockquote><p>千万不要用这个遍历数组，虽然数组也是对象，但是数组的索引只是具有整数名称的枚举属性，这个不能保证遍历的顺序，而数组的最重要特征就是有序。</p></blockquote><h1><span id="qi-jie-gou-fu-zhi">七、解构赋值</span><a href="#qi-jie-gou-fu-zhi" class="header-anchor">#</a></h1><p>（1）数组的解构赋值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 一一对应</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// 解构失败返回 undefined</span><span class="token comment">// 允许不完全解构</span><span class="token comment">// 可以设置默认值(没有对应关系时)</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token operator">=</span><span class="token string">"qwq"</span><span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// 想把后面没有解构的值保存起来(rest参数必须是最后)</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> <span class="token operator">...</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// 多维数组保证一一对应也能解构</span><span class="token comment">// 交换两个变量</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 例子</span><span class="token keyword">let</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> hoo<span class="token punctuation">,</span> hoo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 报错 cannot access ‘hoo' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）对象的解构赋值（用的很多） △</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 对象没有顺序，直接取 对应的方法 （保证同名，key）</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">&#125;</span> <span class="token operator">=</span> console<span class="token punctuation">;</span><span class="token comment">// 如果键名key和键值value是一样的，则可以直接简写</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    hoo<span class="token operator">:</span> <span class="token string">"hoo"</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    hoo<span class="token punctuation">,</span>    foo<span class="token punctuation">&#125;</span><span class="token comment">// 也能设置默认值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）应用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、函数多个返回值返回</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> hoo<span class="token operator">:</span> <span class="token string">"word"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> foo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2、函数传参数</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3.json数据的提取</span><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"lily"</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">"nv"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">&#125;</span> <span class="token operator">=</span> json<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="ba-cun-chu-qi-shu-xing-getter-setter">八、存储器属性 getter、setter</span><a href="#ba-cun-chu-qi-shu-xing-getter-setter" class="header-anchor">#</a></h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    first<span class="token operator">:</span> <span class="token string">"李"</span><span class="token punctuation">,</span>    last<span class="token operator">:</span> <span class="token string">"沛华"</span>    <span class="token comment">// getter</span>    <span class="token comment">// 一个对象可以有多个存储器属性</span>    <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>first<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">,</span>last<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// setter</span><span class="token comment">// ！一定要有参数</span><span class="token keyword">set</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> nameArr <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> obj1<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 李沛华</span>obj1<span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token string">"闫 海静"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面用于 vue 数据双向绑定原理。</p><h1><span id="jiu-dui-xiang-de-bu-chong">九、对象的补充</span><a href="#jiu-dui-xiang-de-bu-chong" class="header-anchor">#</a></h1><h2><span id="p1-instanceof-cao-zuo-fu">1、instanceof 操作符</span><a href="#p1-instanceof-cao-zuo-fu" class="header-anchor">#</a></h2><p>第一个变量是对象，第二个变量是函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">a <span class="token keyword">instanceof</span> <span class="token class-name">b</span> <span class="token comment">// a 沿着 __proto__ ， b 沿着 prototype  一直找</span><span class="token comment">// 找到相交的地方返回 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所有引用类型都是 Object 的实例，所以在检测引用类型和 Object 都会返回 true。所有基本类型都不是对象，使用会返回 <code>false</code>。</p><h2><span id="p2-new-yun-suan-fu-liu-cheng">2、new 运算符流程</span><a href="#p2-new-yun-suan-fu-liu-cheng" class="header-anchor">#</a></h2><ol><li><p>创建对象，开辟内存空间（堆）</p></li><li><p>设置原型链</p></li><li><p>this指向该内存</p></li><li><p>执行函数代码</p></li><li><p>将创建对象实例返回</p></li></ol><h2><span id="p3-dui-xiang-de-kao-bei">3、对象的拷贝</span><a href="#p3-dui-xiang-de-kao-bei" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 函数</title>
      <link href="/02/15-JS%E5%87%BD%E6%95%B0/"/>
      <url>/02/15-JS%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-ji-ben-de-han-shu">一、基本的函数</a><ul><li><a href="#1-han-shu-de-zuo-yong">1、函数的作用</a></li><li><a href="#2-ding-yi-han-shu">2、定义函数</a><ul><li><a href="#2-1-sheng-ming-han-shu">2.1 声明函数</a></li><li><a href="#2-2-han-shu-biao-da-shi-ni-ming-han-shu-shi">2.2 函数表达式，匿名函数式</a></li><li><a href="#2-3-gou-zao-han-shu-shi">2.3 构造函数式</a></li></ul></li><li><a href="#3-shi-yong-han-shu">3、使用函数</a></li><li><a href="#4-han-shu-de-can-shu">4、函数的参数</a></li><li><a href="#5-fan-hui-zhi">5、返回值</a></li><li><a href="#6-jian-tou-han-shu">6、箭头函数 △</a></li></ul></li><li><a href="#er-te-shu-de-han-shu-biao-da-shi">二、特殊的函数表达式</a><ul><li><a href="#1-li-ji-zhi-xing-han-shu-biao-da-shi">1、立即执行函数表达式</a></li><li><a href="#2-di-gui-han-shu">2、递归函数</a></li><li><a href="#3-hui-diao-han-shu">3、回调函数</a></li></ul></li><li><a href="#san-this">三、this △△</a><ul><li><a href="#1-this">1、this</a></li><li><a href="#2-this-de-zhi-xiang">2、this的指向</a><ul><li><a href="#2-1-mo-ren-bang-ding">2.1 默认绑定</a></li><li><a href="#2-2-yin-shi-bang-ding">2.2 隐式绑定</a></li></ul></li><li><a href="#3-call-apply-bind">3、call、apply、bind</a><ul><li><a href="#3-1-call">3.1 call</a></li><li><a href="#3-2-apply">3.2 apply</a></li><li><a href="#3-3-bind">3.3 bind</a></li></ul></li><li><a href="#4-call-de-shi-xian">4、call 的实现</a></li></ul></li><li><a href="#si-han-shu-de-zhi-xing-guo-cheng">四、函数的执行过程 △</a><ul><li><a href="#1-zhan-nei-cun-he-dui-nei-cun">1、栈内存和堆内存</a></li><li><a href="#2-zhi-xing-shang-xia-wen">2、执行上下文</a></li><li><a href="#3-bian-liang-dui-xiang">3、变量对象</a></li><li><a href="#4-zuo-yong-yu">4、作用域</a></li><li><a href="#5-zuo-yong-yu-lian">5、作用域链 △</a></li><li><a href="#6-nei-cun-zhong-de-bian-liang-cun-chu">6、内存中的变量存储</a></li><li><a href="#7-sheng-ming-ti-sheng">7、声明提升 △</a></li><li><a href="#8-la-ji-hui-shou-ji-zhi">8. 垃圾回收机制  +</a></li></ul></li><li><a href="#wu-bi-bao">五、闭包 △△</a><ul><li><a href="#1-gai-nian">1、概念</a></li><li><a href="#2-zuo-yong">2、作用</a></li><li><a href="#3-que-dian">3、缺点</a></li><li><a href="#4-sheng-ming-zhou-qi">4、生命周期</a></li><li><a href="#5-ying-yong">5、应用</a></li></ul></li><li><a href="#liu-ge-ren-feng-zhuang-han-shu-ku">六、个人封装函数库</a></li></ul><!-- tocstop --></div><h1><span id="yi-ji-ben-de-han-shu">一、基本的函数</span><a href="#yi-ji-ben-de-han-shu" class="header-anchor">#</a></h1><p><strong>函数</strong>是可以反复使用的并且命名的代码块。本质上也是一种属于<a href>对象</a>类型的数据。与其他数据类型不同的是，函数的值是可执行的代码。函数分为<strong>系统函数</strong>和<strong>自定义函数</strong>。</p><p>函数是数据，函数名是这个数据的标识。需要访问函数的数据去掉圆括号就好。一个函数可以有多个标识。</p><h2><span id="p1-han-shu-de-zuo-yong">1、函数的作用</span><a href="#p1-han-shu-de-zuo-yong" class="header-anchor">#</a></h2><ul><li>解决代码的冗余问题，实现代码的复用。</li><li>封装代码，让函数内部的代码对外部不可见。</li><li>可以让整个代码项目通过函数模块化。</li></ul><h2><span id="p2-ding-yi-han-shu">2、定义函数</span><a href="#p2-ding-yi-han-shu" class="header-anchor">#</a></h2><p>函数名定义的规则遵循标识符的规则。函数的声明函数名可以重复，一旦重名，前面的覆盖后面的。</p><h3><span id="p2-1-sheng-ming-han-shu">2.1 声明函数</span><a href="#p2-1-sheng-ming-han-shu" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span> <span class="token parameter">args</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体</span>    <span class="token keyword">return</span> statement<span class="token punctuation">;</span> <span class="token comment">// 返回语句</span><span class="token punctuation">&#125;</span><span class="token comment">// name -- 函数名</span><span class="token comment">// args -- 参数列表（可选）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>var</code> 和 <code>function</code> 都是声明语句，它们声明的变量和函数都在JS预编译时被解析，也被称为变量提升和函数提升。</p><p>ES5中，不允许函数书写在非函数的代码块中（比如if语句中）。</p><h3><span id="p2-2-han-shu-biao-da-shi-ni-ming-han-shu-shi">2.2 函数表达式，匿名函数式</span><a href="#p2-2-han-shu-biao-da-shi-ni-ming-han-shu-shi" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 赋值调用（被称为函数表达式，这种方法只能提升函数名，不能提升函数体）</span><span class="token comment">// 调用需在创建之后</span><span class="token keyword">let</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数可以不书写名字，这种被称为<strong>匿名函数</strong>。</p><p>执行方法：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 自调用</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-3-gou-zao-han-shu-shi">2.3 构造函数式</span><a href="#p2-3-gou-zao-han-shu-shi" class="header-anchor">#</a></h3><p>类如 <code>const x = new XXXX()</code> 的形式，被称为<strong>构造函数</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"执行字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这个定义函数的方法几乎不用（会执行两次）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="p3-shi-yong-han-shu">3、使用函数</span><a href="#p3-shi-yong-han-shu" class="header-anchor">#</a></h2><p>函数需要调用才会执行。</p><h2><span id="p4-han-shu-de-can-shu">4、函数的参数</span><a href="#p4-han-shu-de-can-shu" class="header-anchor">#</a></h2><p>JS 数据传递只有值传递，没有引用传递。</p><p><strong>形参</strong> 形式上的参数，声明函数时候提供的参数。</p><p><strong>实参</strong> 在调用时，实际使用的参数。</p><p><strong>默认参数</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ES6之前</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span> <span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    age <span class="token operator">?</span> age<span class="token operator">:</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">// ES6</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span> <span class="token parameter">name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**剩余参数 **</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 可以把不确定的参数表示成数组</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> <span class="token operator">...</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>argument对象</strong></p><p>二者在传值的时候是一一对应的。二者的个数可以不相等，形参多的时候，多出来的自动被赋值 undefined，实参多的时候，多出来的放在**<code>arguments</code>**对象中。该对象在函数内部才有，实际上是一个类数组 array-like 的对象，可以访问这个对象获得传递给函数的每一个实参。函数中的形参可写可不写，即使不写形参也可以使用arguments对象获得，使用形参比较方便。arguments对象的length属性用来确定传递进来多少个实参。可以通过length属性的值的不同（根据传入的参数个数的不同），进行不同的操作。<code>arguments</code>对象中保存着一个叫<code>callee</code>的属性，这个属性是一个指针，它指向拥有这个<code>arguments</code>对象的函数。</p><ul><li>使用arguments对象的length属性可以获取函数的实参个数。</li><li>argument对象只能在函数内可见,因此arguments.legth也只能在函数体内使用。</li><li>使用函数对象的length属性可以获取函数的形参个数,该属性为只读属性,在函数体内,体外都可以使用</li></ul><p>callee 是arguments对象的属性，它引用当前argument对象所在的函数，使用该属性可以在函数体内调用自身。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 检测函数的形参和实参是否一致，如果不一致</span>arguments<span class="token punctuation">.</span>length <span class="token operator">!=</span> arguments<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="p5-fan-hui-zhi">5、返回值</span><a href="#p5-fan-hui-zhi" class="header-anchor">#</a></h2><p><code>return</code> 没有指定值时函数返回的是<code>undefined</code>，函数在执行完该语句以后立即停止执行并退出函数。</p><h2><span id="p6-jian-tou-han-shu">6、箭头函数 △</span><a href="#p6-jian-tou-han-shu" class="header-anchor">#</a></h2><p>ES6新出的。</p><p>（1）写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// （1）函数有参数，函数体只有一句返回值</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// （2）函数没有参数，函数体只有一句返回值</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment">// （3）函数参数随意，函数体不仅仅是一句返回值</span><span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）特点</p><ul><li>不存在this，即箭头函数<code>this</code>在定义的时候就已经确定了， <code>this</code>指向看定义的位置。</li><li>不能用于构造函数（不能被new实例化）。</li><li>没有<code>argument</code>对象，可用<code>rest</code>参数代替。</li><li>箭头函数不能使用<code>yield</code>命令，即不能用作Generator函数。</li></ul><p>（3）箭头函数的<code>this</code>指向</p><p>待更新。</p><h1><span id="er-te-shu-de-han-shu-biao-da-shi">二、特殊的函数表达式</span><a href="#er-te-shu-de-han-shu-biao-da-shi" class="header-anchor">#</a></h1><h2><span id="p1-li-ji-zhi-xing-han-shu-biao-da-shi">1、立即执行函数表达式</span><a href="#p1-li-ji-zhi-xing-han-shu-biao-da-shi" class="header-anchor">#</a></h2><p><code>IIFE</code>， Immediately Invoked Function Expression，立即执行的函数表达式，即声明的时候立即调用这个函数。</p><p>在规范当中，函数表达式语句:</p><ul><li>不能大括号开头</li><li>不能 <code>function</code> 开头</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>IIFE函数只能运行一次，因为引用类型没有标识符，执行完成后会被JS的垃圾回收机制回收。</p><h2><span id="p2-di-gui-han-shu">2、递归函数</span><a href="#p2-di-gui-han-shu" class="header-anchor">#</a></h2><p>递归就是自己调用自己。多次调用同一函数他们的执行环境是不相同的，在执行环境中的变量互不影响。</p><h2><span id="p3-hui-diao-han-shu">3、回调函数</span><a href="#p3-hui-diao-han-shu" class="header-anchor">#</a></h2><p>回调函数分为同步回调函数，异步回调函数。</p><p>回调函数（callback）。</p><p>什么函数才是回调函数?</p><ul><li>你定义的</li><li>你没有直接调用</li><li>但最终它执行了（在特定条件或时刻）</li></ul><p>常见的回调函数:</p><ul><li>DOM事件函数</li><li>定时器函数</li><li>AJAX回调函数</li><li>生命周期回调函数</li></ul><p>回调函数的特性导致其层层嵌套，形成<a href>回调地狱</a>。</p><h1><span id="san-this">三、this △△</span><a href="#san-this" class="header-anchor">#</a></h1><h2><span id="p1-this">1、this</span><a href="#p1-this" class="header-anchor">#</a></h2><p>JS的作用域是静态的，但是函数的调用却是动态的，由于函数可以在不同的运行环境内执行，因此JS在函数体内定义了<code>this</code>关键字来获取当前的运行环境。<strong>this</strong> 最终代表的是函数的__执行者，使用者，调用者__。它是一个指针型变量。</p><h2><span id="p2-this-de-zhi-xiang">2、this的指向</span><a href="#p2-this-de-zhi-xiang" class="header-anchor">#</a></h2><ul><li>函数是否在<code>new</code>中调用，如果是的话，<code>this</code>绑定的是新创建的对象</li><li>函数是否通过<code>call</code>、<code>apply</code> 显示绑定，如果是，则<code>this</code>绑定的是执行的对象</li><li>函数是否在某个上下文中调用，如果有，则<code>this</code>绑定在这个上下文对象上</li><li>如果都不是，默认绑定<code>window</code></li></ul><h3><span id="p2-1-mo-ren-bang-ding">2.1 默认绑定</span><a href="#p2-1-mo-ren-bang-ding" class="header-anchor">#</a></h3><p><code>this</code> 默认指向 <code>window</code>，在无法应用其他规则的时候使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token function-variable function">do</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// foo是直接使用不带任何修饰的函数引用进行调用，因此只能使用默认绑定规则</span>obj<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// window</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-2-yin-shi-bang-ding">2.2 隐式绑定</span><a href="#p2-2-yin-shi-bang-ding" class="header-anchor">#</a></h3><p>当函数引用有上下文对象的时候（obj），隐式绑定规则会把函数中的this绑定到这个上下文对象上。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> foo <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token comment">// 当foo调用的时候，它的落脚点确实是指向的obj对象，当函数引用有上下文对象的时候（obj），隐式绑定规则会把函数中的this绑定到这个上下文对象上。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隐式绑定可能会出现隐式丢失问题。被隐式绑定的函数，丢失了绑定对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span> foo<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> fn1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello </span><span class="token comment">// 虽然fn1是obj.foo的一个引用，但是实际上它的引用是foo函数本身，因此fn1其实是一个不带任何修饰的函数调用，属于默认绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个函数对象都有 call 和 apply 方法，本质是设置函数体内this对象的值。</p><h2><span id="p3-call-apply-bind">3、call、apply、bind</span><a href="#p3-call-apply-bind" class="header-anchor">#</a></h2><p><code>call</code>、<code>apply</code>、<code>bind</code> 是 <a href>Function</a> 对象自带的方法。</p><p>这三个函数的存在意义是<strong>改变函数执行时的上下文</strong>，再具体一点就是<strong>改变函数运行时的this指向</strong>。</p><h3><span id="p3-1-call">3.1 call</span><a href="#p3-1-call" class="header-anchor">#</a></h3><p><strong>call()</strong> 方法在使用一个指定的this值和若干个指定的参数值的前提下调用某个函数或方法。当调用一个函数时，可以赋值一个不同的 <code>this</code> 对象。<code>this</code> 引用当前对象，即 <code>call</code> 方法的第一个参数。</p><p>通过 <code>call</code> 方法，你可以在一个对象上借用另一个对象上的方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 语法</span><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 参数列表</span><span class="token comment">// - thisArg 指定函数运行时的 this值</span><span class="token comment">//   - 不传，或者传 null，undefined， 函数中的this指向window对象</span><span class="token comment">//   - 传递另一个函数的函数名，函数中的this指向这个函数的引用，并不一定是该函数执行时真正的this值</span><span class="token comment">//   - 值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象，如 String Number Boolean</span><span class="token comment">//   - 传递一个对象，函数中的this指向这个对象</span><span class="token comment">// - arg 函数所需要的参数，逗号间隔</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//输出函数a中的this对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//定义函数b</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'我是obj'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//定义对象obj</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//window</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Number</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//String</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Boolean</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// function b()&#123;&#125;</span><span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p3-2-apply">3.2 apply</span><a href="#p3-2-apply" class="header-anchor">#</a></h3><p><strong>apply</strong>() 语法与 <code>call()</code> 方法的语法几乎完全相同，唯一的区别在于，apply的第二个参数必须是一个包含多个参数的数组（或类数组对象）。</p><h3><span id="p3-3-bind">3.3 bind</span><a href="#p3-3-bind" class="header-anchor">#</a></h3><p><code>bind</code> 函数会创建一个新函数（称为绑定函数）</p><ul><li>传参和call或apply类似</li><li>不会执行对应的函数，call或apply会自动执行对应的函数</li><li>返回对函数的引用</li><li>语法 <code>fun.bind(thisArg[, arg1[, arg2[, ...]]])</code>。</li></ul><h2><span id="p4-call-de-shi-xian">4、call 的实现</span><a href="#p4-call-de-shi-xian" class="header-anchor">#</a></h2><p>待更新。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 把调用call方法的对象this指向call方法的第一个参数</span>    <span class="token comment">// 2. 调用call方法的自己的this</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="si-han-shu-de-zhi-xing-guo-cheng">四、函数的执行过程 △</span><a href="#si-han-shu-de-zhi-xing-guo-cheng" class="header-anchor">#</a></h1><h2><span id="p1-zhan-nei-cun-he-dui-nei-cun">1、栈内存和堆内存</span><a href="#p1-zhan-nei-cun-he-dui-nei-cun" class="header-anchor">#</a></h2><p>内存根据程序运行时候的逻辑分为<strong>栈内存</strong>和<strong>堆内存</strong>。在JS中，并没有严格意义区分。大部分的数据都保存在堆内存中，但是在某些场景，仍需要用栈（有时候也叫堆栈）的数据结构的思路进行处理，如<strong>执行上下文</strong>。</p><table><thead><tr><th>栈内存</th><th>堆内存</th></tr></thead><tbody><tr><td>栈结构（先进先出）</td><td>链表结构</td></tr><tr><td>占内存小，速度快</td><td>占内存大，速度慢</td></tr><tr><td>自动分配，自动回收</td><td>自己申请，手动释放</td></tr></tbody></table><h2><span id="p2-zhi-xing-shang-xia-wen">2、执行上下文</span><a href="#p2-zhi-xing-shang-xia-wen" class="header-anchor">#</a></h2><p>JS引擎并不是逐行解析代码，而是逐段去分析和执行，当开始解析一段代码时，会先进行<strong>预处理</strong>（声明提升和创建作用域链）。生成一个<strong>执行上下文</strong>。</p><p><strong>执行上下文</strong>（执行环境）分为两种<strong>变量对象</strong>（VO）：</p><ul><li><code>Global</code> | <code>Window</code>，默认的<strong>全局执行环境</strong>。</li><li><code>Function</code>，调用函数时会进入的<strong>函数执行环境</strong>。</li></ul><p>代码执行时会开辟一个栈空间来说明程序的执行顺序，这个执行上下文堆栈称为<strong>执行栈</strong>。开始执行时先将全局执行环境压入栈底（压栈），执行到函数时会创建对应的函数执行环境，并将函数执行环境压入栈底。在函数执行完成后将函数执行环境弹出并销毁。直到所有代码执行完成销毁全局执行环境。</p><h2><span id="p3-bian-liang-dui-xiang">3、变量对象</span><a href="#p3-bian-liang-dui-xiang" class="header-anchor">#</a></h2><p><strong>全局变量对象</strong> windows</p><p><strong>函数变量对象</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 模拟上面代码的变量对象</span><span class="token keyword">var</span> <span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    argument<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>        length<span class="token operator">:</span><span class="token number">2</span>    <span class="token punctuation">&#125;</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token function-variable function">c</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    b<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span>d<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-zuo-yong-yu">4、作用域</span><a href="#p4-zuo-yong-yu" class="header-anchor">#</a></h2><p><strong>作用域 scope</strong> 是变量在程序中可以访问的有效访问，也被称为变量的可见性。作用域在进入全局执行环境或者函数执行环境时就已经确定好了。在<code>ES5</code>中，作用域分为两种：</p><ul><li>全局作用域</li><li>函数作用域</li></ul><p>**同一个函数的多次调用都会生成不同的执行环境，每次调用都会生成。 **</p><p><strong>全局变量</strong> 是定义在全局作用域中的变量，一般在函外部定义。在程序的所有地方都可以使用和操作。</p><p><strong>局部变量</strong> 是在函数内部定义的，在函数执行域中。只能在自己的作用域中起作用，只能在函数内部使用。外部无法使用和操作局部变量。</p><h2><span id="p5-zuo-yong-yu-lian">5、作用域链 △</span><a href="#p5-zuo-yong-yu-lian" class="header-anchor">#</a></h2><p><strong>作用域链</strong> 是用来查找变量的这样一系列的过程。一个函数在定义时会生成一个属性<code>[[scope]]</code>，这个属性存储的是函数定义时作用域的层级关系。作用域链是函数执行时创建的，是当前函数作用域链 -&gt; <code>[[scope]]</code>属性作用域组成的。函数当前执行的作用域是作用域链的顶端，全局作用域在作用域链的最后。执行环境销毁时，作用域链也会销毁。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 全局作用域</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// test -> 全局作用域</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// test2 -> test -> 全局作用域</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//100</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//10</span>    <span class="token punctuation">&#125;</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当执行f1时，创建函数f1的执行环境，并将该对象置于链表开头，然后将函数f的调用对象放在第二位，最后是全局对象，作用域链的链表的结构是 f1-&gt;f-&gt;window 。从链表的开头寻找变量a，即f1函数内部找变量a，找到了，结果是20。同样，执行f2时，作用域链的链表的结构是 f2-&gt;f-&gt;window 。从链表的开头寻找变量a，即f2函数内部找变量a，找不到，于是从f内部找变量a，找到了，结果是10。最后在最外层打印出变量a，直接从变量a的作用域即全局作用域内寻找，结果为1。</p><h2><span id="p6-nei-cun-zhong-de-bian-liang-cun-chu">6、内存中的变量存储</span><a href="#p6-nei-cun-zhong-de-bian-liang-cun-chu" class="header-anchor">#</a></h2><p>变量如果是<a href>基本数据类型</a>，会在直接在栈内存开辟一段存储空间标识符。然后将基本数据类型的值也存储在栈内存中和标识符对应起来。要求变量名不能重名，重名就会覆盖。</p><p>如果是<a href>引用数据类型</a>，值储存在堆内存中，存储引用类型的时候标识符是储存在栈内存中的。（JS不允许直接访问堆内存中的数据，只能通过引用访问，差不多就是在变量对象中存储一个指向对象的句柄，可以理解成是一个地址，要访问这个对象，就要通过这个引用句柄来访问）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1000,2,3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序一开始执行，进入全局环境，首先会创建全局环境并且压栈（执行栈），全局代码执行的时候依赖的是全局环境中的东西。全局变量如果是基本类型，那么这个值直接存在栈当中，如果这个变量的值是引用类型，那么引用类型会在堆内存中开辟自己的空间专门存储（数据本身）。然后里面的这块空间的地址存在栈当中对应的变量。</p><p>当函数执行碰到函数调用，函数执行时也要有自己的环境去依赖。函数执行也是创建自己的函数环境进行压栈（函数执行环境一定压在全局执行环境的上面）。局部变量，是在函数环境当中存在的，只有函数执行，局部变量才会出现，函数执行完成之后，函数环境要弹出栈（销毁归还内存），局部变量也就不存在了。</p><p>当函数调用完成之后，会继续执行全局代码，一直到所有的全局代码执行完成，代表程序执行结束，程序执行结束的时候，全局环境最后出栈（销毁）。</p><h2><span id="p7-sheng-ming-ti-sheng">7、声明提升  △</span><a href="#p7-sheng-ming-ti-sheng" class="header-anchor">#</a></h2><p>也称为预解析。在执行环境的第一步（创建阶段），会将带 var 的变量声明和函数声明，放到作用域中。在执行阶段时，它的相关逻辑还是放在原来的位置进行赋值和其他的逻辑处理。函数表达式和函数构造器不会被提升。函数声明和变量都会提升，但是函数声明会先提升，然后是变量。</p><p><strong>变量声明提升</strong> 通过 <code>var</code> 声明的变量，在定义语句之前就能访问到，值为 <code>undefined</code>。</p><p><strong>函数声明提升</strong> 通过 <code>function</code> 声明的函数，在前面就可以直接调用，值为函数定义（对象）。</p><h2><span id="p8-la-ji-hui-shou-ji-zhi">8. 垃圾回收机制  +</span><a href="#p8-la-ji-hui-shou-ji-zhi" class="header-anchor">#</a></h2><p>待更新。</p><h1><span id="wu-bi-bao">五、闭包 △△</span><a href="#wu-bi-bao" class="header-anchor">#</a></h1><h2><span id="p1-gai-nian">1、概念</span><a href="#p1-gai-nian" class="header-anchor">#</a></h2><p><strong>闭包</strong>（Closure）:</p><ul><li>闭包的产生是函数嵌套函数，内部函数引用外部函数变量，外部函数调用。</li><li>闭包可以理解为内部的函数。</li><li>深入理解的话，闭包就是包含<strong>被内部引用变量</strong>的对象。（可以通过浏览器断点调试查看）</li><li>闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的常见方式就是在一个函数内部创建另一个函数。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 闭包</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-zuo-yong">2、作用</span><a href="#p2-zuo-yong" class="header-anchor">#</a></h2><ul><li>外部间接的访问到了内部的变量。</li><li>当外部函数执行完成后，局部变量暂时不会消失，延长了局部变量的生命周期。可以实现函数内局部变量的累加。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        num <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 101</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 102</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-que-dian">3、缺点</span><a href="#p3-que-dian" class="header-anchor">#</a></h2><p>由于在闭包所在的作用域返回的局部变量不会被销毁，所以会占用内存。过度的使用闭包会迫使性能下降。</p><h2><span id="p4-sheng-ming-zhou-qi">4、生命周期</span><a href="#p4-sheng-ming-zhou-qi" class="header-anchor">#</a></h2><p>当内部函数被定义的时候，闭包就生成了。</p><p>当内部函数没有被引用的时候，函数就会称为垃圾对象，闭包就会消失。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">fun <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 让内部函数对象（闭包）变成垃圾对象</span><span class="token comment">// 此时就马上被回收</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p5-ying-yong">5、应用</span><a href="#p5-ying-yong" class="header-anchor">#</a></h2><p>（1）模拟块级作用域（匿名自执行函数）</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">(function()&#123;       for(var i&#x3D;0;i&lt;count;i++)&#123;&#125; &#125;)(); console.log(i);&#x2F;&#x2F;报错，无法访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）对结果进行缓存</p><p>写一个用于实现所有参数和的函数：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">var fn&#x3D;function()&#123;    var sum&#x3D;0;    for(var i&#x3D;0;i&lt;arguments.length;i++)&#123;        sum+&#x3D;arguments[i];    &#125;    return sum;&#125;console.log(fn(1,2));&#x2F;&#x2F;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上函数接收一些number类型的参数，并返回这些参数之和。由于每次传递的参数相同，所以返回的结果是一样的。这样势必会造成了一种浪费，在此时咱们可以通过缓存机制来提高这个函数的性能。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">var fn&#x3D;(function()&#123;    var cache&#x3D;&#123;&#125;&#x2F;&#x2F;将结果缓存到该对象中    return function()&#123;        var str&#x3D;JSON.stringify(arguments);        if(cache[str])&#123;&#x2F;&#x2F;判断缓存中是否存在传递过来的参数，存在直接返回结果，无需计算            return cache[str];        &#125;else&#123;&#x2F;&#x2F;进行计算并返回结果            var sum&#x3D;0;            for(var i&#x3D;0;i&lt;arguments.length;i++)&#123;                sum+&#x3D;arguments[i];            &#125;            return cache[str]&#x3D;sum;        &#125;    &#125;&#125;)()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例将计算后的结果缓存到局部变量cache当中，在调用这个函数时，先在缓存中查找，如果找不到，则进行计算，然后将结果放到缓存中并返回，如果找到了，直接返回查找到的值。</p><p><a href="https://www.jianshu.com/p/2fb8a9f26589">参考链接</a></p><h1><span id="liu-ge-ren-feng-zhuang-han-shu-ku">六、个人封装函数库</span><a href="#liu-ge-ren-feng-zhuang-han-shu-ku" class="header-anchor">#</a></h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">;</span><span class="token operator">+</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*     * xxxx方法：xxxx    * @pargm &#123;x:[type],y:[type]&#125; （参数    * @return &#123;object&#125; x:xxx y:xxx （返回值    */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>windows<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>;</code>是为了防止其他库末尾不加分号，引起错误</li><li><code>+</code>等一元运算符代表把匿名函数括起来</li><li>在匿名函数中定义一个对象，把所有方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 已更新 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 字符串和数组</title>
      <link href="/02/14-JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%AF%E6%9C%AC%EF%BC%89/"/>
      <url>/02/14-JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%95%B0%E7%BB%84%EF%BC%88%E5%89%AF%E6%9C%AC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#4-shan-chu-ti-huan-cha-ru-qie-ge">4、删除、替换、插入、切割</a><ul><li><a href="#slice">slice</a></li></ul></li><li><a href="#5-shu-zu-de-he-bing-pin-jie">5、数组的合并、拼接</a><ul><li><a href="#join">join</a></li><li><a href="#7-foreach-map-filter-every-some">7、forEach、map、filter、every、some</a></li><li><a href="#10-reduce-es6">10、reduce <code>ES6</code></a></li><li><a href="#11-fill">11、fill</a></li><li><a href="#12-array-from">12、Array.from</a></li><li><a href="#13-array-of">13、Array.of</a></li><li><a href="#14-copywithin">14、CopyWithin</a></li><li><a href="#15-flat">15、flat</a></li><li><a href="#17-kuo-zhan-yun-suan-fu">17、扩展运算符</a></li></ul></li></ul><ul><li><a href="#wu-set">五、Set +</a></li></ul><!-- tocstop --></div><h2><span id="p4-shan-chu-ti-huan-cha-ru-qie-ge">4、删除、替换、插入、切割</span><a href="#p4-shan-chu-ti-huan-cha-ru-qie-ge" class="header-anchor">#</a></h2><h3><span id="pslice">slice</span><a href="#pslice" class="header-anchor">#</a></h3><p><code>slice</code> 基于当前数组中的一个或者多个项目创建一个新数组，该方法<strong>不影响原始数组</strong>（实际上就是切割数组），一个参数就是从该位置切割到数组尾，两个参数就是切割起始位置和结束位置（不包括结束位置）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [ 'b', 'c', 'd' ]</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['b']</span><span class="token keyword">var</span> s3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['b','c']</span><span class="token keyword">var</span> s4 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 和arr相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p5-shu-zu-de-he-bing-pin-jie">5、数组的合并、拼接</span><a href="#p5-shu-zu-de-he-bing-pin-jie" class="header-anchor">#</a></h2><h4><span id="pconcat">concat</span><a href="#pconcat" class="header-anchor">#</a></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 合并、拼接数组</span><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1,2,4,5,6,7,8,9]</span><span class="token keyword">var</span> arr <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1,2,3,4,5,6,10]</span><span class="token keyword">var</span> arr <span class="token operator">=</span> a1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制字符串</span>arr1 <span class="token operator">==</span> a1 <span class="token comment">// false  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pjoin">join</span><a href="#pjoin" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 使用指定的字符串拼接数组中的每个元素，组成一个字符串。</span><span class="token comment">// 转字符串</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '1,2,3'</span><span class="token keyword">var</span> str2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '1#2#3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p7-foreach-map-filter-every-some">7、forEach、map、filter、every、some</span><a href="#p7-foreach-map-filter-every-some" class="header-anchor">#</a></h3><p>（1）<strong>forEach</strong> 迭代数组</p><p><code>forEach</code> 只能遍历数组。</p><p>不能使用break、continue退出。（可以使用 return）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 过年了，每个人增加一岁</span>Arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Arr <span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 没有返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）map 映射数组</p><p><code>map</code> 被称为映射数组。参数是一个回调函数。该方法可以对数组的每一个元素调用指定的回调函数，并返回包含结果的数组。==返回一个新数组==，其中每一个元素均为关联的原始数组元素的回调函数返回值。不会为缺失的元素调用回调函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Arr<span class="token punctuation">.</span> <span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 回调函数体</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> thisArg <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数：</span><span class="token comment">//   - item 项</span><span class="token comment">//   - index 下标</span><span class="token comment">// 返回值： 返回一个新数组</span><span class="token keyword">var</span> newAge <span class="token operator">=</span> oldAge<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 可以使用系统的内置函数</span><span class="token comment">// 题目</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">[</span> parseInt <span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// [1,NaN,NaN]</span><span class="token comment">// 调用了parseInt 进制转换方法</span><span class="token comment">// 即 .map[ parseInt( item, index )]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）filter 过滤数组</p><p>返回数组中满足指定条件的元素。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Arr<span class="token punctuation">.</span> <span class="token function">filter</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个新数组</span><span class="token comment">// 筛选出所有的偶数</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> evenArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2,4,6,6,8]</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> evenArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用filter过滤掉不符合条件的值</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>max<span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span>min<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newAge <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">&amp;&amp;</span> item <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）every 检测是否全部符合</p><ul><li>every方法可以测试的所有元素是否都满足指定的测试</li><li>every中是函数，每一项数组的值，依次进入函数运行，函数最终要要求返回布尔值。</li><li>如果有一项返回false，则停止执行，every返回false</li><li>如果所有的项全部返回true  那么 整个every方法就返回true</li><li>every方法的回调函数拥有3个参数：1、item  数组的每一项 2、index  数组的这一项 对应的下标  3、array  原数组</li><li>every方法还有第二个可选的参数，可在回调函数中为其引用this关键字的对象。如果省略，则undefined是this值</li></ul><p>（5）some 检测是否存在符合</p><ul><li>使用some方法可以确定数组的元素是否有满足指定的测试的项</li><li>只要一项返回true 那么 some 方法就返回 true（一真即真）</li><li>其余和every类似</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 我们得到一组年龄，如果所有的人都成年了，那么我们就开启成人网吧模式，否则就进入儿童模式</span><span class="token keyword">var</span> userAge <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> isPerson <span class="token operator">=</span> userAge<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> item <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isPerson<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"儿童模式"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"成人模式"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//this指向对象的</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> isTrue <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return item &lt; 18;</span>    <span class="token keyword">return</span> item <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>max<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isTrue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p10-reduce-es6">10、reduce <code>ES6</code></span><a href="#p10-reduce-es6" class="header-anchor">#</a></h3><p><code>reduce()</code> 实现数组去重等</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr5<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> pre<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p11-fill">11、fill</span><a href="#p11-fill" class="header-anchor">#</a></h3><p><code>fill()</code> 填充一个数组，不会改变原始字符串。</p><p>会修改原数组</p><p>填充的内容，填充起始位置，填充结束位置（不包括）。</p><h3><span id="p12-array-from">12、Array.from</span><a href="#p12-array-from" class="header-anchor">#</a></h3><h3><span id="p13-array-of">13、Array.of</span><a href="#p13-array-of" class="header-anchor">#</a></h3><p>创建一个新数组。</p><p>用来弥补 <code>new Array</code> 的不足。</p><h3><span id="p14-copywithin">14、CopyWithin</span><a href="#p14-copywithin" class="header-anchor">#</a></h3><p>会修改当前数组。</p><p>替换的开始位置，复制的起始位置，复制的结束位置（不包括）。</p><h3><span id="p15-flat">15、flat</span><a href="#p15-flat" class="header-anchor">#</a></h3><p>数组降维，多维数组转一维数组。</p><h3><span id="p17-kuo-zhan-yun-suan-fu">17、扩展运算符</span><a href="#p17-kuo-zhan-yun-suan-fu" class="header-anchor">#</a></h3><p><code>...</code> 三点运算符，把数组在其他数组中展开</p><p>（1）复制数组（深拷贝） <code>let nArr = [...arr]</code></p><p>（2）合并数组 <code>let nAtr = [...arr1, ...arr2]</code></p><p>（3）解构赋值</p><p>（4）字符串转数组 可以展开字符串，放在数组中，直接转为数组</p><table><thead><tr><th>数组方法<br>Array.protype.</th><th>描述</th></tr></thead><tbody><tr><td><code>indexOf(value)</code></td><td>查找到就返回下标，否则返回<code>-1</code></td></tr><tr><td><code>lastIndexOf(value)</code></td><td>倒序查找，同上</td></tr><tr><td><code>forEach()</code></td><td>遍历数组</td></tr><tr><td><code>map()</code></td><td>==映射数组==<br>返回一个新数组（相同长度）<br>新数组的值是每次遍历的返回值·</td></tr><tr><td><code>filter</code>()</td><td>==过滤数组==<br>有返回值，当某一个值函数时，如果当前函数返回<code>true</code>，则把当前的的数组值放到返回值中。</td></tr><tr><td><code>reduce(callback)</code></td><td>==累加数组==<br>参数: function(prev, now, index){}</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">// 格式</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">prev<span class="token punctuation">,</span> now<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> init<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 例子 累加求和</span><span class="token keyword">var</span> val <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">prev<span class="token punctuation">,</span> now<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// prev 上一次函数的返回值</span>    <span class="token comment">// now 当前遍历数组的值</span>    <span class="token comment">// index </span>    <span class="token comment">// 只有一个函数参数的话</span>    <span class="token comment">// 第一次进来下标就是1</span>    <span class="token comment">// prev = arr[0]</span>    <span class="token comment">// 少遍历一次</span>    <span class="token comment">// 两个参数</span>    <span class="token comment">// 第二个参数就是prev</span>        retuen prev <span class="token operator">+</span> now<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="wu-set">五、Set +</span><a href="#wu-set" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS API（1）</title>
      <link href="/02/14-JS_API/"/>
      <url>/02/14-JS_API/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-zi-fu-chuan-api">一、字符串 API</a><ul><li><a href="#cha-zhao-indexof-lastindexof">查找 - indexOf / lastIndexOf</a></li><li><a href="#cha-zhao-includes">查找 - includes</a></li><li><a href="#cha-zhao-search">查找 - search</a></li><li><a href="#cha-zhao-match">查找 - match</a></li><li><a href="#cha-zhao-charat-charcodeat">查找 - charAt/charCodeAt</a></li><li><a href="#pan-duan-tou-wei-startswith-endswith">判断头尾 - startsWith/endsWith</a></li><li><a href="#qie-cheng-shu-zu-split">切成数组 - split</a></li><li><a href="#jie-qu-substr-slice-substring">截取 - substr/slice/substring</a></li><li><a href="#da-xiao-xie-zhuan-huan-tolowercase-touppercase">大小写转换 - toLowerCase / toUpperCase</a></li><li><a href="#lian-jie-concat">连接 - concat</a></li><li><a href="#fu-zhi-repeat">复制 - repeat</a></li><li><a href="#bu-quan-padstart-padend">补全 - padStart / padEnd</a></li><li><a href="#ti-huan-replace">替换 - replace</a></li><li><a href="#shan-shou-wei-kong-ge-trim-trimstart-trimend">删首尾空格 - trim / trimStart / trimEnd</a></li><li><a href="#zhuan-huan-valueof-tostring">转换 - valueOf / toString</a></li><li><a href="#zheng-ze-ce-shi-test">正则测试 - test</a></li></ul></li><li><a href="#er-shu-zu-api">二、数组 API</a><ul><li><a href="#chang-du-length">长度 - length</a></li><li><a href="#zhan-dui-lie-cao-zuo-push-pop-unshift-shift">栈/队列操作 - push/pop/unshift/shift</a></li><li><a href="#cha-zhao-indexof-lastindexof">查找 - indexOf/lastIndexOf</a></li><li><a href="#cha-zhao-includes-1">查找 - includes</a></li><li><a href="#cha-zhao-find-findindex">查找 - find/findIndex</a></li><li><a href="#pai-xu-sort">排序 - sort △</a></li><li><a href="#cao-zuo-splice-slice">操作 - splice/slice △</a></li><li><a href="#lian-jie-concat-1">连接 - concat</a></li><li><a href="#pin-jie-join">拼接 - join</a></li><li><a href="#fan-zhuan-reverse">反转 - reverse</a></li><li><a href="#bian-li-foreach">遍历 - forEach</a></li><li><a href="#bian-li-map-filter-every-all">遍历 - map/filter/every/all △</a></li><li><a href="#bian-li-reduce">遍历 - reduce △</a></li><li><a href="#zhuan-huan-tostring">转换 - toString</a></li><li><a href="#tian-chong-fill">填充 - fill</a></li><li><a href="#jiang-wei-flat">降维 - flat</a></li></ul></li><li><a href="#san-set">三、SET</a></li><li><a href="#si-dui-xiang-api">四、对象 API</a></li><li><a href="#wu-map">五、MAP</a></li></ul><!-- tocstop --></div><h1><span id="yi-zi-fu-chuan-api">一、字符串 API</span><a href="#yi-zi-fu-chuan-api" class="header-anchor">#</a></h1><p>除非特别标注，则默认不会改变原字符串的。</p><h2><span id="pcha-zhao-indexof-lastindexof">查找 - indexOf / lastIndexOf</span><a href="#pcha-zhao-indexof-lastindexof" class="header-anchor">#</a></h2><p><code>indexOf()</code> 返回指定字符串在字符串首次出现的位置（向后查找，对大小写敏感），如果没找到，返回<code>-1</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>search <span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    search 需检索的字符串</span><span class="token comment">//    start  可选，指定开始检索的位置</span><span class="token comment">//          如果没指定就是从首字符开始搜索</span><span class="token comment">// 返回值</span><span class="token comment">//    目标字符串第一次出现的位置/-1</span><span class="token keyword">let</span> str <span class="token operator">=</span> “poxiaoispig"<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"poxiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lastIndexOf()</code> 同 <code>indexOf()</code> ，区别是逆序的（向前查找）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="pcha-zhao-includes">查找 - includes</span><a href="#pcha-zhao-includes" class="header-anchor">#</a></h2><p><code>includes()</code> 查找字符串是否包含指定字符串（对大小写敏感），如果找到返回<code>true</code> ,否则返回<code>false</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">includes</span><span class="token punctuation">(</span>search<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    search 需查找的字符串</span><span class="token comment">//    start  可选，指定开始检索的位置</span><span class="token comment">//          如果没指定就是从最后一个字符开始搜索</span><span class="token comment">// 返回值</span><span class="token comment">//    目标字符串第一次出现的位置/-1</span><span class="token keyword">let</span> str <span class="token operator">=</span> “poxiaoispig"<span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"poxiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pcha-zhao-search">查找 - search</span><a href="#pcha-zhao-search" class="header-anchor">#</a></h2><p><code>search()</code> 功能和<code>indexOf()</code>相同，定义匹配模式，只有一个参数，没有反向检索和全局模式。（正则表达式常用）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">search</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    tar 要搜索的字符串</span><span class="token comment">// 返回值</span><span class="token comment">//    目标字符串第一次出现的位置/-1</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"poxiaoispig"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pcha-zhao-match">查找 - match</span><a href="#pcha-zhao-match" class="header-anchor">#</a></h2><p><code>match()</code> 找出所有匹配的子字符串，并以数组的形式返回，如果匹配模式没有指定全局（正则表达式），则进行单次匹配，如果没找到返回<code>null</code>。该方法类似 <code>indexOf()</code> 和 <code>lastIndexOf()</code>，但是它返回指定的值，而不是字符串的位置。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    re  字符串或者正则表达式</span><span class="token comment">// 返回</span><span class="token comment">//    数组（包含所有匹配的字符串）</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"poxiao"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"xiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'xiao', index: 2, input: 'poxiao', groups: undefined ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pcha-zhao-charat-charcodeat">查找 - charAt/charCodeAt</span><a href="#pcha-zhao-charat-charcodeat" class="header-anchor">#</a></h2><p><code>charAt(n)</code> 返回字符串中的第n个字符，如果n超出字符串范围，返回空串。</p><p><code>charCodeAt(n)</code> 返回字符串中第n个字符的字符编码。</p><h2><span id="ppan-duan-tou-wei-startswith-endswith">判断头尾 - startsWith/endsWith</span><a href="#ppan-duan-tou-wei-startswith-endswith" class="header-anchor">#</a></h2><p><code>startsWith()</code> <code>endsWith()</code> 判断字符串开头、结尾有没有包含某个字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">endsWith</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    key 目标字符串</span><span class="token comment">// 返回</span><span class="token comment">//    true / false</span><span class="token string">"poxiao"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"po"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token string">"poxiao"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"po"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pqie-cheng-shu-zu-split">切成数组 - split</span><a href="#pqie-cheng-shu-zu-split" class="header-anchor">#</a></h2><p><code>split()</code> 把一个字符串切割成数组，这个操作和数组<code>join</code>是相反的。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">split</span><span class="token punctuation">(</span>rule<span class="token punctuation">[</span><span class="token punctuation">,</span> max<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    rule 字符串或者正则表达式</span><span class="token comment">//    max  可选，指定返回数组的的最大长度</span><span class="token comment">// 返回值</span><span class="token comment">//    数组</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"poxiao"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["poxiao", ]</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["p","o","x","i","a","o"]</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["p","o"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pjie-qu-substr-slice-substring">截取 - substr/slice/substring</span><a href="#pjie-qu-substr-slice-substring" class="header-anchor">#</a></h2><p><code>substr</code> 根据指定长度截取字符串（不推荐使用该方法）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token punctuation">,</span> length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数</span><span class="token comment">//    start  起始下标</span><span class="token comment">//    length 可选，截取的长度</span><span class="token comment">//           如果省略，则截取到末尾</span><span class="token comment">// 返回值</span><span class="token comment">//    截取之后的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>slice</code> 、<code>substring</code> 根据指定的起止下标截取字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数</span><span class="token comment">//    start 起始下标</span><span class="token comment">//    end   可选，结束下标（不包括）</span><span class="token comment">//          如果省略，代表剩下的全部截取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>起始和结束位置相比较的大小无法确定的时候可以使用<code>substring</code>。</p><p>如果为负值，<code>slic</code>e能把负值当作从右向左。而<code>substring</code>视其无效</p><h2><span id="pda-xiao-xie-zhuan-huan-tolowercase-touppercase">大小写转换 - toLowerCase / toUpperCase</span><a href="#pda-xiao-xie-zhuan-huan-tolowercase-touppercase" class="header-anchor">#</a></h2><p><code>toLowerCase()</code> 将字符串转换成小写</p><p><code>toUpperCase()</code> 将字符串转换成大写</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 参数无</span><span class="token comment">// 返回</span><span class="token comment">//     转换之后的字符串</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"poxiao"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"POXIAO"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="plian-jie-concat">连接 - concat</span><a href="#plian-jie-concat" class="header-anchor">#</a></h2><p><code>concat()</code> 用于连接字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">concat</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    str 要拼接的字符串（一个或者多个）</span><span class="token comment">// 返回值</span><span class="token comment">//    连接之后的字符串。</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"poxiao"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "poxiaoispig"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pfu-zhi-repeat">复制 - repeat</span><a href="#pfu-zhi-repeat" class="header-anchor">#</a></h2><p><code>repeat()</code> 复制字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数</span><span class="token comment">//    count 复制次数</span><span class="token comment">// 返回值</span><span class="token comment">//    复制之后的字符串</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"poxiao"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "poxiaopoxiaopoxiao"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pbu-quan-padstart-padend">补全 - padStart / padEnd</span><a href="#pbu-quan-padstart-padend" class="header-anchor">#</a></h2><p><code>padStart()</code> <code>padEnd()</code> 是 ES2017 引入的字符串补全长度的方法。如果某个字符串不够指定长度，会在头部或尾部补全。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">padSrart</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> pad<span class="token punctuation">)</span><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">padEnd</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> pad<span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//    length 指定字符串的最小长度</span><span class="token comment">//    pad    用来补全的字符串</span><span class="token comment">// 返回值</span><span class="token comment">//    补全之后的字符串</span><span class="token comment">//    如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"poxiao"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "poxiao"</span>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"is"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "isispoxiao"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pti-huan-replace">替换 - replace</span><a href="#pti-huan-replace" class="header-anchor">#</a></h2><p>如果没有使用正则表达式，只能替换一次。</p><p>这是用于搜索和替换的通用方法，是最有用的方法之一。它是搜索和替换字符串的瑞士军刀。</p><p><strong>当 <code>replace</code> 的第一个参数是字符串时，它仅替换第一个匹配项。</strong></p><h2><span id="pshan-shou-wei-kong-ge-trim-trimstart-trimend">删首尾空格 - trim / trimStart / trimEnd</span><a href="#pshan-shou-wei-kong-ge-trim-trimstart-trimend" class="header-anchor">#</a></h2><p><code>trim()</code> <code>trimStart()</code> <code>trimEnd()</code> 去除字符串的头尾空格。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token constant">STR</span><span class="token punctuation">.</span> <span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 无参数</span><span class="token comment">// 返回处理之后的字符串（不会改变原字符串）</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"   poxiao is pig   "</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "poxiao is pig"</span>str<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "poxiao is pig   "</span>str<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// "   poxiao is pig"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pzhuan-huan-valueof-tostring">转换 - valueOf / toString</span><a href="#pzhuan-huan-valueof-tostring" class="header-anchor">#</a></h2><p><code>valueOf()</code> 返回对象的字符串、数值或者布尔值表示。</p><p><code>toString()</code> 返回对象的字符串表示。</p><h2><span id="pzheng-ze-ce-shi-test">正则测试 - test</span><a href="#pzheng-ze-ce-shi-test" class="header-anchor">#</a></h2><h1><span id="er-shu-zu-api">二、数组 API</span><a href="#er-shu-zu-api" class="header-anchor">#</a></h1><p>如果没有特别说明，则说明这个API不会修改原数组。</p><h2><span id="pchang-du-length">长度 - length</span><a href="#pchang-du-length" class="header-anchor">#</a></h2><p><code>length</code> 属性保存数组的元素个数（长度）。可读可写，是一个动态属性，会随数组的变化而自动更新。</p><h2><span id="pzhan-dui-lie-cao-zuo-push-pop-unshift-shift">栈/队列操作 - push/pop/unshift/shift</span><a href="#pzhan-dui-lie-cao-zuo-push-pop-unshift-shift" class="header-anchor">#</a></h2><p>这些方法都<strong>会修改原数组</strong>。</p><p><code>push()</code> 接收任意数量参数，并逐个添加到数组末尾，返回修改后数组的长度。</p><p><code>pop()</code> 无参数，移除数组最后一项并返回该项。</p><p><code>unshift()</code> 接收任意数量参数，并逐个添加到数组头部，返回修改后的数组的长度。</p><p><code>shift()</code> 无参数，移除数组首项并返回该项。</p><h2><span id="pcha-zhao-indexof-lastindexof">查找 - indexOf/lastIndexOf</span><a href="#pcha-zhao-indexof-lastindexof" class="header-anchor">#</a></h2><p><code>indexOf()</code> 返回的是下标，第二个参数是起始位置。</p><p>这个方法是全等查找，找不到 <code>NaN</code>。</p><h2><span id="pcha-zhao-includes">查找 - includes</span><a href="#pcha-zhao-includes" class="header-anchor">#</a></h2><p><code>includes()</code> 返回一个布尔值，表示某个数组是否包含给定的值。</p><h2><span id="pcha-zhao-find-findindex">查找 - find/findIndex</span><a href="#pcha-zhao-find-findindex" class="header-anchor">#</a></h2><p><code>find()</code> 找出符合条件的数组成员。</p><p><code>findIndex()</code> 传入一个测试函数，当测试函数返回 <code>true</code> 时，返回数组的一个元素位置。如果没有符合条件返回 <code>-1</code>。</p><p>如果是空数组，测试函数是不会执行的。</p><h2><span id="ppai-xu-sort">排序 - sort △</span><a href="#ppai-xu-sort" class="header-anchor">#</a></h2><p><code>sort()</code> 对当前数组进行排序，<strong>会修改当前数组</strong>。</p><p>参数是一个<strong>比较函数</strong>，如果不传入参数，该方法会调用每个数组元素的 <code>toString()</code> 按默认 <code>unicode</code> 码进行排序。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span> <span class="token function">sort</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 例子</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span>v2</span><span class="token punctuation">)</span><span class="token operator">=></span>v1<span class="token operator">-</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 5, 6 ]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span>v2</span><span class="token punctuation">)</span><span class="token operator">=></span>v2<span class="token operator">-</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 6, 5, 4, 3, 2, 1 ]</span><span class="token comment">// 依据对象数组中的某个属性进行排序</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token string">"水"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token string">"金"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token string">"土"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token string">"火"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token string">"木"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">order</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pcao-zuo-splice-slice">操作 - splice/slice △</span><a href="#pcao-zuo-splice-slice" class="header-anchor">#</a></h2><p><code>splice()</code> 可以对数组进行删除、替换、插入，这个方法<strong>会修改原数组</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Array<span class="token punctuation">.</span> <span class="token function">splice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> count<span class="token punctuation">[</span><span class="token punctuation">,</span> insert<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">//     start  开始删除的index</span><span class="token comment">//     count  要删除的项数</span><span class="token comment">//     insert 要插入的内容</span><span class="token comment">// 返回</span><span class="token comment">//     数组（被删除的内容）</span><span class="token comment">// 删除</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从index=1的地方开始，删除2项 // [2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 4, 5]</span><span class="token comment">// 替换</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 666, 777, 4, 5]</span><span class="token comment">// 插入</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr3<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 666, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>slice()</code></p><h2><span id="plian-jie-concat">连接 - concat</span><a href="#plian-jie-concat" class="header-anchor">#</a></h2><h2><span id="ppin-jie-join">拼接 - join</span><a href="#ppin-jie-join" class="header-anchor">#</a></h2><h2><span id="pfan-zhuan-reverse">反转 - reverse</span><a href="#pfan-zhuan-reverse" class="header-anchor">#</a></h2><p>反转数组。</p><p>会修改原数组（地址不变）。</p><h2><span id="pbian-li-foreach">遍历 - forEach</span><a href="#pbian-li-foreach" class="header-anchor">#</a></h2><h2><span id="pbian-li-map-filter-every-all">遍历 - map/filter/every/all △</span><a href="#pbian-li-map-filter-every-all" class="header-anchor">#</a></h2><h2><span id="pbian-li-reduce">遍历 - reduce △</span><a href="#pbian-li-reduce" class="header-anchor">#</a></h2><h2><span id="pzhuan-huan-tostring">转换 - toString</span><a href="#pzhuan-huan-tostring" class="header-anchor">#</a></h2><p>数组转成字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"[1, 2, 3]"</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1,2,3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="ptian-chong-fill">填充 - fill</span><a href="#ptian-chong-fill" class="header-anchor">#</a></h2><h2><span id="pjiang-wei-flat">降维 - flat</span><a href="#pjiang-wei-flat" class="header-anchor">#</a></h2><h1><span id="san-set">三、SET</span><a href="#san-set" class="header-anchor">#</a></h1><h1><span id="si-dui-xiang-api">四、对象 API</span><a href="#si-dui-xiang-api" class="header-anchor">#</a></h1><h1><span id="wu-map">五、MAP</span><a href="#wu-map" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 技术栈基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 开始</title>
      <link href="/02/13-JS%E5%BC%80%E5%A7%8B/"/>
      <url>/02/13-JS%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-ji-ben-gai-nian">一、基本概念</a><ul><li><a href="#1-te-dian">1、特点</a></li><li><a href="#2-zu-cheng">2、组成</a></li><li><a href="#3-wang-ye-zhong-shi-yong-js-de-fang-fa">3、网页中使用 JS 的方法</a></li><li><a href="#4-duan-dian-diao-shi-dai-geng-xin">4、断点调试（待更新）</a></li></ul></li><li><a href="#er-ji-ben-jie-gou-he-yu-fa">二、基本结构和语法</a><ul><li><a href="#1-yu-ju-zhu-shi-fen-hao-kong-bai">1、语句、注释、分号、空白</a></li><li><a href="#2-shu-chu">2、输出</a></li><li><a href="#3-bian-liang">3、变量</a><ul><li><a href="#1-bian-liang-ming-ming-biao-shi-fu-ming-ming-gui-ze">（1）变量命名/标识符命名规则</a></li><li><a href="#2-bian-liang-sheng-ming-he-bian-liang-fu-zhi">（2）变量声明和变量赋值</a></li><li><a href="#3-kuai-ji-zuo-yong-yu">（3）块级作用域</a></li></ul></li><li><a href="#4-yan-ge-mo-shi">4、严格模式</a></li></ul></li><li><a href="#san-ji-ben-shu-ju-lei-xing">三、基本数据类型</a><ul><li><a href="#1-number">1、Number</a></li><li><a href="#2-string">2、String</a></li><li><a href="#3-boolean">3、Boolean</a></li><li><a href="#4-null">4、null</a></li><li><a href="#5-undefined">5、undefined</a></li><li><a href="#6-lei-xing-zhuan-huan">6、类型转换 △</a><ul><li><a href="#qiang-zhi-lei-xing-zhuan-huan">强制类型转换</a></li><li><a href="#yin-shi-lei-xing-zhuan-huan">隐式类型转换</a></li><li><a href="#parseint">parseInt</a></li></ul></li><li><a href="#7-lei-xing-pan-duan">7、类型判断</a><ul><li><a href="#1-typeof">（1）typeof</a></li><li><a href="#2-instanceof">（2）instanceof</a></li><li><a href="#3">（3）===</a></li><li><a href="#4-isnan">（4）isNaN</a></li></ul></li><li><a href="#8-symbol">8、Symbol +</a></li></ul></li><li><a href="#si-yun-suan-fu-he-biao-da-shi">四、运算符和表达式</a><ul><li><a href="#1-suan-zhu-yun-suan-fu">1、算术运算符</a><ul><li><a href="#jia-fa">加法</a></li><li><a href="#jian-fa-cheng-fa-chu-fa">减法、乘法、除法</a></li><li><a href="#qu-yu">取余</a></li><li><a href="#zi-zeng-zi-jian">自增、自减</a></li></ul></li><li><a href="#2-tiao-jian-yun-suan-fu">2、条件运算符</a></li><li><a href="#3-fu-zhi-yun-suan-fu">3、赋值运算符</a></li><li><a href="#4-luo-ji-yun-suan-fu">4、逻辑运算符</a><ul><li><a href="#duan-lu-yuan-li">短路原理</a></li></ul></li><li><a href="#5-qi-ta-yun-suan-fu">5、其他运算符</a></li><li><a href="#6-yun-suan-fu-de-you-xian-ji">6、运算符的优先级 +</a></li></ul></li><li><a href="#wu-liu-cheng-kong-zhi">五、流程控制</a><ul><li><a href="#1-fen-zhi-jie-gou">1、分支结构</a><ul><li><a href="#dan-fen-zhi-jie-gou-if">单分支结构 if</a></li><li><a href="#shuang-fen-zhi-jie-gou-if-else">双分支结构 if-else</a></li><li><a href="#duo-fen-zhi-jie-gou-else-if">多分支结构 else-if</a></li><li><a href="#duo-fen-zhi-jie-gou-switch">多分支结构 switch</a></li><li><a href="#chao-zhuang-jie-gou">巢状结构</a></li></ul></li><li><a href="#2-xun-huan-jie-gou">2、循环结构</a><ul><li><a href="#while-yu-ju">while 语句</a></li><li><a href="#do-while-yu-ju">do-while 语句</a></li><li><a href="#for-yu-ju">for 语句</a></li></ul></li><li><a href="#3-break-continue">3、break 、continue</a></li></ul></li><li><a href="#liu-cuo-wu-yu-yi-chang-chu-li">六、错误与异常处理</a><ul><li><a href="#1-cuo-wu-lei-xing">1、错误类型</a></li><li><a href="#2-try-catch">2、try…catch</a></li><li><a href="#3-throw">3、throw</a></li></ul></li><li><a href="#qi-shu-zu">七、数组 +</a><ul><li><a href="#1-chuang-jian-shu-zu">1. 创建数组</a></li><li><a href="#2-shu-zu-de-chang-du">2. 数组的长度</a></li><li><a href="#3-shu-zu-ji-ben-cao-zuo">3. 数组基本操作</a></li><li><a href="#4-shi-yong-for-bian-li-shu-zu">4. 使用 for 遍历数组</a></li><li><a href="#5-er-wei-shu-zu">5. 二维数组</a></li><li><a href="#6-kuo-zhan-yun-suan-fu">6、扩展运算符</a></li><li><a href="#7-qi-ta">7. 其他</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-ji-ben-gai-nian">一、基本概念</span><a href="#yi-ji-ben-gai-nian" class="header-anchor">#</a></h1><p><strong>JavaScript</strong> 最初的目的是为了“赋予网页生命”。</p><p>这种编程语言我们称之为<strong>脚本</strong>。它们可以写在 HTML 中，在页面加载的时候会自动执行。脚本作为纯文本存在和执行。它们不需要特殊的准备或编译即可运行。</p><ul><li>1995 JavaScript、JScript诞生</li><li>1997 ECMA给JS制定了标准<strong>ECMA-262</strong>，命名为<strong>ECMAScript</strong>，即ES1.0。<strong>ES是JS的规范标准，JS的ES的实现。</strong></li><li>1999 发布ES3，成为JS通用标准。</li><li>2009 发布ES5。</li><li>2013 ES6草案发布（其实就是之前不被接受的ES4激进方案）</li><li>2015 发布<strong>ES6</strong>，即ES2015，从此JS新版本按<code>ES+年份</code>形式发布。ES6是一个历史名词，也是一个泛指，代表ES6以后的新一代标准。</li></ul><h2><span id="p1-te-dian">1、特点</span><a href="#p1-te-dian" class="header-anchor">#</a></h2><p><strong>弱类型</strong> 数据类型不固定，可以随时改变。</p><p><strong>解释型</strong> 解释型是一行一行解释运行，编译型是需要整体编译。</p><p><strong>脚本语言</strong> 脚本是需要载体运行的。</p><p><strong>基于原型</strong> 只有对象，没有类，对象继承对象，而不是类继承类。<strong>原型对象</strong>是基于原型语言的核心概念。原型对象是新对象的模板，它将自身的属性共享给新对象。一个对象不但可以享有自己创建时和运行时定义的属性，而且可以享有原型对象的属性。</p><h2><span id="p2-zu-cheng">2、组成</span><a href="#p2-zu-cheng" class="header-anchor">#</a></h2><ul><li><strong>ECMA Script</strong> 核心语法，简称ES。</li><li><strong>DOM</strong> Document Object Model 文档对象模型。</li><li><strong>BOM</strong> Browser Object Model 浏览器对象模型。</li></ul><h2><span id="p3-wang-ye-zhong-shi-yong-js-de-fang-fa">3、网页中使用 JS 的方法</span><a href="#p3-wang-ye-zhong-shi-yong-js-de-fang-fa" class="header-anchor">#</a></h2><p>页面嵌入（常用）</p><p>行内写法（几乎不用，局限性大，代码分离性差，可读性不强）</p><p>外部文件引入（主流方式）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属性:</p><ul><li><code>src</code> 指定外部脚本的URI，如果设置了，标签内容会忽略</li><li><code>type</code> 指定脚本的语言，默认为JS。</li><li><code>async</code> 规定一旦脚本可用，则会异步执行。</li><li><code>defer</code> 是否对脚本执行进行延迟。</li></ul><h2><span id="p4-duan-dian-diao-shi-dai-geng-xin">4、断点调试（待更新）</span><a href="#p4-duan-dian-diao-shi-dai-geng-xin" class="header-anchor">#</a></h2><h1><span id="er-ji-ben-jie-gou-he-yu-fa">二、基本结构和语法</span><a href="#er-ji-ben-jie-gou-he-yu-fa" class="header-anchor">#</a></h1><h2><span id="p1-yu-ju-zhu-shi-fen-hao-kong-bai">1、语句、注释、分号、空白</span><a href="#p1-yu-ju-zhu-shi-fen-hao-kong-bai" class="header-anchor">#</a></h2><ul><li>语句是执行行为的语法结构和命令。分为 声明语句、调试语句<code>debugger</code>等。</li><li>注释的语法和C语言一样。</li><li>建议每个语句结束都加分号，否则可能会出现奇奇怪怪的BUG。程序会忽略空白，合适的空白与缩进可以保持良好的代码结构。</li></ul><h2><span id="p2-shu-chu">2、输出</span><a href="#p2-shu-chu" class="header-anchor">#</a></h2><ul><li>系统对话框（弹窗）: <code>alert()</code>、<code>confirm()</code>、<code>prompt()</code></li><li>控制台日志: <code>console.log()</code>、<code>console.dir()</code></li><li>直接显示在文档上: <code>document.write</code></li></ul><h2><span id="p3-bian-liang">3、变量</span><a href="#p3-bian-liang" class="header-anchor">#</a></h2><p><strong>变量</strong> 是一种用来储存数据的可变容器，是数据的命名储存，通常情况下由<strong>标识符</strong>和<strong>值</strong>构成。</p><h3><span id="p-1-bian-liang-ming-ming-biao-shi-fu-ming-ming-gui-ze">（1）变量命名/标识符命名规则</span><a href="#p-1-bian-liang-ming-ming-biao-shi-fu-ming-ming-gui-ze" class="header-anchor">#</a></h3><ul><li>由数字，字母，下划线，美元符组成。</li><li>不允许数字开头。</li><li>不能和关键字、保留字同名。</li><li>严格区分大小写。</li><li>变量的起名要有意义。避免使用拼音等。</li></ul><h3><span id="p-2-bian-liang-sheng-ming-he-bian-liang-fu-zhi">（2）变量声明和变量赋值</span><a href="#p-2-bian-liang-sheng-ming-he-bian-liang-fu-zhi" class="header-anchor">#</a></h3><p>优先使用<code>const</code> | <code>let</code> ，不要用 <code>var</code> 。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 声明一个变量</span><span class="token keyword">let</span> a<span class="token punctuation">;</span><span class="token comment">// 给变量赋值（第一次赋值可以称为初始化）</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 同时声明和初始化</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 一次定义和赋值多个变量</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 注意这种坑</span><span class="token keyword">let</span> e <span class="token operator">=</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//  f 没有声明</span><span class="token comment">// const 用于定义常量，常量通常是全大写</span><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p-3-kuai-ji-zuo-yong-yu">（3）块级作用域</span><a href="#p-3-kuai-ji-zuo-yong-yu" class="header-anchor">#</a></h3><table><thead><tr><th>特点</th><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>声明提升</td><td>会</td><td>不会</td><td>不会</td></tr><tr><td>块作用域<code>&#123;&#125;</code></td><td>没有</td><td>有</td><td>有</td></tr><tr><td>同一作用域多次声明</td><td>可以</td><td>不能</td><td>不能</td></tr><tr><td>基本数据</td><td>可变</td><td>可变</td><td>不可变</td></tr><tr><td>引用数据</td><td>可变</td><td>可变</td><td>地址不可变</td></tr></tbody></table><blockquote><p>for循环声明的let，只在内部生效</p><p>块级作用域和函数作用域类似，可以有作用链</p><p>for循环的声明语句是父作用域，语句块是子作用域</p></blockquote><h2><span id="p4-yan-ge-mo-shi">4、严格模式</span><a href="#p4-yan-ge-mo-shi" class="header-anchor">#</a></h2><p><code>ES6</code> 也称为现代模式，通过在全局第一行或者是函数第一行添加<code>&quot;use strict&quot;</code> 语句开启严格模式。（一旦打开，无法关闭）</p><p>特点：</p><ul><li>给未定义的元素赋值会抛出异常</li><li>删除不可删除的属性会抛出异常</li></ul><h1><span id="san-ji-ben-shu-ju-lei-xing">三、基本数据类型</span><a href="#san-ji-ben-shu-ju-lei-xing" class="header-anchor">#</a></h1><p>JS 数据类型分为<strong>基本数据类型</strong>和<strong>引用类型</strong>。</p><p>（1）基本数据类型</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>null</li><li>undefined</li><li>Symbol <code>ES6</code></li><li>bigInt <code>ES6</code></li></ul><p>（2） 引用类型</p><ul><li>Object</li><li>Array</li><li>Function</li><li>Map</li><li>Set</li></ul><h2><span id="p1-number">1、Number</span><a href="#p1-number" class="header-anchor">#</a></h2><p>这些是 <strong>数字 Number</strong> :</p><p>（1）整数: 1，-1</p><p>（2）小数（浮点数）: 0.1</p><ul><li>浮点数溢出：计算机对小数运算有偏差，比如 0.1 + 0.2 不会等于 0.3。如果需要解决这种问题，一是转成整数运算，二是使用专门的运算库。</li></ul><p>（3）科学计数法：<code>1.1e6</code>、<code>1.2E-7</code></p><p>（4）二进制<code>0b11</code>、八进制<code>012</code>、十六进制<code>0xff</code></p><p>（5）非数字：</p><ul><li><code>NaN</code>，Not a Number</li><li>具有污染性（粘性）。可以用 <code>isNaN()</code>来判断是不是数字。</li></ul><p>（6）无穷：<code>Infinity</code></p><p>（7）<code>Number.MAX_VALUE</code> <code>Number_MIN_VALUE</code></p><p>这是 <code>BigInt</code></p><p>（8）<code>BigInt</code></p><ul><li>这是一种<strong>新的数据类型</strong>，提供了任意长度整数的支持。</li><li><code>const bg = 123459857387593749573975938475347857n</code></li></ul><p>JS 所有的数字都是64位浮点数存储。</p><p><code>Number()</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token comment">//123</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"a123"</span><span class="token punctuation">)</span>  <span class="token comment">//NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parseInt</code></p><p>（1）值转换成整数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"a123"</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"1a123"</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）转换进制</p><p>第二个参数是要转换的进制，默认是10。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>parseFloat</code></p><p>值转换成浮点数。</p><p>如果变量<code>*1</code>会被自动转换成数值，如果无法转换，则是<code>NaN</code>。</p><h2><span id="p2-string">2、String</span><a href="#p2-string" class="header-anchor">#</a></h2><p><strong>字符串（String）</strong> 内容用单引号、双引号<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>、反引号<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>包起来。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 普通的字符串</span><span class="token string">"这是字符串"</span><span class="token string">'这也是字符串'</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>varName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">这也是字符串</span><span class="token template-punctuation string">`</span></span>  <span class="token comment">// 可以嵌入变量，格式$&#123;变量名&#125;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">这也是是字符串</span><span class="token template-punctuation string">`</span></span><span class="token comment">// 空串</span><span class="token string">""</span><span class="token comment">// 空白串</span><span class="token string">"   "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>.length</code> 获取字符串的长度</p><p><code>A+B</code> 连接A、B字符串</p><p>在ES5中，字符串可以作为只读数组使用，可以通过中括号运算符添加下标访问某值。</p><p><code>String()</code></p><p><code>.toString()</code></p><h2><span id="p3-boolean">3、Boolean</span><a href="#p3-boolean" class="header-anchor">#</a></h2><p>只有两个值，<strong>true</strong> 和 <strong>false</strong>。</p><h2><span id="p4-null">4、null</span><a href="#p4-null" class="header-anchor">#</a></h2><p>空对象指针。</p><p>常见环境：</p><ul><li>作为函数的参数，表示该函数的参数不是对象。</li><li>作为对象原型链的终点。</li><li>如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为null而不是其他值。</li><li>让变量指向的对象成为垃圾对象。</li></ul><h2><span id="p5-undefined">5、undefined</span><a href="#p5-undefined" class="header-anchor">#</a></h2><p>变量声明了但是未初始化的类型。</p><p>一般是代表错误类型。</p><p>常见环境：</p><ul><li>变量被声明了，但没有赋值时。</li><li>调用函数时，应该提供的参数没有提供，该参数为<code>undefined</code>。</li><li>对象没有赋值的属性。</li><li>函数没有返回值时，默认返回值。</li></ul><h2><span id="p6-lei-xing-zhuan-huan">6、类型转换 △</span><a href="#p6-lei-xing-zhuan-huan" class="header-anchor">#</a></h2><p>弱类型语言定义了类型以后，变量的类型可变，可自动转换。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><h3><span id="pqiang-zhi-lei-xing-zhuan-huan">强制类型转换</span><a href="#pqiang-zhi-lei-xing-zhuan-huan" class="header-anchor">#</a></h3><p>数值转换 <code>Number()</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">+</span><span class="token string">"22"</span>    <span class="token comment">//22</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token keyword">null</span> <span class="token comment">//5</span><span class="token string">"5"</span> <span class="token operator">+</span> <span class="token keyword">null</span> <span class="token comment">// "5null"</span><span class="token string">"5"</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token comment">// "51"</span><span class="token string">"5"</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th></th><th>typeof</th><th>Number()</th><th>parseInt()</th><th>String()</th><th>.toString()</th><th>Boolen()</th></tr></thead><tbody><tr><td><strong>Number</strong></td><td>-</td><td>-</td><td>-</td><td>转成字符串</td><td>转成字符串</td><td>0和NaN为false，其他都是true</td></tr><tr><td>0</td><td>number</td><td>-</td><td>-</td><td>“0”</td><td>“0”</td><td>false</td></tr><tr><td>1</td><td>number</td><td>-</td><td>-</td><td>“1”</td><td>“1”</td><td>true</td></tr><tr><td>-1</td><td>number</td><td>-</td><td>-</td><td>“-1”</td><td>“-1”</td><td>true</td></tr><tr><td>.2</td><td>number</td><td>0.2</td><td>0</td><td>“0.2”</td><td>“0.2”</td><td>true</td></tr><tr><td>NaN</td><td>number</td><td>-</td><td>NaN</td><td>“NaN”</td><td>“NaN”</td><td>==false==</td></tr><tr><td>Infinity</td><td>number</td><td>-</td><td>==NaN==</td><td>“Infinity”</td><td>“Infinity”</td><td>true</td></tr><tr><td><strong>String</strong></td><td>-</td><td>空串，空白串转成0，仅含数字直接转换，其他NaN</td><td>只会看前面的数字，如果没有就是NaN</td><td>-</td><td>-</td><td>非空字符串转成true</td></tr><tr><td>“”</td><td>string</td><td>==0==</td><td>NaN</td><td>-</td><td>-</td><td>==false==</td></tr><tr><td>&quot; &quot;</td><td>string</td><td>==0==</td><td>NaN</td><td>-</td><td>-</td><td>==true==</td></tr><tr><td>“123”</td><td>string</td><td>123</td><td>123</td><td>-</td><td>-</td><td>true</td></tr><tr><td>“10px”</td><td>string</td><td>NaN</td><td>==10==</td><td>-</td><td>-</td><td>true</td></tr><tr><td>“abc”</td><td>string</td><td>NaN</td><td>NaN</td><td>-</td><td>-</td><td>true</td></tr><tr><td><strong>Boolean</strong></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>true</td><td>boolean</td><td>1</td><td>NaN</td><td>“true”</td><td>“true”</td><td>-</td></tr><tr><td>false</td><td>boolean</td><td>0</td><td>NaN</td><td>“fasle”</td><td>“false”</td><td>-</td></tr><tr><td><strong>null</strong></td><td>==object==</td><td>==0==</td><td>NaN</td><td>“null”</td><td>==报错==</td><td>==false==</td></tr><tr><td><strong>undefined</strong></td><td>undefined</td><td>==NaN==</td><td>NaN</td><td>“undefined”</td><td>==报错==</td><td>==false==</td></tr></tbody></table><h3><span id="pyin-shi-lei-xing-zhuan-huan">隐式类型转换</span><a href="#pyin-shi-lei-xing-zhuan-huan" class="header-anchor">#</a></h3><p>通常和运算符相关联，规则和上面强制转换差不多。</p><h3><span id="pparseint">parseInt</span><a href="#pparseint" class="header-anchor">#</a></h3><p>可以转换进制。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">,</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// N -- 要转换的数</span><span class="token comment">// X -- 要转换的进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p7-lei-xing-pan-duan">7、类型判断</span><a href="#p7-lei-xing-pan-duan" class="header-anchor">#</a></h2><h3><span id="p-1-typeof">（1）typeof</span><a href="#p-1-typeof" class="header-anchor">#</a></h3><p>通过<code>typeof(表达式)</code>或者<code>typeof 变量</code>来获取值或者变量的数据类型。返回值是数据类型的小写形式。特例:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span class="token keyword">typeof</span> <span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// string </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="p-2-instanceof">（2）instanceof</span><a href="#p-2-instanceof" class="header-anchor">#</a></h3><p>判断对象的数据类型。</p><p>Array | Function | Object</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">A</span> <span class="token keyword">instanceof</span> <span class="token class-name">B</span> <span class="token comment">// A 是不是 B 的实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p-3">（3）===</span><a href="#p-3" class="header-anchor">#</a></h3><p>可以判断 <code>undefined</code> 和 <code>null</code>。</p><h3><span id="p-4-isnan">（4）isNaN</span><a href="#p-4-isnan" class="header-anchor">#</a></h3><p>检测参数是否为非数字值，仅当值为<code>NaN</code>时，返回<code>true</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>  <span class="token comment">// false</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="p8-symbol">8、Symbol +</span><a href="#p8-symbol" class="header-anchor">#</a></h2><p>ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。</p><h1><span id="si-yun-suan-fu-he-biao-da-shi">四、运算符和表达式</span><a href="#si-yun-suan-fu-he-biao-da-shi" class="header-anchor">#</a></h1><h2><span id="p1-suan-zhu-yun-suan-fu">1、算术运算符</span><a href="#p1-suan-zhu-yun-suan-fu" class="header-anchor">#</a></h2><h3><span id="pjia-fa">加法</span><a href="#pjia-fa" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 如果其中一个操作数是字符串，则会把另外一个操作数转换成字符串。  </span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'str'</span>   <span class="token comment">// 1str </span><span class="token string">'str'</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// str1    </span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'str'</span>  <span class="token comment">// 2str  </span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> str<span class="token punctuation">)</span>  <span class="token comment">// 11str</span><span class="token comment">// 如果都有是字符串，会拼接在一起  </span><span class="token string">'str'</span> <span class="token operator">+</span> <span class="token string">'is'</span>  <span class="token comment">// stris</span><span class="token comment">// 其他类型自动调用Number()进行转换  </span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment">// 2</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token keyword">null</span> <span class="token comment">// 0</span><span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// NaN</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span> <span class="token comment">// NaN</span><span class="token comment">// 放在非数值前面，则会自动调用Number()进行转换（不会影响本身）</span><span class="token operator">+</span><span class="token string">'123'</span> <span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pjian-fa-cheng-fa-chu-fa">减法、乘法、除法</span><a href="#pjian-fa-cheng-fa-chu-fa" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 如果有操作数是非字符，则自动调用Number()转换。</span><span class="token string">'99'</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token comment">// 99</span><span class="token string">'99'</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token comment">// 99</span><span class="token string">'99'</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token comment">// 99</span><span class="token comment">// 特殊</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token comment">// Infinity</span><span class="token number">Infinity</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// - Infinity</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token comment">// NaN </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pqu-yu">取余</span><a href="#pqu-yu" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">3</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token comment">// 3</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">0</span> <span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="pzi-zeng-zi-jian">自增、自减</span><a href="#pzi-zeng-zi-jian" class="header-anchor">#</a></h3><p><code>++i</code> 表示，i自增1后再参与其它运算（先加后用）；而 <code>i++</code> 则是i参与运算后，i的值再自增1。自增自减运算可能会改变原有变量类型。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token number">1</span> <span class="token operator">+</span> a<span class="token operator">++</span> <span class="token comment">// 101</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token operator">++</span>a <span class="token comment">// 102</span><span class="token comment">// 会改变原变量类型</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment">// a = 2</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span>i <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token comment">// i = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-tiao-jian-yun-suan-fu">2、条件运算符</span><a href="#p2-tiao-jian-yun-suan-fu" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 如果两个操作数都是字符串，比较对应的字符编码</span><span class="token string">"234"</span> <span class="token operator">></span> <span class="token string">"123455"</span> <span class="token comment">// true</span><span class="token comment">// == 和 === 的区别</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// true</span><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token comment">// false</span><span class="token comment">// 坑</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// false 相等比较不进行类型转换</span><span class="token keyword">null</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token comment">// true </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-fu-zhi-yun-suan-fu">3、赋值运算符</span><a href="#p3-fu-zhi-yun-suan-fu" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">a <span class="token operator">+=</span> b <span class="token comment">// 等价于 a = a + b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p4-luo-ji-yun-suan-fu">4、逻辑运算符</span><a href="#p4-luo-ji-yun-suan-fu" class="header-anchor">#</a></h2><p><code>&amp;&amp;</code> 与</p><ul><li>第一步：计算第一个操作数</li><li>第二步：如果第一个操作数转换成false，那么就会结束运算，直接第一个操作数</li><li>第三步：如果第一个操作数返回true，则计算第二个操作数的值</li><li>第四步：第二个操作数如果返回true  则逻辑与返回第二个操作数，否则返回第一个操作数</li></ul><p><code>||</code> 或</p><ul><li>第一步：计算第一个操作数的值。</li><li>第二步：检测第一个操作数的值。如果左侧的表达式的值可以转换为true，那么就会结束运算。直接返回第一个操作数的值</li><li>第三步：如果第一个操作数可以转换为false，则计算第二个操作数的值。并返回第二个操作数的值</li></ul><p><code>!</code> 非</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token comment">// 返回2</span><span class="token string">''</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token comment">// 返回''</span><span class="token string">"Cat"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"Dog"</span> <span class="token comment">// 返回”Dog"</span><span class="token string">''</span>    <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span>     <span class="token comment">// f &amp;&amp; f 返回 ""</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">''</span>        <span class="token comment">// f &amp;&amp; f 返回 false</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token comment">// 1</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token comment">// 2</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token comment">// null</span><span class="token string">''</span>    <span class="token operator">||</span> <span class="token boolean">false</span>     <span class="token comment">// f || f 返回 false</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token string">''</span>        <span class="token comment">// f || f 返回 ""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pduan-lu-yuan-li">短路原理</span><a href="#pduan-lu-yuan-li" class="header-anchor">#</a></h3><p>在逻辑运算中，如果第一个操作数就能决定结果，那么第二个操作数就不会运行了。（就算运行了会报错也能顺利通过）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>fasle <span class="token operator">&amp;&amp;</span> <span class="token function">qwq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="p5-qi-ta-yun-suan-fu">5、其他运算符</span><a href="#p5-qi-ta-yun-suan-fu" class="header-anchor">#</a></h2><p>逗号操作符</p><p>它能够先执行运算符左侧的操作数，然后再执行右侧的操作数，最后返回右侧操作数的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三元运算符：<code>运算元1?运算2:运算3</code></p><h2><span id="p6-yun-suan-fu-de-you-xian-ji">6、运算符的优先级 +</span><a href="#p6-yun-suan-fu-de-you-xian-ji" class="header-anchor">#</a></h2><table><thead><tr><th>优先级</th><th>符号 + 描述</th></tr></thead><tbody><tr><td>20</td><td><code>()</code> 分组</td></tr><tr><td>19</td><td><code>()</code> 函数调用 <code>.</code> <code>[]</code> 成员调用 <code>new</code> 创建</td></tr></tbody></table><blockquote><p>通常简要规则:  一元 &gt; 二元 &gt; 三元<br>使用圆括号</p></blockquote><h1><span id="wu-liu-cheng-kong-zhi">五、流程控制</span><a href="#wu-liu-cheng-kong-zhi" class="header-anchor">#</a></h1><h2><span id="p1-fen-zhi-jie-gou">1、分支结构</span><a href="#p1-fen-zhi-jie-gou" class="header-anchor">#</a></h2><h3><span id="pdan-fen-zhi-jie-gou-if">单分支结构 if</span><a href="#pdan-fen-zhi-jie-gou-if" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 语句块</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="pshuang-fen-zhi-jie-gou-if-else">双分支结构 if-else</span><a href="#pshuang-fen-zhi-jie-gou-if-else" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 语句块</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 语句块2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pduo-fen-zhi-jie-gou-else-if">多分支结构 else-if</span><a href="#pduo-fen-zhi-jie-gou-else-if" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//语句块1</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//语句块2</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//语句块3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pduo-fen-zhi-jie-gou-switch">多分支结构 switch</span><a href="#pduo-fen-zhi-jie-gou-switch" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// switch</span><span class="token comment">// 全等匹配</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>值<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 如果不加大括号，整个switch内作用域相同</span>  <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>      代码块<span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  <span class="token comment">// 可省略</span>  <span class="token keyword">default</span><span class="token operator">:</span>      代码块<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pchao-zhuang-jie-gou">巢状结构</span><a href="#pchao-zhuang-jie-gou" class="header-anchor">#</a></h3><p>各种嵌套。</p><h2><span id="p2-xun-huan-jie-gou">2、循环结构</span><a href="#p2-xun-huan-jie-gou" class="header-anchor">#</a></h2><h3><span id="pwhile-yu-ju">while 语句</span><a href="#pwhile-yu-ju" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 先判断，再执行</span><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    代码块   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pdo-while-yu-ju">do-while 语句</span><a href="#pdo-while-yu-ju" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 先执行一次，再判断</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="pfor-yu-ju">for 语句</span><a href="#pfor-yu-ju" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 条件表达式<span class="token punctuation">;</span> 步增表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 代码块</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化</span><span class="token comment">// 条件判断</span><span class="token comment">// 代码块</span><span class="token comment">// 步增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p3-break-continue">3、break 、continue</span><a href="#p3-break-continue" class="header-anchor">#</a></h2><p><code>break</code></p><p>跳出switch语句，跳出一层循环。</p><p><code>continue</code></p><p>结束本次循环，进行下次循环。</p><p><code>label</code></p><ul><li>在JS中，label语句可以为一行语句添加标签，以方便在复杂的结构中设置跳转目标。</li><li>语法如下：<code>label:语句</code></li><li>label可以是任意合法的标识符，然后使用冒号分割标签名与标签语句。</li><li>label和break语句配合使用，主要应用在循环结构、多分枝结构中，以便与跳出内层嵌套体。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>outermost<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span> outermost<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>禁止<code>break</code> 和<code>continue</code> 写在三元运算符<code>?</code>右边。</p><h1><span id="liu-cuo-wu-yu-yi-chang-chu-li">六、错误与异常处理</span><a href="#liu-cuo-wu-yu-yi-chang-chu-li" class="header-anchor">#</a></h1><p>ECMA-262 规范了7种错误类型。其中<code>Error</code>是基类，其他6种错误类型是子类，都继承了基类。基类的主要作用是自定义错误对象。</p><h2><span id="p1-cuo-wu-lei-xing">1、错误类型</span><a href="#p1-cuo-wu-lei-xing" class="header-anchor">#</a></h2><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>Error</code></td><td>基类 <br><code>name</code> 可以读写异常类型（TypeError）<br><code>message</code> 可以读写详细的错误信息。</td></tr><tr><td><code>EvalError</code></td><td>不正确使用eval()方法时抛出</td></tr><tr><td><code>SyntaxError</code></td><td><strong>语法错误</strong></td></tr><tr><td><code>ReferenceError</code></td><td>读取不存在的变量时抛出</td></tr><tr><td><code>TypeError</code></td><td>值的类型发生错误的时候抛出</td></tr><tr><td><code>RangeError</code></td><td>数字超出合法范围</td></tr><tr><td><code>URIError</code></td><td>URI编码和解码错误</td></tr></tbody></table><h2><span id="p2-try-catch">2、try…catch</span><a href="#p2-try-catch" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 调试代码块</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 捕获异常，并进行异常处理代码块</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下 <code>try...catch</code> 就够用了。</p><p>按顺序执行 try 子句中的代码，如果没有异常发生，将会忽略 catch 跳转到 finally 子句继续执行。</p><p>无法捕获逻辑错误。</p><h2><span id="p3-throw">3、throw</span><a href="#p3-throw" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 抛出错误</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抛出错误之后，后续代码不会执行。</p><h1><span id="qi-shu-zu">七、数组 +</span><a href="#qi-shu-zu" class="header-anchor">#</a></h1><p><strong>数组（Array）</strong> 是一种引用类型，是<strong>有序</strong>的数据集合。它的**数组下标（index）**从0开始。数组中的每个成员被称为元素，不同元素的值可以为不同类型，数组的长度是弹性的，可读写的。</p><h2><span id="p1-chuang-jian-shu-zu">1. 创建数组</span><a href="#p1-chuang-jian-shu-zu" class="header-anchor">#</a></h2><p>（1）构造函数方式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  1. Array 如果仅一个元素且是数值，将创建数值个数元素的数组。</span><span class="token comment">//  2. new可以省略。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）字面量方式（常用）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-shu-zu-de-chang-du">2. 数组的长度</span><a href="#p2-shu-zu-de-chang-du" class="header-anchor">#</a></h2><h2><span id="p3-shu-zu-ji-ben-cao-zuo">3. 数组基本操作</span><a href="#p3-shu-zu-ji-ben-cao-zuo" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 1. 查看元素</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// 查看第二个元素</span><span class="token comment">// 2. 修改元素</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">// 3. 在尾部加入一个元素（push方法替代）</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-shi-yong-for-bian-li-shu-zu">4. 使用 for 遍历数组</span><a href="#p4-shi-yong-for-bian-li-shu-zu" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 冒泡排序法</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 斐波那契数列</span><span class="token comment">// 打印出斐波那契数列的前100个值在数组中</span><span class="token comment">// 1,2,3,5,8,13 初始值1和2   其他的值是前两个值的和</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p5-er-wei-shu-zu">5. 二维数组</span><a href="#p5-er-wei-shu-zu" class="header-anchor">#</a></h2><p>JS不支持多维数组，设置元素值为数组可以看成是一个<strong>二维数组</strong>。</p><h2><span id="p6-kuo-zhan-yun-suan-fu">6、扩展运算符</span><a href="#p6-kuo-zhan-yun-suan-fu" class="header-anchor">#</a></h2><p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，目前也可以用来展开数组。</p><h2><span id="p7-qi-ta">7. 其他</span><a href="#p7-qi-ta" class="header-anchor">#</a></h2><p>类数组 也称为伪数组，就是类似数组结构的对象。这个对象的属性名为非负整数，并且从0开始，有序递增，同时包含 <code>length</code> 属性，确保其值与有序下标属性个数保持一致，方便进行迭代操作。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 遍历伪数组</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arrayLike<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token comment">// 转数组</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arrayLike <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>空位数组 就是数组中包含空元素。所谓空元素，就是在语法上数组中两个逗号之间没有任何值。空元素可以读写，<code>length</code>属性不排斥空位，如果使用for语句和<code>length</code>属性遍历数组，空元素都可以被读取，空元素返回值为<code>undefined</code>。出现空位数组的情况如下:</p><ul><li>直接量定义</li><li>构造函数定义</li><li><code>delete</code>删除</li></ul><p>关联数组 如果数组的下标值超出范围，如负数、浮点数、布尔值、对象或其他值，JS会自动把它转换为一个字符串，并定义为关联数组。关联数组就是与数组关联的对象，简单地说就是数组对象，字符串下标就是数组对象的属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3.1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"haha"</span><span class="token punctuation">;</span> <span class="token comment">// 相当于给数组扩展了一些属性和方法</span>arr<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"buer"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr12<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr12<span class="token punctuation">[</span><span class="token number">3.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>碰到使用这些符号的字符串时使用转义字符<code>\</code>。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>ES6新增的模版字符串。不兼容IE678。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>强类型语言在声明之前要指定数据类型。 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 技术栈基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布局综合</title>
      <link href="/02/08-%E5%B8%83%E5%B1%80%E7%BB%BC%E5%90%88/"/>
      <url>/02/08-%E5%B8%83%E5%B1%80%E7%BB%BC%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-bfc">一、BFC</a><ul><li><a href="#1-chuang-jian-bfc">1、创建BFC</a></li><li><a href="#2-bfc-de-fan-wei">2、BFC的范围</a></li><li><a href="#3-bfc-de-te-xing">3、BFC的特性</a></li><li><a href="#4-bfc-de-ying-yong">4、BFC的应用</a></li><li><a href="#5-ifc-gui-ze">5、IFC规则</a></li></ul></li><li><a href="#er-bu-ju-ying-yong">二、布局应用</a><ul><li><a href="#1-bu-ju-chang-yong-dan-ci">1、布局常用单词</a></li><li><a href="#2-wang-ye-de-ban-xin">2、网页的版心</a></li><li><a href="#3-shui-ping-chui-zhi-ju-zhong">3、水平垂直居中 △</a></li><li><a href="#4-qi-ta-bu-ju">4、其他布局</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-bfc">一、BFC</span><a href="#yi-bfc" class="header-anchor">#</a></h1><p>BFC，块级格式化上下文。</p><h2><span id="p1-chuang-jian-bfc">1、创建BFC</span><a href="#p1-chuang-jian-bfc" class="header-anchor">#</a></h2><ul><li><strong>根元素</strong></li><li><strong>浮动（float 不为 none）</strong></li><li><strong>绝对定位 或者 固定定位</strong></li><li>表格的标题和单元格，匿名表格单元格元素</li><li><strong>行内块元素</strong></li><li><strong>overflow的值不为visible</strong></li></ul><h2><span id="p2-bfc-de-fan-wei">2、BFC的范围</span><a href="#p2-bfc-de-fan-wei" class="header-anchor">#</a></h2><blockquote><p>A block formatting context contains everything inside of the element creating it, that is not also inside a descendant element that creates a new block formatting context.</p></blockquote><p>直译过来就是, BFC包含创建它的元素的所有子元素, 但不包括创建了新BFC的子元素的内部元素。简单来说，子元素如果又创建了一个新的 BFC，那么它里面的内容就不属于上一个 BFC 了，这体现了 BFC隔离 的思想。<br>也就是所说，<strong>一个元素不能同时存在于两个 BFC 中</strong>。</p><h2><span id="p3-bfc-de-te-xing">3、BFC的特性</span><a href="#p3-bfc-de-te-xing" class="header-anchor">#</a></h2><p>BFC 除了会创建一个隔离的空间外，还具有以下特性：</p><ul><li>BFC 内部的块级盒会在垂直方向上一个接一个排列。</li><li>同一BFC下的相邻块级元素可能发生外边距折叠，创建新的BFC可以避免外边距折叠。（解决塌陷）</li><li>浮动盒的区域不会和BFC重叠</li><li>计算BFC的高度时，浮动元素也会参与计算</li></ul><h2><span id="p4-bfc-de-ying-yong">4、BFC的应用</span><a href="#p4-bfc-de-ying-yong" class="header-anchor">#</a></h2><ul><li><p>自适应多栏布局<br>中间栏创建 BFC，左右栏宽度固定后浮动。由于盒子的 margin box 的左边和包含块 border box 的左边相接触，同时浮动盒的区域不会和 BFC 重叠，所以中间栏的宽度会自适应。</p></li><li><p>防止外边距折叠<br>创建新的 BFC ，让相邻的块级盒位于不同 BFC 下可以防止外边距折叠</p></li><li><p>清除浮动<br>BFC 内部的浮动元素也会参与高度计算，可以清除 BFC 内部的浮动</p></li></ul><h2><span id="p5-ifc-gui-ze">5、IFC规则</span><a href="#p5-ifc-gui-ze" class="header-anchor">#</a></h2><p>IFC，行内格式化上下文。</p><h1><span id="er-bu-ju-ying-yong">二、布局应用</span><a href="#er-bu-ju-ying-yong" class="header-anchor">#</a></h1><h2><span id="p1-bu-ju-chang-yong-dan-ci">1、布局常用单词</span><a href="#p1-bu-ju-chang-yong-dan-ci" class="header-anchor">#</a></h2><table><thead><tr><th>单词</th><th>意思</th></tr></thead><tbody><tr><td><code>header</code></td><td>头部、页眉</td></tr><tr><td><code>logo</code></td><td>标志</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>nav</code>、<code>sub_nav</code></td><td>导航、子导航</td></tr><tr><td><code>banner</code></td><td>横幅广告</td></tr><tr><td><code>main</code>、<code>content</code></td><td>主体、内容</td></tr><tr><td><code>container</code>、<code>con</code></td><td>容器</td></tr><tr><td><code>box</code></td><td>盒子</td></tr><tr><td><code>area</code></td><td>区域</td></tr><tr><td><code>wrapper</code>、<code>wrap</code></td><td>包裹</td></tr><tr><td><code>menu</code></td><td>菜单</td></tr><tr><td><code>list</code></td><td>列表</td></tr><tr><td><code>section</code></td><td>分区、分块</td></tr><tr><td><code>article</code></td><td>文章</td></tr><tr><td><code>aside</code></td><td>侧边栏</td></tr><tr><td><code>footer</code></td><td>页脚、底部</td></tr><tr><td><code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code></td><td>顶部 底部 左部 右部</td></tr><tr><td><code>prev</code>、<code>next</code></td><td>上一个、下一个</td></tr></tbody></table><h2><span id="p2-wang-ye-de-ban-xin">2、网页的版心</span><a href="#p2-wang-ye-de-ban-xin" class="header-anchor">#</a></h2><p>待更新。</p><h2><span id="p3-shui-ping-chui-zhi-ju-zhong">3、水平垂直居中 △</span><a href="#p3-shui-ping-chui-zhi-ju-zhong" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/* 公共代码 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>line-height</p><p>absolute + margin auto</p><p>absolute + 负margin</p><p>absolute + calc</p><p>absolute + transform: translate</p><p>flex</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>writing-mode</p><p>table</p><p>css-table</p><p>grid</p><h2><span id="p4-qi-ta-bu-ju">4、其他布局</span><a href="#p4-qi-ta-bu-ju" class="header-anchor">#</a></h2><p>Stick Footer 粘连布局</p><p>三列布局</p><p>等高布局</p><p>圣杯布局</p><p>双飞翼布局</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LESS</title>
      <link href="/02/12-LESS/"/>
      <url>/02/12-LESS/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-less">一、LESS</a><ul><li><a href="#1-an-zhuang">1、安装</a></li><li><a href="#2-te-xing">2、特性</a></li><li><a href="#3-shi-yong">3、使用</a></li></ul></li><li><a href="#er-ji-ben-yu-fa">二、基本语法</a><ul><li><a href="#1-zhu-shi">1、注释</a></li><li><a href="#2-bian-liang">2、变量</a></li><li><a href="#3-qian-tao-gui-ze">3、嵌套规则</a></li><li><a href="#4-yun-suan">4、运算</a></li><li><a href="#5-hun-he">5、混合</a></li><li><a href="#6-mo-shi-pi-pei-he-shou-wei">6、模式匹配和守卫</a></li><li><a href="#7-zi-fu-chuan-cha-zhi">7、字符串插值</a></li><li><a href="#8-han-shu">8、函数</a></li><li><a href="#9-wen-jian-dao-ru">9、文件导入</a></li><li><a href="#10-zhuan-yi">10、转义</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-less">一、LESS</span><a href="#yi-less" class="header-anchor">#</a></h1><p><strong><code>less</code></strong> 是一种动态样式语言，属于CSS预处理器，扩展了CSS语言，增加了变量、混合（Mixin）、函数等特性，使CSS更易维护和扩展。LESS既可以在客户端浏览器上运行，也能借助NODE.JS在服务器端运行。</p><blockquote><p>CSS 自诞生以来，基本语法和核心机制一直没有本质上的变化，它的发展几乎全是表现力层面上的提升。最开始 CSS 在网页中的作用只是辅助性的装饰，轻便易学是最大的需求；然而如今网站的复杂度已经不可同日而语，原生 CSS 已经让开发者力不从心。当一门语言的能力不足而用户的运行环境又不支持其它选择的时候，这门语言就会沦为 “编译目标” 语言。开发者将选择另一门更高级的语言来进行开发，然后编译到底层语言以便实际运行。于是，在前端领域，CSS 预处理器应运而生。而 CSS 这门古老的语言以另一种方式 “重新适应” 了网页开发的需求。</p></blockquote><h2><span id="p1-an-zhuang">1、安装</span><a href="#p1-an-zhuang" class="header-anchor">#</a></h2><p><a href="http://lesscss.cn/">中文</a> | <a href="http://lesscss.org/">英文</a> | <strong><a href="http://www.lesscss.net/">源码</a></strong></p><p><a href="https://less.bootcss.com/">BOOTCSS</a></p><ol><li>安装 Node.JS</li><li>通过命令行程序，<code>node -v</code> 和 <code>npm -v</code> 检查是否安装成功。</li><li>使用<code>npm i -g less</code> 进行全局安装 less, 并输入 <code>lessc -V</code> 检查版本</li></ol><h2><span id="p2-te-xing">2、特性</span><a href="#p2-te-xing" class="header-anchor">#</a></h2><ul><li>动态样式 CSS是非程式式语言，需要书写大量没有逻辑的代码，不方便维护和扩展、复用。</li><li>预处理器 生成CSS前某一语法的处理程序。</li></ul><table><thead><tr><th>预处理器</th><th>特点</th></tr></thead><tbody><tr><td><code>less</code></td><td>支持原生js、node<br>让CSS有基本的逻辑运算能力<br>基于js写的</td></tr><tr><td><code>sass</code></td><td><code>ruby</code>环境</td></tr><tr><td><code>stylus</code></td><td><code>vue</code>开发阶段使用</td></tr></tbody></table><h2><span id="p3-shi-yong">3、使用</span><a href="#p3-shi-yong" class="header-anchor">#</a></h2><p>(1) <code>style</code>标签类型改成<code>less</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet/less"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"styles.less"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还需要一个编译相关的js文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdnjs.cloudflare.com/ajax/libs/less.js/3.11.1/less.min.js<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2) 在命令行编译less文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lessc styles.less styles.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(3) 通过VSCode的<code>Easy LESS</code>插件，在文件夹新建less文件，保存，即可在当前文件夹编译出相应的css文件。</p><h1><span id="er-ji-ben-yu-fa">二、基本语法</span><a href="#er-ji-ben-yu-fa" class="header-anchor">#</a></h1><h2><span id="p1-zhu-shi">1、注释</span><a href="#p1-zhu-shi" class="header-anchor">#</a></h2><p><code>//</code> 和 <code>/**/</code> 后者可以被注释到CSS文件中。</p><h2><span id="p2-bian-liang">2、变量</span><a href="#p2-bian-liang" class="header-anchor">#</a></h2><p>LESS 允许我们定义一些变量来管理CSS，变量需以<code>@</code>开头。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less">&#x2F;&#x2F; 定义@test: 10px;&#x2F;&#x2F; 使用width: @test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意作用域。</p><p>作为选择器名字、声明一个属性的名称 <code>@&#123;a&#125;</code></p><h2><span id="p3-qian-tao-gui-ze">3、嵌套规则</span><a href="#p3-qian-tao-gui-ze" class="header-anchor">#</a></h2><p><code>&amp;:</code> 父级引用</p><h2><span id="p4-yun-suan">4、运算</span><a href="#p4-yun-suan" class="header-anchor">#</a></h2><h2><span id="p5-hun-he">5、混合</span><a href="#p5-hun-he" class="header-anchor">#</a></h2><p>类似函数。</p><h2><span id="p6-mo-shi-pi-pei-he-shou-wei">6、模式匹配和守卫</span><a href="#p6-mo-shi-pi-pei-he-shou-wei" class="header-anchor">#</a></h2><p>重载，根据参数的个数来选择混合。</p><h2><span id="p7-zi-fu-chuan-cha-zhi">7、字符串插值</span><a href="#p7-zi-fu-chuan-cha-zhi" class="header-anchor">#</a></h2><h2><span id="p8-han-shu">8、函数</span><a href="#p8-han-shu" class="header-anchor">#</a></h2><h2><span id="p9-wen-jian-dao-ru">9、文件导入</span><a href="#p9-wen-jian-dao-ru" class="header-anchor">#</a></h2><h2><span id="p10-zhuan-yi">10、转义</span><a href="#p10-zhuan-yi" class="header-anchor">#</a></h2><p>有时候，当需要引入无效的CSS语法或Less不能识别的字符，就需要使用转义字符。此时，就可以在字符串前面加一个<code>~</code>，并将需要转义的字符串放在<code>&quot; &quot;</code>中。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 盒模型</title>
      <link href="/02/04-%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>/02/04-%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-he-zi-mo-xing">一、盒子模型</a><ul><li><a href="#1-biao-zhun-mo-xing-he-guai-yi-mo-xing">1、标准模型和怪异模型</a></li><li><a href="#2-content-ceng">2、content 层</a><ul><li><a href="#2-1-width-height">2.1 width/height</a></li><li><a href="#2-2-min-max-width-height">2.2 min/max-width/height</a></li></ul></li><li><a href="#3-padding-nei-bian-ju-ceng">3、padding 内边距层</a></li><li><a href="#4-border-bian-kuang-ceng">4、border 边框层</a><ul><li><a href="#4-1-bian-kuang-shu-xing">4.1 边框属性</a></li><li><a href="#4-2-border-radius-yuan-jiao-bian-kuang">4.2 border-radius 圆角边框</a></li></ul></li><li><a href="#5-margin-ceng">5、margin 层</a><ul><li><a href="#5-1-he-xie">5.1 合写</a></li><li><a href="#5-2-shui-ping-fang-xiang-shang-de-auto">5.2 水平方向上的auto</a></li><li><a href="#5-3-shu-zhi-fang-xiang-de-auto">5.3 竖直方向的auto</a></li><li><a href="#5-4-ta-xian-he-bian-kuang-he-bing-wen-ti">5.4 塌陷和边框合并问题</a></li><li><a href="#5-5-margin-fu-zhi">5.5 margin 负值</a></li><li><a href="#5-6-zhi-chi-xing">5.6 支持性</a></li></ul></li><li><a href="#6-outline">6、outline</a></li></ul></li><li><a href="#er-display">二、display</a></li><li><a href="#san-overflow">三、overflow</a></li></ul><!-- tocstop --></div><h1><span id="yi-he-zi-mo-xing">一、盒子模型</span><a href="#yi-he-zi-mo-xing" class="header-anchor">#</a></h1><p>在 HTML 中把每个元素当成一个盒子，元素拥有盒子的平面外形和空间。</p><p><img src="/images/2020/%E7%9B%92%E6%A8%A1%E5%9E%8B.png" alt="盒模型"></p><h2><span id="p1-biao-zhun-mo-xing-he-guai-yi-mo-xing">1、标准模型和怪异模型</span><a href="#p1-biao-zhun-mo-xing-he-guai-yi-mo-xing" class="header-anchor">#</a></h2><p>分为<strong>标准盒模型</strong>和<strong>怪异盒模型</strong>。</p><h2><span id="p2-content-ceng">2、content 层</span><a href="#p2-content-ceng" class="header-anchor">#</a></h2><h3><span id="p2-1-width-height">2.1 width/height</span><a href="#p2-1-width-height" class="header-anchor">#</a></h3><p>width设置的坑 如果设置宽度为100%，并且有border margin  padding等属性值的时候，宽度可能超出。因为width内容区域已经和父级一样了，所以可以不设置宽度或者设置宽度为auto那么内容的宽度就是可以充分利用可使用空间。</p><p>height设置的坑 如果高度设置百分比，必须父级有一个显性的设置一个height属性，并且不能是auto。</p><h3><span id="p2-2-min-max-width-height">2.2 min/max-width/height</span><a href="#p2-2-min-max-width-height" class="header-anchor">#</a></h3><table><thead><tr><th></th><th>正常</th><th>最小</th><th>最大</th></tr></thead><tbody><tr><td>宽度</td><td>width</td><td>min-width</td><td>max-width</td></tr><tr><td>高度</td><td>height</td><td>min-height</td><td>max-height</td></tr></tbody></table><p>当min-width和max-width 冲突的时候，min-width是优先的。当width和 min或max冲突以后，min或者max直接无视width的存在（无论是否添加 ！important）。</p><h2><span id="p3-padding-nei-bian-ju-ceng">3、padding 内边距层</span><a href="#p3-padding-nei-bian-ju-ceng" class="header-anchor">#</a></h2><p>padding的写法和margin一致</p><p>padding主要撑开内容和边框之间的距离</p><p>padding不支持负值</p><p>padding对所有属性的元素都支持，但是对于行内元素撑不开上下的距离</p><p>padding可以用于扩大点击范围</p><h2><span id="p4-border-bian-kuang-ceng">4、border 边框层</span><a href="#p4-border-bian-kuang-ceng" class="header-anchor">#</a></h2><h3><span id="p4-1-bian-kuang-shu-xing">4.1 边框属性</span><a href="#p4-1-bian-kuang-shu-xing" class="header-anchor">#</a></h3><p>border</p><ul><li>border-width 线的宽度</li><li>border-style 线的类型<ul><li>solid 实线</li><li>dashed 虚线</li><li>dotted 点状线</li></ul></li><li>border-color 线的颜色</li><li>border:none 不设置边框</li></ul><blockquote><p>边框还分为4个方向  要么直接设置4个方向，要么一个个方向单独设置</p></blockquote><p>练习：边框画三角形</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 100px solid #000<span class="token punctuation">;</span>    <span class="token property">border-left-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token property">border-right-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p4-2-border-radius-yuan-jiao-bian-kuang">4.2 border-radius 圆角边框</span><a href="#p4-2-border-radius-yuan-jiao-bian-kuang" class="header-anchor">#</a></h3><p>CSS3。</p><table><thead><tr><th>border-radius</th><th>描述</th></tr></thead><tbody><tr><td>A1 B1 C1 D1/A2 B2 C2 D2</td><td>水平/垂直，左上角开始顺时针</td></tr><tr><td>A B C D</td><td></td></tr><tr><td>M/N</td><td>水平/垂直</td></tr><tr><td>50px 100px</td><td>AC BD</td></tr><tr><td>50%</td><td>八个值一样</td></tr></tbody></table><h2><span id="p5-margin-ceng">5、margin 层</span><a href="#p5-margin-ceng" class="header-anchor">#</a></h2><p>margin的作用是撑开当前元素和其他元素的距离。margin有四个方向，可以分别设置<code>margin-left</code> <code>margin-right</code> <code>margin-top</code> <code>margin-bottom</code>，margin的left和top是让当前元素向右向下移动，margin的right和bottom是让元素的兄弟元素向右向下移动，不影响自身。</p><h3><span id="p5-1-he-xie">5.1 合写</span><a href="#p5-1-he-xie" class="header-anchor">#</a></h3><ul><li>4个值：<strong>上 右 下 左</strong>（从上开始顺时针）</li><li>3个值：上 左右 下</li><li>2个值：上下 左右</li><li>1个值：上下左右</li></ul><h3><span id="p5-2-shui-ping-fang-xiang-shang-de-auto">5.2 水平方向上的auto</span><a href="#p5-2-shui-ping-fang-xiang-shang-de-auto" class="header-anchor">#</a></h3><p>因为块标签拥有满行属性，但是设置宽度以后，剩余的空间就是默认的margin，设置左右的margin值为auto，那么剩余的margin就会平分到左右两边。</p><h3><span id="p5-3-shu-zhi-fang-xiang-de-auto">5.3 竖直方向的auto</span><a href="#p5-3-shu-zhi-fang-xiang-de-auto" class="header-anchor">#</a></h3><p>相对于水平方向来说，块元素在垂直方向上并没有满屏的属性，margin默认在上下的值都是0，并没有剩余空间去平分。</p><h3><span id="p5-4-ta-xian-he-bian-kuang-he-bing-wen-ti">5.4 塌陷和边框合并问题</span><a href="#p5-4-ta-xian-he-bian-kuang-he-bing-wen-ti" class="header-anchor">#</a></h3><ul><li>父级塌陷：父级的第一个子元素的上margin和最后一个子元素的下margin会进行塌陷给父级，这样的设计是为了方便父级和他的兄弟进行垂直margin的合并，避免缝隙过大。</li><li>解决塌陷：给父级开启BFC，给父级设置边框。</li><li>兄弟的margin垂直方向会进行折叠，取最大值 。</li></ul><h3><span id="p5-5-margin-fu-zhi">5.5 margin 负值</span><a href="#p5-5-margin-fu-zhi" class="header-anchor">#</a></h3><ul><li>margin-top为负值：元素向上走，不会影响上边的元素的位置（会出现重叠），并且下边的兄弟元素会跟着一起向上走。</li><li>margin-left为负值：元素向左走，不会影响前边的元素位置(会出现重叠)，右边兄弟元素会跟随移动。</li><li>margin-right为负值：元素不会移动，形态大小也不会发生改变，但是所占用的位置会减少（负margin的值），所以，后边的兄弟元素会自动向左走。</li><li>margin-bottom为负值：元素不会移动，形态大小也不会发生改变，但是所占用的位置会减少（负margin的值），所以，后边的兄弟元素会自动向上走。</li></ul><h3><span id="p5-6-zhi-chi-xing">5.6 支持性</span><a href="#p5-6-zhi-chi-xing" class="header-anchor">#</a></h3><p><code>margin</code> 完美支持块元素和行内块元素，不支持行元素的垂直方向。</p><h2><span id="p6-outline">6、outline</span><a href="#p6-outline" class="header-anchor">#</a></h2><p><code>outline</code> 轮廓层。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 去掉轮廓 */</span><span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="er-display">二、display</span><a href="#er-display" class="header-anchor">#</a></h1><p>控制元素的显示状态。</p><table><thead><tr><th><code>display</code></th><th>描述说明</th></tr></thead><tbody><tr><td><code>inline</code></td><td>让元素以行属性显示</td></tr><tr><td><code>block</code></td><td>让元素以块属性显示</td></tr><tr><td><code>inline-block</code></td><td>让元素以行内块属性显示</td></tr><tr><td><code>none</code></td><td>带着所有子元素隐藏，直接消失</td></tr><tr><td><code>flex</code></td><td>开启弹性布局</td></tr></tbody></table><p><code>display:none</code> 隐藏的元素，不可以被js获取DOM节点及相关的样式属性。让隐藏的元素显示，只需要修改display属性的值不为none即可。</p><h1><span id="san-overflow">三、overflow</span><a href="#san-overflow" class="header-anchor">#</a></h1><p>内容溢出设置。</p><table><thead><tr><th><code>overflow</code></th><th>描述</th></tr></thead><tbody><tr><td><code>visible</code></td><td>默认值<br>超出正常显示，但是不会影响其他元素的位置</td></tr><tr><td><code>hidden</code></td><td>超出部分隐藏</td></tr><tr><td><code>scroll</code></td><td>无论是否超出都生成滚动条</td></tr><tr><td><code>auto</code></td><td>自动生成滚动条，当内容溢出生成滚动条，否则不生成</td></tr></tbody></table><p><strong><code>overflow-x</code></strong> 和 <strong><code>overflow-y</code></strong> 可以单独控制一个方向的内容溢出设置。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹性布局 &amp; 网格布局</title>
      <link href="/02/07-%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
      <url>/02/07-%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-dan-xing-bu-ju-flex">一、弹性布局 - flex</a><ul><li><a href="#1-kai-qi-dan-xing-bu-ju">1、开启弹性布局</a></li><li><a href="#2-shu-xing">2、属性</a><ul><li><a href="#2-01-zhu-zhou-fu-yu-kong-jian-guan-li-justify-content">2.01 主轴富余空间管理 - justify-content</a></li><li><a href="#2-02-ce-zhou-fu-yu-kong-jian-guan-li-align-items">2.02 侧轴富余空间管理 - align-items</a></li><li><a href="#2-03-zhu-zhou-bu-ju-fang-xiang-flex-direction">2.03 主轴布局方向 - flex-direction</a></li><li><a href="#2-04-xiang-mu-huan-xing-flex-wrap">2.04 项目换行 - flex-wrap</a></li><li><a href="#2-05-kong-zhi-zheng-ti-ce-zhou-de-fu-yu-kong-jian-align-content">2.05 控制整体侧轴的富裕空间 - align-content</a></li><li><a href="#2-06-he-xie-flex-flow">2.06 合写 - flex-flow</a></li><li><a href="#2-07-pai-xu-order">2.07 排序 - order</a></li><li><a href="#2-08-dan-xing-kong-jian-fen-pei-flex-grow">2.08 弹性空间分配 - flex-grow</a></li><li><a href="#2-09-zi-shen-ce-zhou-kong-zhi-align-self">2.09 自身侧轴控制 - align-self</a></li><li><a href="#2-10-xiang-mu-shen-suo-lu-shrink">2.10 项目伸缩率 - shrink</a></li><li><a href="#2-11-zi-yuan-su-ji-zhun-zhi-flex-basis">2.11 子元素基准值 - flex-basis</a></li><li><a href="#2-12-he-xie-flex">2.12 合写 - flex</a></li></ul></li></ul></li><li><a href="#er-wang-ge-bu-ju-grid">二、网格布局 - grid</a></li></ul><!-- tocstop --></div><h1><span id="yi-dan-xing-bu-ju-flex">一、弹性布局 - flex</span><a href="#yi-dan-xing-bu-ju-flex" class="header-anchor">#</a></h1><h2><span id="p1-kai-qi-dan-xing-bu-ju">1、开启弹性布局</span><a href="#p1-kai-qi-dan-xing-bu-ju" class="header-anchor">#</a></h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span> <span class="token comment">/* Safari */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启 <code>flex</code> 的元素自身不受影响，只会影响子元素，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。对子元素的子元素不会影响。</p><p>开启<code>flex</code>的盒子称为 <strong>容器</strong>（flex container），子元素称为 <strong>项目</strong>（flex item）。横向默认是 <strong>主轴</strong>。纵向默认是 <strong>侧轴</strong>。默认情况下，项目沿着主轴从左到右依次排列。项目的高度撑满容器（侧轴撑满）。</p><p>当项目的总宽度超出，并不会换行，而是压缩项目的宽度。</p><h2><span id="p2-shu-xing">2、属性</span><a href="#p2-shu-xing" class="header-anchor">#</a></h2><h3><span id="p2-01-zhu-zhou-fu-yu-kong-jian-guan-li-justify-content">2.01 主轴富余空间管理 - justify-content</span><a href="#p2-01-zhu-zhou-fu-yu-kong-jian-guan-li-justify-content" class="header-anchor">#</a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>flex-start</code></td><td></td></tr><tr><td><code>flex-end</code></td><td></td></tr><tr><td><code>center</code></td><td></td></tr><tr><td><code>space-around</code></td><td></td></tr><tr><td><code>space-between</code></td><td></td></tr></tbody></table><h3><span id="p2-02-ce-zhou-fu-yu-kong-jian-guan-li-align-items">2.02 侧轴富余空间管理 - align-items</span><a href="#p2-02-ce-zhou-fu-yu-kong-jian-guan-li-align-items" class="header-anchor">#</a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>flex-start</code></td><td></td></tr><tr><td><code>flex-end</code></td><td></td></tr><tr><td><code>baseline</code></td><td></td></tr><tr><td><code>center</code></td><td></td></tr><tr><td><code>stretch</code></td><td></td></tr></tbody></table><h3><span id="p2-03-zhu-zhou-bu-ju-fang-xiang-flex-direction">2.03 主轴布局方向 - flex-direction</span><a href="#p2-03-zhu-zhou-bu-ju-fang-xiang-flex-direction" class="header-anchor">#</a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>row</code></td><td></td></tr><tr><td><code>row-reverse</code></td><td></td></tr><tr><td><code>column</code></td><td></td></tr><tr><td><code>column-reverse</code></td><td></td></tr></tbody></table><h3><span id="p2-04-xiang-mu-huan-xing-flex-wrap">2.04 项目换行 - flex-wrap</span><a href="#p2-04-xiang-mu-huan-xing-flex-wrap" class="header-anchor">#</a></h3><h3><span id="p2-05-kong-zhi-zheng-ti-ce-zhou-de-fu-yu-kong-jian-align-content">2.05 控制整体侧轴的富裕空间 - align-content</span><a href="#p2-05-kong-zhi-zheng-ti-ce-zhou-de-fu-yu-kong-jian-align-content" class="header-anchor">#</a></h3><h3><span id="p2-06-he-xie-flex-flow">2.06 合写 - flex-flow</span><a href="#p2-06-he-xie-flex-flow" class="header-anchor">#</a></h3><h3><span id="p2-07-pai-xu-order">2.07 排序 - order</span><a href="#p2-07-pai-xu-order" class="header-anchor">#</a></h3><h3><span id="p2-08-dan-xing-kong-jian-fen-pei-flex-grow">2.08 弹性空间分配 - flex-grow</span><a href="#p2-08-dan-xing-kong-jian-fen-pei-flex-grow" class="header-anchor">#</a></h3><h3><span id="p2-09-zi-shen-ce-zhou-kong-zhi-align-self">2.09 自身侧轴控制 - align-self</span><a href="#p2-09-zi-shen-ce-zhou-kong-zhi-align-self" class="header-anchor">#</a></h3><h3><span id="p2-10-xiang-mu-shen-suo-lu-shrink">2.10 项目伸缩率 - shrink</span><a href="#p2-10-xiang-mu-shen-suo-lu-shrink" class="header-anchor">#</a></h3><h3><span id="p2-11-zi-yuan-su-ji-zhun-zhi-flex-basis">2.11 子元素基准值 - flex-basis</span><a href="#p2-11-zi-yuan-su-ji-zhun-zhi-flex-basis" class="header-anchor">#</a></h3><h3><span id="p2-12-he-xie-flex">2.12 合写 - flex</span><a href="#p2-12-he-xie-flex" class="header-anchor">#</a></h3><p><a href="http://flexboxfroggy.com/#zh-cn">青蛙flex</a></p><h1><span id="er-wang-ge-bu-ju-grid">二、网格布局 - grid</span><a href="#er-wang-ge-bu-ju-grid" class="header-anchor">#</a></h1><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 布局 </tag>
            
            <tag> 需更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 开始</title>
      <link href="/02/03-CSS%E5%BC%80%E5%A7%8B/"/>
      <url>/02/03-CSS%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-yin-yong-fang-shi">一、引用方式</a><ul><li><a href="#1-nei-lian-yin-yong">1. 内联引用</a></li><li><a href="#2-tou-bu-yin-yong">2. 头部引用</a></li><li><a href="#3-wai-bu-yin-ru">3. 外部引入</a></li><li><a href="#4-import-yin-ru">4. <code>@import</code> 引入</a></li></ul></li><li><a href="#er-ji-chu-xuan-ze-qi">二、基础选择器</a><ul><li><a href="#1-biao-qian-xuan-ze-qi">1、标签选择器</a></li><li><a href="#2-id-xuan-ze-qi">2、id 选择器</a></li><li><a href="#3-lei-xuan-ze-qi">3、类选择器</a></li><li><a href="#4-tong-pei-fu-xuan-ze-qi">4、通配符选择器</a></li><li><a href="#5-important">5、!important</a></li></ul></li><li><a href="#san-guan-xi-xuan-ze-qi">三、关系选择器</a><ul><li><a href="#1-hou-dai-xuan-ze-qi-zi-dai-xuan-ze-qi">1、后代选择器、子代选择器</a></li><li><a href="#2-xiong-di-xuan-ze-qi">2、兄弟选择器</a></li><li><a href="#3-jiao-ji-xuan-ze-qi">3、交集选择器</a></li><li><a href="#4-bing-ji-xuan-ze-qi-qun-zu-xuan-ze-qi">4、并集选择器（群组选择器）</a></li></ul></li><li><a href="#si-wei-lei-xuan-ze-qi">四、伪类选择器</a><ul><li><a href="#1-dong-tai-wei-lei-xuan-ze-qi">1、动态伪类选择器 +</a></li><li><a href="#2-zhuang-tai-wei-lei-xuan-ze-qi">2、状态伪类选择器</a></li></ul></li><li><a href="#wu-shu-xing-xuan-ze-qi">五、属性选择器</a></li><li><a href="#liu-jie-gou-xing-xuan-ze-qi">六、结构性选择器</a></li><li><a href="#qi-yang-shi-lai-yuan-he-xuan-ze-qi-de-you-xian-ji">七、样式来源和选择器的优先级</a></li><li><a href="#ba-yang-shi-chong-zhi">八、样式重置</a></li></ul><!-- tocstop --></div><h2><span id="pyi-yin-yong-fang-shi">一、引用方式</span><a href="#pyi-yin-yong-fang-shi" class="header-anchor">#</a></h2><p><strong>CSS</strong> 即层叠样式表。它提供像素级精确样式控制，<strong>将内容和表现形式分离，</strong> 以及<strong>层叠</strong>特性。</p><h3><span id="p1-nei-lian-yin-yong">1. 内联引用</span><a href="#p1-nei-lian-yin-yong" class="header-anchor">#</a></h3><ul><li>臃肿，冗余代码多。</li><li>结构和样式没有分离，不方便维护。</li><li>优先级高。</li></ul><h3><span id="p2-tou-bu-yin-yong">2. 头部引用</span><a href="#p2-tou-bu-yin-yong" class="header-anchor">#</a></h3><ul><li>方便维护和修改</li><li>样式和结构分离</li><li>服务器压力小，大型门户网站首选</li><li>相对整站有冗余代码，相对单页没有</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p3-wai-bu-yin-ru">3. 外部引入</span><a href="#p3-wai-bu-yin-ru" class="header-anchor">#</a></h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p4-import-yin-ru">4. <code>@import</code> 引入</span><a href="#p4-import-yin-ru" class="header-anchor">#</a></h3><p>不推荐。</p><h2><span id="per-ji-chu-xuan-ze-qi">二、基础选择器</span><a href="#per-ji-chu-xuan-ze-qi" class="header-anchor">#</a></h2><h3><span id="p1-biao-qian-xuan-ze-qi">1、标签选择器</span><a href="#p1-biao-qian-xuan-ze-qi" class="header-anchor">#</a></h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p2-id-xuan-ze-qi">2、id 选择器</span><a href="#p2-id-xuan-ze-qi" class="header-anchor">#</a></h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#name</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p3-lei-xuan-ze-qi">3、类选择器</span><a href="#p3-lei-xuan-ze-qi" class="header-anchor">#</a></h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.name</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p4-tong-pei-fu-xuan-ze-qi">4、通配符选择器</span><a href="#p4-tong-pei-fu-xuan-ze-qi" class="header-anchor">#</a></h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p5-important">5、!important</span><a href="#p5-important" class="header-anchor">#</a></h3><p>不建议使用。</p><h2><span id="psan-guan-xi-xuan-ze-qi">三、关系选择器</span><a href="#psan-guan-xi-xuan-ze-qi" class="header-anchor">#</a></h2><h3><span id="p1-hou-dai-xuan-ze-qi-zi-dai-xuan-ze-qi">1、后代选择器、子代选择器</span><a href="#p1-hou-dai-xuan-ze-qi-zi-dai-xuan-ze-qi" class="header-anchor">#</a></h3><p>后代选择器使用空格，比如<code>A B</code>。</p><p>子代选择器使用<code>&gt;</code>，如<code>A&gt;B</code>。</p><h3><span id="p2-xiong-di-xuan-ze-qi">2、兄弟选择器</span><a href="#p2-xiong-di-xuan-ze-qi" class="header-anchor">#</a></h3><p>（1）相邻兄弟选择器</p><p><code>A+B</code></p><p>使用<code>+</code>号间隔开两个基础选择器，A+B选择紧邻A选择的下一个兄弟元素没并且是B元素。</p><p>（2）通用兄弟选择器</p><p><code>A~B</code></p><p>使用<code>~</code>号间隔开两个基础选择器，A~B选择A后边所有是B的兄弟元素。</p><h3><span id="p3-jiao-ji-xuan-ze-qi">3、交集选择器</span><a href="#p3-jiao-ji-xuan-ze-qi" class="header-anchor">#</a></h3><h3><span id="p4-bing-ji-xuan-ze-qi-qun-zu-xuan-ze-qi">4、并集选择器（群组选择器）</span><a href="#p4-bing-ji-xuan-ze-qi-qun-zu-xuan-ze-qi" class="header-anchor">#</a></h3><h2><span id="psi-wei-lei-xuan-ze-qi">四、伪类选择器</span><a href="#psi-wei-lei-xuan-ze-qi" class="header-anchor">#</a></h2><h3><span id="p1-dong-tai-wei-lei-xuan-ze-qi">1、动态伪类选择器 +</span><a href="#p1-dong-tai-wei-lei-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th>类型</th><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>锚点</td><td><code>link</code></td><td>未访问的链接</td></tr><tr><td></td><td><code>visited</code></td><td>被访问过的</td></tr><tr><td>用户行为</td><td><code>hover</code></td><td><strong>鼠标悬浮时</strong></td></tr><tr><td></td><td><code>active</code></td><td>鼠标点击瞬间</td></tr><tr><td></td><td><code>focus</code></td><td><strong>获取焦点</strong></td></tr><tr><td>目标伪类</td><td><code>target</code> ==？==</td><td></td></tr></tbody></table><h3><span id="p2-zhuang-tai-wei-lei-xuan-ze-qi">2、状态伪类选择器</span><a href="#p2-zhuang-tai-wei-lei-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>E:enabled</code></td><td>匹配表单中可用的元素</td></tr><tr><td><code>E:disabled</code></td><td>匹配表单中禁用的元素</td></tr><tr><td><code>E:checked</code></td><td>匹配表单中被选中的radio或checkbox元素</td></tr></tbody></table><h2><span id="pwu-shu-xing-xuan-ze-qi">五、属性选择器</span><a href="#pwu-shu-xing-xuan-ze-qi" class="header-anchor">#</a></h2><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>E[attr]</code></td><td>有属性att的所有E元素</td></tr><tr><td><code>E[attr='val']</code></td><td>属性att的值是val的E元素</td></tr><tr><td><code>E[attr^='val']</code></td><td>属性att的值以val开头的E元素</td></tr><tr><td><code>E[attr$='val']</code></td><td>属性att的值以val结尾的E元素</td></tr><tr><td><code>E[attr*='val']</code></td><td>属性att的值包含val字符串的E元素</td></tr></tbody></table><h2><span id="pliu-jie-gou-xing-xuan-ze-qi">六、结构性选择器</span><a href="#pliu-jie-gou-xing-xuan-ze-qi" class="header-anchor">#</a></h2><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td><code>E:first-child</code></td><td>选择父级中第一个子元素</td></tr><tr><td><code>E:last-child</code></td><td>选择最后一个子元素</td></tr><tr><td><code>E:nth-child(n)</code></td><td>选择一个或多个特定的子元素(第一个编号为1)</td></tr><tr><td><code>E:nth-last-child(n)</code></td><td>选择一个或多个特定的子元素，从最后一个子元素开始算</td></tr><tr><td><code>E:nth-of-type(n)</code></td><td>选择同类型的某个特定元素</td></tr><tr><td><code>E:only-child</code></td><td>匹配父元素下仅有的一个子元素</td></tr><tr><td><code>E:empty</code></td><td>匹配一个不包含任何子元素的元素(文本节点也被看作子元素)</td></tr><tr><td><code>E:not(s)</code></td><td>匹配不符合当前选择器的任何元素(反选)</td></tr></tbody></table><blockquote><p>注意对象是E元素的父级。<br>假如div中第一个元素不是p，第二个元素是p，那么div p:nth-child(1)无法选中。此时需要使用<code>nth-of-type</code></p></blockquote><p><a href="http://flukeout.github.io">:link:餐厅练习</a></p><h2><span id="pqi-yang-shi-lai-yuan-he-xuan-ze-qi-de-you-xian-ji">七、样式来源和选择器的优先级</span><a href="#pqi-yang-shi-lai-yuan-he-xuan-ze-qi-de-you-xian-ji" class="header-anchor">#</a></h2><table><thead><tr><th>样式来源</th><th>优先级权重</th><th>描述</th></tr></thead><tbody><tr><td>默认样式</td><td></td><td></td></tr><tr><td>继承样式</td><td></td><td></td></tr><tr><td>通配符选择器</td><td>0</td><td></td></tr><tr><td>标签选择器、伪元素选择器、关系选择器</td><td>1</td><td></td></tr><tr><td>类选择器、属性选择器、伪类选择器</td><td>10</td><td></td></tr><tr><td>id选择器</td><td>100</td><td></td></tr><tr><td>内联样式</td><td>1000</td><td></td></tr><tr><td><code>!important</code></td><td>∞</td><td></td></tr></tbody></table><p>优先级相同时，后写的样式生效。</p><h2><span id="pba-yang-shi-chong-zhi">八、样式重置</span><a href="#pba-yang-shi-chong-zhi" class="header-anchor">#</a></h2><p><strong>样式重置</strong>（CSS reset），将html的默认样式全部去掉，需要的时候我们自行添加。统一页面风格。</p><p>为什么要用样式重置</p><ul><li>多数元素拥有自己的默认样式，并且我们很多都不需要。</li><li>默认样式在不同浏览器中呈现的也不一定相同，就会导致浏览器展示页面不相同的现象。</li><li>整个页面中固定的风格代码，可以在样式重置中直接书写，不用每一个都设置。</li></ul><p>为什么不用通配符重置</p><ul><li>重置简单，不够完整，一些demo可以使用，真正项目不推荐使用，请使用CSS reset</li><li>通配符，匹配所有的标签，影响很大，效率很低。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 定位和浮动</title>
      <link href="/02/06-%E5%AE%9A%E4%BD%8D%E5%92%8C%E6%B5%AE%E5%8A%A8/"/>
      <url>/02/06-%E5%AE%9A%E4%BD%8D%E5%92%8C%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-wen-dang-liu">一、文档流</a><ul><li><a href="#1-wen-dang-liu-wen-ben-liu">1、文档流、文本流</a></li><li><a href="#2-tuo-chi-wen-dang-liu">2、脱离文档流</a></li></ul></li><li><a href="#er-fu-dong">二、浮动</a><ul><li><a href="#1-gai-nian">1、概念</a></li><li><a href="#2-fu-dong-de-shi-yong">2、浮动的使用</a></li><li><a href="#3-gao-du-ta-xian">3、高度塌陷</a></li><li><a href="#4-qing-chu-fu-dong">4、清除浮动 △</a></li></ul></li><li><a href="#san-ding-wei">三、定位</a><ul><li><a href="#1-xiang-dui-ding-wei-relative">1、相对定位 - relative</a></li><li><a href="#2-jue-dui-ding-wei-absolute">2、绝对定位 - absolute</a><ul><li><a href="#2-1-bao-han-kuai">2.1 包含块</a></li><li><a href="#2-2-zi-jue-fu-xiang">2.2 子绝父相</a></li></ul></li><li><a href="#3-gu-ding-ding-wei-fixed">3、固定定位 - fixed</a></li><li><a href="#4-sticky">4、sticky *</a></li></ul></li><li><a href="#si-ceng-die">四、层叠</a><ul><li><a href="#1-z-index">1、z-index</a></li><li><a href="#2-yuan-su-ceng-die-shun-xu">2、元素层叠顺序</a></li><li><a href="#3-ceng-die-shang-xia-wen">3、层叠上下文 +</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-wen-dang-liu">一、文档流</span><a href="#yi-wen-dang-liu" class="header-anchor">#</a></h1><h2><span id="p1-wen-dang-liu-wen-ben-liu">1、文档流、文本流</span><a href="#p1-wen-dang-liu-wen-ben-liu" class="header-anchor">#</a></h2><p>待更新。</p><h2><span id="p2-tuo-chi-wen-dang-liu">2、脱离文档流</span><a href="#p2-tuo-chi-wen-dang-liu" class="header-anchor">#</a></h2><p>脱离文档流，指的是元素脱离正常元素的布局排版规则，其他处于文档流中的盒子在计算布局排版时，会自动无视已脱离文档流的元素来进行定位。</p><p>浮动与绝对定位之间的区别就是</p><ul><li>浮动会使元素脱离文档流，但是不会脱离文本流，在于其他盒子的文本内容计算布局的时候，还是占位置的</li><li>绝对定位会使元素脱离文档流，同时也会脱离文本流，在于其他盒子的文本内容计算布局的时候，不占位置。</li></ul><h1><span id="er-fu-dong">二、浮动</span><a href="#er-fu-dong" class="header-anchor">#</a></h1><p><strong>浮动</strong>（<strong>float</strong>）可以让多个块元素横向排列，共行。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>默认，不浮动</td></tr><tr><td>left</td><td>左浮动</td></tr><tr><td>right</td><td>右浮动</td></tr></tbody></table><h2><span id="p1-gai-nian">1、概念</span><a href="#p1-gai-nian" class="header-anchor">#</a></h2><p><strong>正常页面流/正常文档流</strong> 是行元素从左至右，块元素从上到下布局。<strong>浮动</strong> 是破坏流（脱离文档流）的一种方式。在目前开发中，很多的元素都是一个个float堆叠起来，但是这种布局很容易崩溃。只要宽度和高度发生一点变化，页面就会发生错乱。</p><h2><span id="p2-fu-dong-de-shi-yong">2、浮动的使用</span><a href="#p2-fu-dong-de-shi-yong" class="header-anchor">#</a></h2><p><strong>左浮动</strong> 就是让容器沿着容器左侧排序。</p><p><strong>右浮动</strong> 让容器沿着容器右侧排序。</p><h2><span id="p3-gao-du-ta-xian">3、高度塌陷</span><a href="#p3-gao-du-ta-xian" class="header-anchor">#</a></h2><p>浮动元素以后，脱离父级内容区域，父级没有内容撑开自身的高度，而且父级的兄弟元素是按照父级的位置进行布局的，所以页面会乱。</p><h2><span id="p4-qing-chu-fu-dong">4、清除浮动 △</span><a href="#p4-qing-chu-fu-dong" class="header-anchor">#</a></h2><p>清除浮动不是不让元素浮动，是清除浮动对父级高度塌陷的影响。</p><p>清除浮动的方法</p><ul><li>给浮动元素的父级设置高度。</li><li>给浮动元素的父级设置浮动，以浮制浮。</li><li>overflow设置不为visible的属性。</li><li>在最后一个浮动元素的后边添加一个空的块级元素，添加一个块级元素，添加属性和值为 <code>clear: both</code>。</li><li>（推荐）after伪元素清浮动，给所有浮动元素父级一个clearFix的类名。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearFix:after</span><span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"/200B"</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-ding-wei">三、定位</span><a href="#san-ding-wei" class="header-anchor">#</a></h1><p><strong>定位</strong>（<strong>position</strong>） 允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素，以及浏览器窗口本身的位置。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>默认，没有定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><p>布局一般用在大布局的小范围中。</p><h2><span id="p1-xiang-dui-ding-wei-relative">1、相对定位 - relative</span><a href="#p1-xiang-dui-ding-wei-relative" class="header-anchor">#</a></h2><p><strong>相对定位</strong>（relative），让元素相对定位，元素先放置在未添加定位时候的区域，然后在不改变页面布局的情况下（其他元素没有受到任何影响；自身原来的位置也保留；和浮动可以一起使用）进行移动。不会脱离文档流。</p><h2><span id="p2-jue-dui-ding-wei-absolute">2、绝对定位 - absolute</span><a href="#p2-jue-dui-ding-wei-absolute" class="header-anchor">#</a></h2><p><strong>绝对定位</strong>（absolute），相对于它的 <strong>包含块</strong> 定位。绝对定位是相对于它的包含块定位的（和自身原有位置无关）。如果没有任何一个父级元素是非static属性，则会相对于文档（html）定位。如果它的父级元素和爷爷级元素都是非position:static 属性，则它会选择距离最近的父元素。脱离正常文档流，原有位置不保留。定位的原点以包含块的padding-box的左上角为原点。right和bottom是距离包含块右下角的距离。</p><h3><span id="p2-1-bao-han-kuai">2.1 包含块</span><a href="#p2-1-bao-han-kuai" class="header-anchor">#</a></h3><p><strong>包含块</strong> 是视觉格式化模型的一个概念，简单来说就是一个定位参考框。</p><p>如何确定一个元素的包含块，完全取决于它自身的 position 属性：</p><ul><li>如果一个元素自身的 position 属性是 static 或者是 relative ，它的包含块就是离他最近的祖先元素或者是格式化上下文。</li><li><strong>如果一个元素自身的 position 属性是 absolute ，它的包含块就是离他最近的拥有定位属性（值不为 static ）的元素。</strong></li><li>如果一个元素自身的 position 属性是 fixed，它的包含块就是 viewport。</li></ul><blockquote><p>补充：<br>如果一个元素的 position 属性是 absolute 或者是 fixed 在下边几种情况下，包含块会发生改变。</p><ul><li>当祖先元素拥有 transform 或 perspective 属性并且值不为none的时候，它也是被当做包含块。</li><li>当祖先元素 拥有 filter 属性的时候（值不为none） 它也可以被当做包含块</li></ul></blockquote><p>注：如果由内向外找不到包含块条件的元素，那么html（根元素）被称作为初始包含块。</p><h3><span id="p2-2-zi-jue-fu-xiang">2.2 子绝父相</span><a href="#p2-2-zi-jue-fu-xiang" class="header-anchor">#</a></h3><p>父元素相对定位并不设置位移，子元素绝对定位，设置位移。</p><h2><span id="p3-gu-ding-ding-wei-fixed">3、固定定位 - fixed</span><a href="#p3-gu-ding-ding-wei-fixed" class="header-anchor">#</a></h2><p>固定定位（fixed），相对于浏览器窗口定位。</p><h2><span id="p4-sticky">4、sticky *</span><a href="#p4-sticky" class="header-anchor">#</a></h2><p>sticky 的意思是“粘性的”，<code>position:sticky</code> 表现也符合这个粘性的表现。基本上，可以看出是<code>position:relative</code>和<code>position:fixed</code>的结合体——当元素在屏幕内，表现为<code>relative</code>，就要滚出显示器屏幕的时候，表现为<code>fixed</code>。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">nav</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> -webkit-sticky<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.zhangxinxu.com/wordpress/2018/12/css-position-sticky/">杀了个回马枪，还是说说position:sticky吧</a></p><h1><span id="si-ceng-die">四、层叠</span><a href="#si-ceng-die" class="header-anchor">#</a></h1><h2><span id="p1-z-index">1、z-index</span><a href="#p1-z-index" class="header-anchor">#</a></h2><p><strong>z-index</strong> 指定了一个定位属性的元素及其后代的层叠顺序，只有定位元素（非static）拥有该属性。z-index 的值没有单位，理论上来说 z-index 的值大的元素，会覆盖小的元素。定位元素默认的z-index 的值是 auto。如果一个拥有 z-index 属性的定位元素中，子元素也设置了 z-index 。那么子元素会重新创建一个<strong>层叠上下文</strong>，子元素的z-index只能在当前的层叠上下文中对比排列。</p><h2><span id="p2-yuan-su-ceng-die-shun-xu">2、元素层叠顺序</span><a href="#p2-yuan-su-ceng-die-shun-xu" class="header-anchor">#</a></h2><p>z-index为负&lt; background&lt; border&lt; 块级元素 &lt; 浮动元素 &lt; 内联元素 &lt; 没有设置z-index的定位元素 &lt; z-index为正</p><h2><span id="p3-ceng-die-shang-xia-wen">3、层叠上下文 +</span><a href="#p3-ceng-die-shang-xia-wen" class="header-anchor">#</a></h2><p>待更新。</p><p>想要一个元素支持 z-index 属性，但是又不想定位影响其他元素或者影响自己，则可以给该元素设置相对定位。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 已更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 样式</title>
      <link href="/02/05-%E6%A0%B7%E5%BC%8F/"/>
      <url>/02/05-%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-wen-ben-he-zi-ti-yang-shi">一、文本和字体样式</a><ul><li><a href="#1-color-she-zhi-wen-ben-yan-se">1、color 设置文本颜色</a></li><li><a href="#2-font-family-zi-ti-kong-zhi">2、font-family 字体控制</a></li><li><a href="#3-font-face-zi-ding-yi-zi-ti">3、@font-face 自定义字体</a></li><li><a href="#4-font-size-zi-hao-da-xiao">4、font-size 字号大小</a></li><li><a href="#5-font-style-zi-ti-feng-ge">5、font-style 字体风格</a></li><li><a href="#6-font-weight">6、font-weight</a></li><li><a href="#7-font-he-xie">7、font 合写</a></li><li><a href="#8-line-height-xing-gao-kong-zhi">8、line-height 行高控制</a></li><li><a href="#9-vertical-align-chui-zhi-dui-qi-fang-shi">9、vertical-align 垂直对齐方式</a></li><li><a href="#10-text-align-wen-ben-dui-qi-she-zhi">10、text-align 文本对齐设置</a></li><li><a href="#11-text-decoration-wen-ben-xiu-shi-she-zhi">11、text-decoration 文本修饰设置</a></li><li><a href="#12-text-indent-wen-ben-suo-jin-she-zhi">12、text-indent 文本缩进设置</a></li><li><a href="#13-letter-spacing-word-spacing">13、letter-spacing、word-spacing：</a></li><li><a href="#14-white-space-kong-bai-chu-li">14. white-space 空白处理</a></li></ul></li><li><a href="#er-bei-jing-yang-shi">二、背景样式</a><ul><li><a href="#1-background-color-bei-jing-yan-se">1、background-color 背景颜色</a></li><li><a href="#2-backgroud-image-bei-jing-tu-pian">2、backgroud-image 背景图片</a></li><li><a href="#3-background-position-bei-jing-tu-ding-wei">3、background-position 背景图定位</a></li><li><a href="#4-background-repeat-bei-jing-tu-ping-pu">4、background-repeat 背景图平铺</a></li><li><a href="#5-bei-jing-he-xie">5、背景合写</a></li><li><a href="#6-bei-jing-tu-yuan-dian">6、背景图原点</a></li><li><a href="#7-bei-jing-tu-cai-jian">7、背景图裁剪</a></li><li><a href="#8-bei-jing-tu-da-xiao">8、背景图大小</a></li><li><a href="#9-duo-chong-bei-jing-c3">9、多重背景 <code>C3</code></a></li></ul></li><li><a href="#san-qi-ta-she-zhi">三、其他设置</a><ul><li><a href="#1-visibility">1、visibility</a></li><li><a href="#2-opacity-tou-ming-du-she-zhi">2、opacity 透明度设置</a></li><li><a href="#3-wen-zi-yin-ying-text-shadow">3、文字阴影 text-shadow</a></li><li><a href="#4-he-zi-yin-ying-box-shadow">4、盒子阴影 box-shadow</a></li><li><a href="#5-dao-ying-box-reflect">5、倒影 box-reflect</a></li><li><a href="#6-lu-jing-filter">6、滤镜 filter</a></li><li><a href="#7-duo-lan">7、多栏</a></li><li><a href="#8-jian-bian">8、渐变</a><ul><li><a href="#8-1-xian-xing-jian-bian-linear-gradient">8.1 线性渐变 linear-gradient</a></li><li><a href="#8-2-jing-xiang-jian-bian-radial-gradient">8.2 径向渐变 radial-gradient</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-wen-ben-he-zi-ti-yang-shi">一、文本和字体样式</span><a href="#yi-wen-ben-he-zi-ti-yang-shi" class="header-anchor">#</a></h1><h2><span id="p1-color-she-zhi-wen-ben-yan-se">1、color 设置文本颜色</span><a href="#p1-color-she-zhi-wen-ben-yan-se" class="header-anchor">#</a></h2><p>（1）可设置颜色的类型</p><table><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>英文名</td><td>red</td><td>开发中很少出现</td></tr><tr><td><code>RGB</code> <code>RGBA</code></td><td>rgb(255,255,255)</td><td></td></tr><tr><td>十六进制</td><td>#112233</td><td>常用</td></tr><tr><td><code>HSL</code> <code>HSLA</code></td><td>hsl(0,0,0)</td><td>H色调：0-360<br>S饱和度 0-100%<br>L亮度 0-100%</td></tr><tr><td>inherit</td><td></td><td>继承（默认值）</td></tr><tr><td>transparent</td><td></td><td>透明</td></tr></tbody></table><p>（2）a标签的color属性默认不是继承，需要的时候需直接控制。</p><h2><span id="p2-font-family-zi-ti-kong-zhi">2、font-family 字体控制</span><a href="#p2-font-family-zi-ti-kong-zhi" class="header-anchor">#</a></h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token string">"SimSun"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p3-font-face-zi-ding-yi-zi-ti">3、@font-face 自定义字体</span><a href="#p3-font-face-zi-ding-yi-zi-ti" class="header-anchor">#</a></h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"自定义字体名称"</span><span class="token punctuation">;</span><span class="token property">src</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"自定义字体路径"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-font-size-zi-hao-da-xiao">4、font-size 字号大小</span><a href="#p4-font-size-zi-hao-da-xiao" class="header-anchor">#</a></h2><p>常用单位</p><ul><li><code>px</code></li><li><code>em</code> 参考父级的字号大小 前边的数字是倍数</li><li><code>rem</code> 参考根元素的字号大小（谷歌浏览器默认字号大小16px）</li></ul><p>注：谷歌浏览器默认16px，默认最小字号支持是12px。</p><h2><span id="p5-font-style-zi-ti-feng-ge">5、font-style 字体风格</span><a href="#p5-font-style-zi-ti-feng-ge" class="header-anchor">#</a></h2><ul><li>normal 正常</li><li>italic 斜体</li><li>oblique 倾斜（火狐不支持）</li></ul><h2><span id="p6-font-weight">6、font-weight</span><a href="#p6-font-weight" class="header-anchor">#</a></h2><p>控制文字粗细。（可继承）</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>正常</td></tr><tr><td>bold</td><td>加粗</td></tr><tr><td>lighter</td><td>相对父级细一级</td></tr><tr><td>bolder</td><td>相对父级粗一级</td></tr><tr><td>100~300</td><td>细</td></tr><tr><td>400~500</td><td>正常</td></tr><tr><td>600~900</td><td>粗</td></tr></tbody></table><h2><span id="p7-font-he-xie">7、font 合写</span><a href="#p7-font-he-xie" class="header-anchor">#</a></h2><p><code>font-style</code> <code>-weight</code> <code>-size</code>/<code>line-height</code> <code>-family</code><br>字号大小和字体必写，隐藏一个line-height属性，所以不继承的时候，需要检查font合写。</p><h2><span id="p8-line-height-xing-gao-kong-zhi">8、line-height 行高控制</span><a href="#p8-line-height-xing-gao-kong-zhi" class="header-anchor">#</a></h2><p>其实是控制两行文字基线的距离，<strong>决定了内联元素的占用的高度</strong>。默认会继承。</p><ul><li>固定值 px 不能是负</li><li>比例：比如1.5  就是当前文字大小的1.5倍</li><li>百分比：80%</li><li>浏览器默认值：normal</li></ul><p>让单行文本垂直居中：行高 = 高度。</p><h2><span id="p9-vertical-align-chui-zhi-dui-qi-fang-shi">9、vertical-align 垂直对齐方式</span><a href="#p9-vertical-align-chui-zhi-dui-qi-fang-shi" class="header-anchor">#</a></h2><p>控制某个<strong>行内元素</strong>在<strong>垂直方向</strong>的对齐方式。</p><table><thead><tr><th>baseline</th><th>基线（默认）</th></tr></thead><tbody><tr><td>middle</td><td>中线</td></tr><tr><td>top</td><td>顶线</td></tr><tr><td>bottom</td><td>底线</td></tr></tbody></table><p>图片垂直居中</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 1.首先控制父级内的元素的行高，让元素基线上下平分 */</span><span class="token selector">outer</span><span class="token punctuation">&#123;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>     <span class="token property">line-height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*2.因为图片的基线是图片的底部，平分以后，不会居中 所以让图片改变成由自身的中间对齐方式对齐*/</span><span class="token selector">img</span><span class="token punctuation">&#123;</span>     <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p10-text-align-wen-ben-dui-qi-she-zhi">10、text-align 文本对齐设置</span><a href="#p10-text-align-wen-ben-dui-qi-she-zhi" class="header-anchor">#</a></h2><p><code>text-align</code> 文本对齐设置。控制当前元素内容。</p><p>属性值</p><ul><li><code>left</code> 默认值，左对齐</li><li><code>right</code> 右对齐</li><li><code>center</code> 居中对齐</li><li><code>justify</code> 两端对齐</li></ul><p>控制范围 无法让块元素居中</p><ul><li>元素内的文本</li><li>行内块元素</li><li>行元素</li></ul><h2><span id="p11-text-decoration-wen-ben-xiu-shi-she-zhi">11、text-decoration 文本修饰设置</span><a href="#p11-text-decoration-wen-ben-xiu-shi-she-zhi" class="header-anchor">#</a></h2><table><thead><tr><th>none</th><th>去掉下划线</th></tr></thead><tbody><tr><td>underline</td><td>下划线</td></tr><tr><td>line-through</td><td>删除线</td></tr><tr><td>overline</td><td>上划线</td></tr></tbody></table><p>线条的颜色是默认跟随文字颜色改变的。text-decoration 是间写属性，后边可以跟三个值：线的位置 线的颜色 线的类型。</p><h2><span id="p12-text-indent-wen-ben-suo-jin-she-zhi">12、text-indent 文本缩进设置</span><a href="#p12-text-indent-wen-ben-suo-jin-she-zhi" class="header-anchor">#</a></h2><p><code>text-indent</code> 文本缩进设置</p><p>属性值</p><ul><li>推荐单位为<code>em</code>， <code>px</code>不方便控制。</li><li>可以为负，实现悬挂缩进的效果。</li></ul><p>控制范围</p><ul><li>只针对块元素生效</li></ul><h2><span id="p13-letter-spacing-word-spacing">13、letter-spacing、word-spacing：</span><a href="#p13-letter-spacing-word-spacing" class="header-anchor">#</a></h2><p>letter-spacing<br>控制字符间距<br>控制所有字符和字符之间的间距</p><p>word-spacing<br>控制词间距<br>改变词和词之间的间距<br>以空格来分割两个词 值都可以为负</p><h2><span id="p14-white-space-kong-bai-chu-li">14. white-space 空白处理</span><a href="#p14-white-space-kong-bai-chu-li" class="header-anchor">#</a></h2><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认。空白会被浏览器忽略。</td></tr><tr><td>pre</td><td>空白会被浏览器保留。<br>其行为方式类似 HTML 中的 <code>&lt;pre&gt;</code> 标签。</td></tr><tr><td>nowrap</td><td>文本不会换行，文本会在在同一行上继续，直到遇到 <code>&lt;br&gt;</code> 标签为止。</td></tr><tr><td>pre-wrap</td><td>保留空白符序列，但是正常地进行换行。</td></tr><tr><td>pre-line</td><td>合并空白符序列，但是保留换行符。</td></tr><tr><td>inherit</td><td>继承</td></tr></tbody></table><p><a href="https://www.jianshu.com/p/8ddbe4016778">white-space详解</a></p><h1><span id="er-bei-jing-yang-shi">二、背景样式</span><a href="#er-bei-jing-yang-shi" class="header-anchor">#</a></h1><p>任何背景是撑不开元素的宽高。</p><h2><span id="p1-background-color-bei-jing-yan-se">1、background-color 背景颜色</span><a href="#p1-background-color-bei-jing-yan-se" class="header-anchor">#</a></h2><p>背景颜色是从边框下开始显示的。</p><p>设置值同 <code>color</code>。</p><h2><span id="p2-backgroud-image-bei-jing-tu-pian">2、backgroud-image 背景图片</span><a href="#p2-backgroud-image-bei-jing-tu-pian" class="header-anchor">#</a></h2><p><code>background-image: url(路径)</code><br>边框下也显示图片，但是是平铺出来的。<br>背景图片的左上角原点，是以padding区域的左上角开始显示的。</p><h2><span id="p3-background-position-bei-jing-tu-ding-wei">3、background-position 背景图定位</span><a href="#p3-background-position-bei-jing-tu-ding-wei" class="header-anchor">#</a></h2><p>由两个值构成（<code>background-position-x</code> <code>background-position-y</code>），值可以是 （坐标轴是以padding区域的左上角原点的坐标）</p><ol><li>px</li><li>关键字<br>在x轴上有 left  right  center<br>在y轴上有 top bottom center</li><li>百分比<br>当百分百的时候，和right bottom效果一致</li></ol><h2><span id="p4-background-repeat-bei-jing-tu-ping-pu">4、background-repeat 背景图平铺</span><a href="#p4-background-repeat-bei-jing-tu-ping-pu" class="header-anchor">#</a></h2><p><code>repeat</code> 默认 x和y都平铺<br><code>repeat-x</code> 只沿着x轴平铺<br><code>repeat-y</code> 只沿着y轴平铺<br><code>no-repeat</code> 不平铺</p><h2><span id="p5-bei-jing-he-xie">5、背景合写</span><a href="#p5-bei-jing-he-xie" class="header-anchor">#</a></h2><p><code>background: color image position-x position-y repeat</code><br>如果有background合写属性，那么当此元素还有关于background属性的时候，请书写在合写的下边。</p><h2><span id="p6-bei-jing-tu-yuan-dian">6、背景图原点</span><a href="#p6-bei-jing-tu-yuan-dian" class="header-anchor">#</a></h2><p><code>background-origin: padding-box</code> (默认)</p><ul><li>border-box | padding-box | content-box</li><li>background-origin是用来决定图片的原始起始位置。</li><li>它有三个可选值content-box,padding- box,border-box，即可以选择背景图片是从内容区域或者内边距或者边框开始显示。</li></ul><h2><span id="p7-bei-jing-tu-cai-jian">7、背景图裁剪</span><a href="#p7-bei-jing-tu-cai-jian" class="header-anchor">#</a></h2><p><code>background-clip</code></p><ul><li>border-box | padding-box | content-box</li><li>background-clip的作用为将背景图片做适当的裁剪，以适应需要。</li><li>background-clip有content- box,padding-box,border-box，text几个值剪裁方法：根据设置的盒子部位，那么图片在这个部位的外边缘以外的部分都会不可见。</li></ul><h2><span id="p8-bei-jing-tu-da-xiao">8、背景图大小</span><a href="#p8-bei-jing-tu-da-xiao" class="header-anchor">#</a></h2><p><code>background-size</code></p><ul><li>length： 长度值—第一个值设置宽度，第二个值设置高度</li><li>percentage： 百分比—第一个值设置宽度，第二个值设置高度</li><li>cover：充满容器，比例不发生变化，但是有可能超出。</li><li>contain： 将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内</li></ul><h2><span id="p9-duo-chong-bei-jing-c3">9、多重背景 <code>C3</code></span><a href="#p9-duo-chong-bei-jing-c3" class="header-anchor">#</a></h2><p>CSS3允许为元素使用多个背景图片。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">'1.jpg),url('</span>2.jpg'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>元素引入多个背景图片，前面图片会覆盖后面的图片。</p><h1><span id="san-qi-ta-she-zhi">三、其他设置</span><a href="#san-qi-ta-she-zhi" class="header-anchor">#</a></h1><h2><span id="p1-visibility">1、visibility</span><a href="#p1-visibility" class="header-anchor">#</a></h2><p><code>visible</code>: 元素显示<br><code>hidden</code>: 元素隐藏<br>元素依然占用空间，和隐身一样，带着子元素一起隐身了。<br>子元素的隐藏是因为继承了父级的hidden值，所以单独给子元素设置，覆盖hidden，即可显示。<br>使用visiblity隐藏的元素是可以用js获取的DOM节点及相应的宽高等属性。</p><p><strong>visbility:hidden 和 display:none 隐藏的区别</strong></p><blockquote><p>①visibility可以继承，子元素是因为继承了才隐藏（可覆盖）。display不能被继承，直接带着所有内置元素直接隐藏。<br>②visbility隐藏，保留原先占用空间。display隐藏使原来的空间被占用。<br>③js可以获取到visibility隐藏元素的可视化宽高，而获取不到display隐藏元素的可视化宽高。</p></blockquote><h2><span id="p2-opacity-tou-ming-du-she-zhi">2、opacity 透明度设置</span><a href="#p2-opacity-tou-ming-du-she-zhi" class="header-anchor">#</a></h2><p>控制元素不透明度<br>值是1-0<br>1是完全不透明<br>0是完全透明<br>opacity直接控制所有的内部元素的不透明度，无论是什么元素都会改变</p><h2><span id="p3-wen-zi-yin-ying-text-shadow">3、文字阴影  text-shadow</span><a href="#p3-wen-zi-yin-ying-text-shadow" class="header-anchor">#</a></h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*  第1个值：阴影水平偏移值。可为负值  第2个值：阴影垂直偏移值。可为负值  第3个值：可选，阴影模糊值。不允许负值*/</span><span class="token property">text</span><span class="token punctuation">:</span><span class="token property">shadow</span><span class="token punctuation">:</span> 0px 0px 0px red<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-he-zi-yin-ying-box-shadow">4、盒子阴影 box-shadow</span><a href="#p4-he-zi-yin-ying-box-shadow" class="header-anchor">#</a></h2><p>比文字阴影多一个阴影外延值。</p><h2><span id="p5-dao-ying-box-reflect">5、倒影 box-reflect</span><a href="#p5-dao-ying-box-reflect" class="header-anchor">#</a></h2><h2><span id="p6-lu-jing-filter">6、滤镜 filter</span><a href="#p6-lu-jing-filter" class="header-anchor">#</a></h2><table><thead><tr><th>属性</th><th>单位</th><th>说明</th></tr></thead><tbody><tr><td>blur</td><td>px</td><td>模糊</td></tr><tr><td>brightness</td><td>%</td><td>亮度</td></tr><tr><td>contrast</td><td>%</td><td>对比度</td></tr><tr><td>opacity</td><td>%</td><td>透明度</td></tr><tr><td>saturate</td><td>%</td><td>饱和度</td></tr></tbody></table><h2><span id="p7-duo-lan">7、多栏</span><a href="#p7-duo-lan" class="header-anchor">#</a></h2><p>很少用，略。具体参考 <a href="http://doc.lipeihua.vip:8800/#/./CSS3/02.CSS3%E5%85%B6%E4%BB%96?id=css3%e5%a4%9a%e5%88%97">链接</a>。</p><h2><span id="p8-jian-bian">8、渐变</span><a href="#p8-jian-bian" class="header-anchor">#</a></h2><h3><span id="p8-1-xian-xing-jian-bian-linear-gradient">8.1 线性渐变 linear-gradient</span><a href="#p8-1-xian-xing-jian-bian-linear-gradient" class="header-anchor">#</a></h3><ul><li>从上到下（默认）：background: linear-gradient(red,blue);</li><li>从左到右：background: linear-gradient(to right,red,blue);</li><li>对角：background: linear-gradient(to right bottom,red,blue);</li><li>角度：background: linear-gradient(45deg,red,blue);</li></ul><h3><span id="p8-2-jing-xiang-jian-bian-radial-gradient">8.2 径向渐变 radial-gradient</span><a href="#p8-2-jing-xiang-jian-bian-radial-gradient" class="header-anchor">#</a></h3><ul><li>第一个参数：圆的类型</li><li>ellipse：根据元素形状渐变，元素为正方形是显示效果与circle无异</li><li>circle：渐变为最大的圆形</li><li>第二个参数：执行径向渐变的大小</li><li>farthest-corner:圆心到最远角</li><li>closest-side：圆心到最近的边</li><li>closest-corner：圆心到最近的角</li><li>farthest-side：圆心到最远的边</li><li>第三个参数：圆心的位置</li><li>第四个参数：渐变的颜色点</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开始</title>
      <link href="/02/01-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%A7%8B/"/>
      <url>/02/01-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-web">一、Web</a><ul><li><a href="#1-gai-nian">1、概念</a></li><li><a href="#2-yu-ming-domain-name">2、域名 - Domain Name</a></li><li><a href="#3-wang-ye-de-zu-cheng">3、网页的组成</a></li></ul></li><li><a href="#er-liu-lan-qi">二、浏览器</a><ul><li><a href="#1-chang-jian-liu-lan-qi-ji-qi-nei-he">1、常见浏览器及其内核</a></li></ul></li><li><a href="#san-fu-wu-qi">三、服务器</a></li><li><a href="#si-kai-fa-gong-ju">四、开发工具</a></li></ul><!-- tocstop --></div><h1><span id="yi-web">一、Web</span><a href="#yi-web" class="header-anchor">#</a></h1><h2><span id="p1-gai-nian">1、概念</span><a href="#p1-gai-nian" class="header-anchor">#</a></h2><ul><li>WWW，World Wide Web，万维网</li><li>B/S结构，浏览器-服务器结构</li><li>C/S结构，客户端-服务器结构</li><li>HTTP协议，超文本传输协议</li><li>W3C，万维网联盟</li><li>HTML，Hypertext Markup Language，超文本标记语言。</li><li>CSS，层叠样式表。</li></ul><h2><span id="p2-yu-ming-domain-name">2、域名 - Domain Name</span><a href="#p2-yu-ming-domain-name" class="header-anchor">#</a></h2><ul><li>DNS，Domain Name System，域名解析系统</li></ul><h2><span id="p3-wang-ye-de-zu-cheng">3、网页的组成</span><a href="#p3-wang-ye-de-zu-cheng" class="header-anchor">#</a></h2><p>网页由三部分组成：</p><ul><li><strong>结构</strong> html</li><li><strong>表现</strong> CSS</li><li><strong>行为</strong> JavaScript</li></ul><h1><span id="er-liu-lan-qi">二、浏览器</span><a href="#er-liu-lan-qi" class="header-anchor">#</a></h1><h2><span id="p1-chang-jian-liu-lan-qi-ji-qi-nei-he">1、常见浏览器及其内核</span><a href="#p1-chang-jian-liu-lan-qi-ji-qi-nei-he" class="header-anchor">#</a></h2><table><thead><tr><th>浏览器</th><th>内核</th><th>浏览器前缀</th></tr></thead><tbody><tr><td>IE</td><td>Tredent</td><td>-ms-</td></tr><tr><td><strong>Safari</strong></td><td>Webkit</td><td>-webkit-</td></tr><tr><td><strong>Firefox</strong></td><td>Gecko</td><td>-moz-</td></tr><tr><td><strong>Chrome</strong></td><td>Blink</td><td>-webkit-</td></tr><tr><td>Edge、Opera</td><td>Blink</td><td>-webkit-</td></tr></tbody></table><blockquote><p>注1 Edge之前采用 EdgeHTML 内核，Opera之前使用 Presto 内核。Blink内核是Webkit内核的分支。<br>注2 Android和iOS移动设备只能用自带系统浏览器内核。<br>注3 PC端浏览器市场份额Chrome浏览器排名第一，IE第二，二者约占70%。</p></blockquote><h1><span id="san-fu-wu-qi">三、服务器</span><a href="#san-fu-wu-qi" class="header-anchor">#</a></h1><h1><span id="si-kai-fa-gong-ju">四、开发工具</span><a href="#si-kai-fa-gong-ju" class="header-anchor">#</a></h1><ul><li>IDE: VSCode</li><li>Chrome、Firefox、IE</li><li>Photoshop</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/02/02-HTML/"/>
      <url>/02/02-HTML/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-ji-ben-jie-gou">一、基本结构</a><ul><li><a href="#1-zhu-shi">1、注释</a></li><li><a href="#2-ban-ben-sheng-ming">2、版本声明</a></li><li><a href="#3-html-head-body">3、html 、head、body</a></li><li><a href="#4-meta-biao-qian">4、meta 标签</a></li><li><a href="#5-jie-jue-wang-ye-luan-ma-wen-ti">5、解决网页乱码问题 △</a></li></ul></li><li><a href="#er-html-biao-qian">二、HTML 标签</a><ul><li><a href="#1-biao-qian-de-yu-yi-hua">1、标签的语义化 △</a></li><li><a href="#2-biao-qian-de-guan-xi">2、标签的关系</a></li><li><a href="#3-biao-qian-de-fen-lei">3、标签的分类</a><ul><li><a href="#3-1-kuai-biao-qian">3.1 块标签</a></li><li><a href="#3-2-xing-biao-qian">3.2 行标签</a></li><li><a href="#3-3-xing-nei-kuai-inline-block">3.3 行内块（inline-block）</a></li></ul></li><li><a href="#4-div">4、div</a></li><li><a href="#5-h-p-br">5、h + p + br</a></li><li><a href="#6-lie-biao">6、列表</a></li><li><a href="#7-biao-ge">7、表格</a></li><li><a href="#8-header-footer-nav-aside-h5">8、header、footer、nav、aside <code>H5</code></a></li><li><a href="#9-section-artcle-h5">9、section 、artcle <code>H5</code></a></li><li><a href="#10-figure">10、figure</a></li><li><a href="#11-span">11、span</a></li><li><a href="#12-mao-lian-jie">12、锚链接</a><ul><li><a href="#a-biao-qian-de-wei-lei">a标签的伪类 △</a></li></ul></li><li><a href="#13-b-i-u-em-strong-var">13、b、i、u、em、strong、var</a></li><li><a href="#14-mark">14、mark</a></li><li><a href="#15-time-datalist-proress">15、time、datalist、proress</a></li><li><a href="#16-img-biao-qian">16、img 标签</a></li><li><a href="#17-zi-ding-yi-biao-qian">17、自定义标签</a></li></ul></li><li><a href="#san-biao-dan">三、表单</a><ul><li><a href="#1-form">1、form</a></li><li><a href="#2-input-biao-qian">2、input 标签</a><ul><li><a href="#0-shu-xing">0 属性</a></li><li><a href="#1-text-wen-ben-yu">1 text 文本域</a></li><li><a href="#2-password-mi-ma-yu">2 password 密码域</a></li><li><a href="#3-radio-dan-xuan-kuang">3 radio 单选框</a></li><li><a href="#4-checkbox-fu-xuan-kuang">4 checkbox 复选框</a></li><li><a href="#5-file-wen-jian-yu">5 file 文件域</a></li><li><a href="#6-button-pu-tong-an-niu">6 button 普通按钮</a></li><li><a href="#7-submit-ti-jiao-an-niu">7 submit 提交按钮</a></li><li><a href="#8-reset-chong-zhi-an-niu">8 reset 重置按钮</a></li><li><a href="#9-hidden-yin-cang">9 hidden 隐藏</a></li><li><a href="#10-qi-ta-lei-xing">10 其他类型</a></li></ul></li><li><a href="#3-button-an-niu">3、button 按钮</a></li><li><a href="#4-label-biao-qian">4、label 标签</a></li><li><a href="#5-select-option-xia-lie-lie-biao">5、select-option 下列列表</a></li><li><a href="#5-textarea-duo-xing-wen-ben-shu-ru-kuang">5、textarea 多行文本输入框</a></li><li><a href="#6-datalist-option">6、datalist-option +</a></li><li><a href="#7-h5-biao-dan-xin-gui-fan">7、H5 表单新规范</a></li></ul></li><li><a href="#si-mei-ti">四、媒体</a><ul><li><a href="#1-li-shi">1、历史</a></li><li><a href="#2-ge-shi-he-jie-ma">2、格式和解码</a></li><li><a href="#3-video-audio">3、video、audio</a></li><li><a href="#4-yin-shi-pin-jian-rong-xing-chu-li">4、音视频兼容性处理</a></li></ul></li><li><a href="#wu-canvas">五、Canvas</a></li><li><a href="#liu-qi-ta">六、其他</a><ul><li><a href="#1-iframe-kuang-jia">1、iframe 框架</a></li><li><a href="#2-wei-yuan-su">2、伪元素</a></li><li><a href="#3-html-te-shu-fu-hao">3、HTML 特殊符号</a></li><li><a href="#4-seo-xiang-guan">4、SEO相关</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-ji-ben-jie-gou">一、基本结构</span><a href="#yi-ji-ben-jie-gou" class="header-anchor">#</a></h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 版本声明 --></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 根文档 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 头部 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 主体 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p1-zhu-shi">1、注释</span><a href="#p1-zhu-shi" class="header-anchor">#</a></h2><p>用<code>&lt;!-- </code>和<code>--&gt;</code>包裹起来的内容。</p><h2><span id="p2-ban-ben-sheng-ming">2、版本声明</span><a href="#p2-ban-ben-sheng-ming" class="header-anchor">#</a></h2><p>给浏览器声明，告诉浏览器应该按照HTML5的规范解析当前页面。 <strong>如果不写，浏览器就是按照自己默认的模式解析。</strong></p><p>版本声明必须写在第一行。我们不把他看做一个html标签，而是把它当做一个指令，并且这个指令对大小写不敏感。</p><h2><span id="p3-html-head-body">3、html 、head、body</span><a href="#p3-html-head-body" class="header-anchor">#</a></h2><p><code>html</code> 是一个双标签，所有网页内容全部书写在html标签中。<code>lang</code>就是html标签的属性，<code>en</code>就是<code>lang</code>属性的值，属性是对当前标签的信息的扩展。</p><p><code>head</code> 标签代表网页的头部，不会显示在网页中。主要是包含了标题，网页的描述，字符编码等等一些信息。</p><p><code>body</code> 标签是网页显示的主体内容。</p><h2><span id="p4-meta-biao-qian">4、meta 标签</span><a href="#p4-meta-biao-qian" class="header-anchor">#</a></h2><p>控制网页的<strong>元信息</strong>（信息的信息），根据属性的不同，有很多的作用。</p><h2><span id="p5-jie-jue-wang-ye-luan-ma-wen-ti">5、解决网页乱码问题  △</span><a href="#p5-jie-jue-wang-ye-luan-ma-wen-ti" class="header-anchor">#</a></h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>charset</code>即字符编码。<code>utf-8</code>称作为万国码。</p><h1><span id="er-html-biao-qian">二、HTML 标签</span><a href="#er-html-biao-qian" class="header-anchor">#</a></h1><h2><span id="p1-biao-qian-de-yu-yi-hua">1、标签的语义化 △</span><a href="#p1-biao-qian-de-yu-yi-hua" class="header-anchor">#</a></h2><ul><li>语义化标签更具有 <strong>可读性</strong> ，便于团队开发和维护。</li><li>在没有加载CSS的情况下，网页也能很好呈现出内容结构和代码结构。</li><li>对于SEO来说，搜索引擎更能理解网页中各部分之间的关系，更准确更快速搜索信息。</li></ul><h2><span id="p2-biao-qian-de-guan-xi">2、标签的关系</span><a href="#p2-biao-qian-de-guan-xi" class="header-anchor">#</a></h2><ul><li>并列：兄弟关系</li><li>嵌套：父子关系（使用<code>TAB</code>缩进）</li></ul><h2><span id="p3-biao-qian-de-fen-lei">3、标签的分类</span><a href="#p3-biao-qian-de-fen-lei" class="header-anchor">#</a></h2><h3><span id="p3-1-kuai-biao-qian">3.1 块标签</span><a href="#p3-1-kuai-biao-qian" class="header-anchor">#</a></h3><p>特性</p><ul><li>独占一行</li><li>可设宽高、内外边距和边框</li><li>可嵌套块元素和行元素（p、h标签除外）</li></ul><p>将非块级元素转换成块级元素的方法</p><ul><li>display: block</li><li>float: left/right</li><li>position: absolute/fixed</li><li>父级元素使用display:flex</li></ul><h3><span id="p3-2-xing-biao-qian">3.2 行标签</span><a href="#p3-2-xing-biao-qian" class="header-anchor">#</a></h3><p>特性</p><ul><li>空间足够时可以其他行标签共用一行</li><li>设置宽高无效，内外边距和边框的上下设置无效</li><li>宽高用内容撑开</li><li>可嵌套行元素</li><li>受父元素的 line-height 以及自身的 vertical-align影响。</li></ul><h3><span id="p3-3-xing-nei-kuai-inline-block">3.3 行内块（inline-block）</span><a href="#p3-3-xing-nei-kuai-inline-block" class="header-anchor">#</a></h3><p>特性</p><ul><li>一行可放多个。</li><li>宽高、内外边距、边框无法设置。</li><li>受父元素的 line-height 以及自身的 vertical-align影响。</li></ul><h2><span id="p4-div">4、div</span><a href="#p4-div" class="header-anchor">#</a></h2><p>分块原则：先行，后列。</p><h2><span id="p5-h-p-br">5、h + p + br</span><a href="#p5-h-p-br" class="header-anchor">#</a></h2><p>h，标题</p><p>尽量避免跳过某一级标题，依次使用。</p><p>同一个网页中最多使用一次h1元素，h1经常用在网页的标题或者是logo上。</p><p>p，段落。</p><p>br，单纯的换行，被称为软换行。</p><h2><span id="p6-lie-biao">6、列表</span><a href="#p6-lie-biao" class="header-anchor">#</a></h2><p>（1）无序列表和有序列表</p><p><code>ol</code>，有序列表，ul，无序列表。li，列表的每一项。<br><code>ul</code>/<code>ol</code>-<code>li</code>，<code>ol</code>/<code>ul</code>只能嵌套li。</p><p>（2）自定义列表</p><p><code>dl</code>-<code>dt</code>-<code>dd</code>，组合标签。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p7-biao-ge">7、表格</span><a href="#p7-biao-ge" class="header-anchor">#</a></h2><p>table、tr、td、th</p><ul><li>表格的最外层是table元素</li><li>表格的标题是caption元素 一般在表格的最上边</li><li>tr就是表格的行</li><li>td是普通单元格，th是表头单元格（默认加粗居中）</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>学员就业信息表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>备注<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>老李<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>table的属性</p><ul><li>border:边框（已经废弃，以后使用css的方法）</li><li>合并表格的边框，对table设置：<code>border-collapse: collapse;</code></li><li>cellpadding 控制内容和边框之间的距离</li><li>cellspacing 控制两个单元格之间的距离</li></ul><p>跨行和跨列</p><ul><li>rowspan:控制元素跨行  谁跨行 设置给谁</li><li>colspan:控制元素跨列  谁跨列 设置给谁</li></ul><p>其他</p><ul><li>表格布局（过时了，了解即可）</li><li>thead：表格的头部</li><li>tbody：表格的内容，可以划分多个</li><li>tfoot：表格的底部</li><li>三个标签table划分为多个模块，优化表格的加载，一般数据表格量大的时候可以使用</li><li>thead、tfoot、tbody：三个元素，无关书写顺序，一定会按照thead–tbody–tfoot顺序加载</li></ul><h2><span id="p8-header-footer-nav-aside-h5">8、header、footer、nav、aside <code>H5</code></span><a href="#p8-header-footer-nav-aside-h5" class="header-anchor">#</a></h2><p><code>header</code> 用于定义文档的页眉（头部区域）。</p><p><code>footer</code> 用于定义文档的页脚（底部区域）。</p><p><code>nav</code> 在文档中定义导航。</p><p><code>aside</code> 通常用于定义侧边栏。</p><h2><span id="p9-section-artcle-h5">9、section 、artcle <code>H5</code></span><a href="#p9-section-artcle-h5" class="header-anchor">#</a></h2><p><code>section</code> 在文档中对独立的区域进行分块，一般会有独立的标题。</p><p><code>article</code> 在文档中，对可以独立的完整的被外部引用的内容。</p><p>？ 比较 div、section、article</p><h2><span id="p10-figure">10、figure</span><a href="#p10-figure" class="header-anchor">#</a></h2><p><code>figure</code></p><p>H5新标签，用于引用图片、插画、表格、代码段。</p><h2><span id="p11-span">11、span</span><a href="#p11-span" class="header-anchor">#</a></h2><p>span标签在不需要语义的情况下，增加额外的结构，方便设置样式等操作。</p><h2><span id="p12-mao-lian-jie">12、锚链接</span><a href="#p12-mao-lian-jie" class="header-anchor">#</a></h2><p>（1）路径</p><ul><li>网络路径：一般有三种协议，一种是http、一种是file、一种是ftp。需要引入网络路径的时候，需要书写<code>http://</code>。</li><li>相对路径</li><li>绝对路径</li></ul><p>（2）标签属性</p><ul><li>href：路径。</li><li>target：跳转方式，<code>_self</code> 当前标签页跳转，<code>_blank</code>新标签页跳转。</li><li>title：鼠标悬浮时的弹窗解释。</li></ul><p>（3）锚链接</p><p><code>href=&quot;#(id)&quot;</code> → <code>id=&quot;(id)&quot;</code></p><ul><li>标签href为空时，点击刷新加载。当设置为<code>##</code>（两个#及以上）或者<code>javascript:;</code>时，点击之后不会有动作</li><li>如果a标签的href值只有一个 # 那么可以实现回到顶部的功能。</li><li>如果a标签的href属性书写的链接可以使用浏览器打开（比如图片），则浏览器跳转到这个位置并打开，如果a标签的href属性书写的链接不可以使用浏览器打开，则浏览器直接下载。</li><li>a标签的下载功能：download属性 书写下载内容，可以直接实现下载，必须拥有href属性，否则下载功能失效。</li></ul><h3><span id="pa-biao-qian-de-wei-lei">a标签的伪类 △</span><a href="#pa-biao-qian-de-wei-lei" class="header-anchor">#</a></h3><table><thead><tr><th>伪类</th><th>功能</th></tr></thead><tbody><tr><td><code>link</code></td><td>当有链接属性时</td></tr><tr><td><code>visited</code></td><td>链接被访问过</td></tr><tr><td><code>hover</code></td><td>鼠标悬浮在链接上面时</td></tr><tr><td><code>active</code></td><td>链接激活时</td></tr></tbody></table><p>①“love-hate 爱恨法则” —— <strong>顺序不能互换</strong> ：四个选择器优先级一样，顺序改变可能会覆盖前边的，比如visited写在最后，那么当连接被访问过后，访问过后的颜色就会覆盖hover和active。<br>②hover适用于多数其他元素，并且伪元素也可以使用。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.a1:link</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.a2:visited</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.a3:hover</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.a4:active</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p13-b-i-u-em-strong-var">13、b、i、u、em、strong、var</span><a href="#p13-b-i-u-em-strong-var" class="header-anchor">#</a></h2><ul><li><p>b i u 没有太多的含义，可以增加额外的结构，但是使用率较低。</p></li><li><p>i 标签常用在引入小图标</p></li><li><p>em 标签默认倾斜，起到强调作用，主要是强调关键词的。</p></li><li><p>strong 标签默认加粗，起到更强的强调，主要强调的是一段话。</p></li><li><p>var 标签 没有任何的强调作用，有自己的含义，主要包含变量。</p></li></ul><h2><span id="p14-mark">14、mark</span><a href="#p14-mark" class="header-anchor">#</a></h2><p>标记，突出显示上下文的<strong>关联性</strong>，比如搜索页面的关键词。是行内元素。</p><h2><span id="p15-time-datalist-proress">15、time、datalist、proress</span><a href="#p15-time-datalist-proress" class="header-anchor">#</a></h2><p>time</p><p>当时间是标准写法的时候，可以放在该标签中。</p><p>datalist</p><p>包含一组option元素，通常和input一起配套使用。</p><p>proress</p><p>通常用于进度条。（很少用）</p><h2><span id="p16-img-biao-qian">16、img 标签</span><a href="#p16-img-biao-qian" class="header-anchor">#</a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td></tr><tr><td>alt</td><td>加载失败时显示的替代文本</td></tr><tr><td>title</td><td>鼠标悬浮时显示的弹窗提示</td></tr><tr><td>width、height</td><td>宽高</td></tr></tbody></table><p>解决底部留白：</p><ul><li>display: block</li><li>font-size： 0</li></ul><p>消除行内块间距的方式</p><ul><li>移除标签间的空格</li><li>取消标签闭合</li><li>给父元素设置<code>font-size:0</code>，Chrome 默认有最小字体大小限制，可以<code>font-size: 0; -webkit-text-size-adjust:none;</code></li><li>设置 margin 为负值</li></ul><h2><span id="p17-zi-ding-yi-biao-qian">17、自定义标签</span><a href="#p17-zi-ding-yi-biao-qian" class="header-anchor">#</a></h2><p>待更新。</p><h1><span id="san-biao-dan">三、表单</span><a href="#san-biao-dan" class="header-anchor">#</a></h1><h2><span id="p1-form">1、form</span><a href="#p1-form" class="header-anchor">#</a></h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>action：表单提交接口。如果省略，则设置为当前页面。</p><p>method：表单提交的方式。一般为 <strong>POST</strong> 或者 <strong>GET</strong> 。</p><ul><li>GET 通过URL提交</li><li>POST 通过请求报文</li></ul><h2><span id="p2-input-biao-qian">2、input 标签</span><a href="#p2-input-biao-qian" class="header-anchor">#</a></h2><h3><span id="p0-shu-xing">0 属性</span><a href="#p0-shu-xing" class="header-anchor">#</a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>placeholder</code></td><td><strong>占位符</strong>。控制元素为空时的提示信息，只要输入内容就会消失。</td></tr></tbody></table><ul><li>name  当前表单元素键名。</li><li>value  当前表单元素输入内容，默认内容。</li><li>type  表单元素的类型。</li><li></li><li>autocomplete  是否提示用户输入历史输入值，默认为 ON。</li><li>autofocus  自动获取焦点。</li><li>required  必填。提交表单时必须填写此项。</li><li>disabled  禁用表单元素。不会被提交。</li><li>readonly  只读。会被提交。</li><li>checked  预先选中单选框或者多选框。</li><li>form  关联表单。如果input存在form属性，表示该input属于某个表单。通过input的form属性为form表单的id，进行关联。 进行关联以后，无论input书写在哪里，都能随着表单提交数据。</li><li>selected  预先选择一个选项。</li><li>multiple  实现多选。</li></ul><h3><span id="p1-text-wen-ben-yu">1 text 文本域</span><a href="#p1-text-wen-ben-yu" class="header-anchor">#</a></h3><p>即单行文本输入框。</p><h3><span id="p2-password-mi-ma-yu">2 password 密码域</span><a href="#p2-password-mi-ma-yu" class="header-anchor">#</a></h3><h3><span id="p3-radio-dan-xuan-kuang">3 radio 单选框</span><a href="#p3-radio-dan-xuan-kuang" class="header-anchor">#</a></h3><p>注意需设置好 value 值。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    请选择您的性别：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认选中：checked</p><ul><li>checked</li><li>checked = “”</li><li>checked = “checked”</li></ul><h3><span id="p4-checkbox-fu-xuan-kuang">4 checkbox 复选框</span><a href="#p4-checkbox-fu-xuan-kuang" class="header-anchor">#</a></h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    请选择您的学科    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>HTML5    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ASP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ASP    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>c#    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>class<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Java    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p5-file-wen-jian-yu">5 file 文件域</span><a href="#p5-file-wen-jian-yu" class="header-anchor">#</a></h3><p>上传文件。</p><p>调用相册和摄像头。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span> <span class="token attr-name">capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>camera<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span> <span class="token attr-name">capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>photo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="p6-button-pu-tong-an-niu">6 button 普通按钮</span><a href="#p6-button-pu-tong-an-niu" class="header-anchor">#</a></h3><h3><span id="p7-submit-ti-jiao-an-niu">7 submit 提交按钮</span><a href="#p7-submit-ti-jiao-an-niu" class="header-anchor">#</a></h3><h3><span id="p8-reset-chong-zhi-an-niu">8 reset 重置按钮</span><a href="#p8-reset-chong-zhi-an-niu" class="header-anchor">#</a></h3><h3><span id="p9-hidden-yin-cang">9 hidden 隐藏</span><a href="#p9-hidden-yin-cang" class="header-anchor">#</a></h3><h3><span id="p10-qi-ta-lei-xing">10 其他类型</span><a href="#p10-qi-ta-lei-xing" class="header-anchor">#</a></h3><p>以下是一些 H5 新增的类型：</p><table><thead><tr><th>type</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>color</td><td>颜色</td><td></td></tr><tr><td>date</td><td>日期-年月日</td><td></td></tr><tr><td>week</td><td>日期-年周</td><td>火狐不支持</td></tr><tr><td>month</td><td>日期-年月</td><td>火狐不支持</td></tr><tr><td>email</td><td>邮箱号</td><td>有校验，但是不完整</td></tr><tr><td>number</td><td>数字</td><td>min | max | value | step</td></tr><tr><td>search</td><td>搜索框</td><td></td></tr><tr><td>tel</td><td>电话号码</td><td></td></tr><tr><td>url</td><td>URL</td><td></td></tr><tr><td>range</td><td>可拖动控件</td><td>很少用</td></tr></tbody></table><h2><span id="p3-button-an-niu">3、button 按钮</span><a href="#p3-button-an-niu" class="header-anchor">#</a></h2><p>有3种 type，分别是 button，submit，reset。</p><p>具体功能需要配合JS实现。</p><blockquote><p>注1：input提交按钮和button提交按钮的区别：input是单标签，button是双标签。<br>注2：button是行内块标签。</p></blockquote><h2><span id="p4-label-biao-qian">4、label 标签</span><a href="#p4-label-biao-qian" class="header-anchor">#</a></h2><p>定义表单元素标注，获取焦点。</p><p>两种方式来绑定表单。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="p5-select-option-xia-lie-lie-biao">5、select-option 下列列表</span><a href="#p5-select-option-xia-lie-lie-biao" class="header-anchor">#</a></h2><p>在 option 中 value 属性书写的内容不会显示，但是最后会提交。显示的内容写在 option 标签中。</p><p><code>selected</code> 默认选中</p><p><code>multiple</code> 多选</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">请选择你喜欢的地方：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>上海<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>广州<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>深圳<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p5-textarea-duo-xing-wen-ben-shu-ru-kuang">5、textarea 多行文本输入框</span><a href="#p5-textarea-duo-xing-wen-ben-shu-ru-kuang" class="header-anchor">#</a></h2><h2><span id="p6-datalist-option">6、datalist-option +</span><a href="#p6-datalist-option" class="header-anchor">#</a></h2><h2><span id="p7-h5-biao-dan-xin-gui-fan">7、H5 表单新规范</span><a href="#p7-h5-biao-dan-xin-gui-fan" class="header-anchor">#</a></h2><ul><li>表单的属性名和属性值相等的时候，可以省略属性值，直接书写属性名即可。</li><li>在JS中，允许用布尔值[^6]来开启和关闭属性。</li><li>在多个表单元素，只能出现一次的属性，如果书写多个，以第一个为准。</li></ul><h1><span id="si-mei-ti">四、媒体</span><a href="#si-mei-ti" class="header-anchor">#</a></h1><h2><span id="p1-li-shi">1、历史</span><a href="#p1-li-shi" class="header-anchor">#</a></h2><h2><span id="p2-ge-shi-he-jie-ma">2、格式和解码</span><a href="#p2-ge-shi-he-jie-ma" class="header-anchor">#</a></h2><p>浏览器支持的格式：<code>.mp4/.ogv/.webm/.mp3/.ogg</code><br>目前还没有一种编解码和容器的组合能应用于所有的浏览器中。</p><h2><span id="p3-video-audio">3、video、audio</span><a href="#p3-video-audio" class="header-anchor">#</a></h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>引入的资源路径</td></tr><tr><td>width、height</td><td>宽度、高度</td></tr><tr><td>controls</td><td>显示控制和进度条</td></tr><tr><td>autoplay</td><td>自动播放</td></tr><tr><td>muted</td><td>静音（想要自动播放生效，需要开启静音）</td></tr><tr><td>loop</td><td>是否循环</td></tr><tr><td>poster</td><td>视频播放前的一帧，图片路径</td></tr><tr><td>preload</td><td>none：不提前加载视频</td></tr><tr><td></td><td>metadata：抓取元数据</td></tr><tr><td></td><td>auto：预加载</td></tr></tbody></table><h2><span id="p4-yin-shi-pin-jian-rong-xing-chu-li">4、音视频兼容性处理</span><a href="#p4-yin-shi-pin-jian-rong-xing-chu-li" class="header-anchor">#</a></h2><p>待更新。</p><h1><span id="wu-canvas">五、Canvas</span><a href="#wu-canvas" class="header-anchor">#</a></h1><h1><span id="liu-qi-ta">六、其他</span><a href="#liu-qi-ta" class="header-anchor">#</a></h1><h2><span id="p1-iframe-kuang-jia">1、iframe 框架</span><a href="#p1-iframe-kuang-jia" class="header-anchor">#</a></h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p2-wei-yuan-su">2、伪元素</span><a href="#p2-wei-yuan-su" class="header-anchor">#</a></h2><p>伪元素 会在内容元素的前后插入额外的元素，但是并不会在文档中生成，在文档的源码中也找不到。虽然在结构上是虚假元素，但是在表现上和普通元素没有什么区别，能为它们添加任何样式，比如改变文字颜色等等。</p><p>伪元素必须拥有<code>content</code>属性才能生效，伪元素默认是一个行内元素，伪元素对其他属性基本都是支持的。</p><table><thead><tr><th>伪元素</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>after</td><td>在当前元素的最后边插入一个伪元素</td><td></td></tr><tr><td>before</td><td>在当前元素的最前面插入一个伪元素</td><td></td></tr><tr><td>first-letter</td><td>第一个字符</td><td>只针对块元素生效</td></tr><tr><td>first-line</td><td>第一行</td><td>只针对行元素生效</td></tr></tbody></table><h2><span id="p3-html-te-shu-fu-hao">3、HTML 特殊符号</span><a href="#p3-html-te-shu-fu-hao" class="header-anchor">#</a></h2><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;nbsp;</code></td><td>空格</td></tr><tr><td><code>&amp;gt;</code></td><td>大于号</td></tr><tr><td><code>&amp;lt;</code></td><td>小于号</td></tr><tr><td><code>&amp;copy;</code></td><td>版权符</td></tr><tr><td><code>&amp;amp;</code></td><td>和号</td></tr></tbody></table><h2><span id="p4-seo-xiang-guan">4、SEO相关</span><a href="#p4-seo-xiang-guan" class="header-anchor">#</a></h2><p>搜索引擎优化。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈基 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 杂项</title>
      <link href="/02/10-CSS%E6%9D%82%E9%A1%B9/"/>
      <url>/02/10-CSS%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-css-sprites">一、CSS Sprites</a></li><li><a href="#er-css-hack">二、CSS hack</a></li><li><a href="#san-calc-fang-fa">三、calc 方法</a></li></ul><!-- tocstop --></div><h1><span id="yi-css-sprites">一、CSS Sprites</span><a href="#yi-css-sprites" class="header-anchor">#</a></h1><p><strong>CSS Sprites</strong>，精灵图，是网页图片的常用处理方式。</p><p>允许将一个页面中很多零星的小图片包含到一张大图中去，当访问页面的时候，就不会一张张的去请求显示图片。对网络来说，小于200k的文件加载速度是一样的。通过 <code>background-position</code> 属性，将图片定位到需要的位置即可。</p><p>优点：</p><ul><li>减少图片大小</li><li>减少服务器请求次数</li></ul><p><a href="http://www.spritecow.com/">定位辅助工具</a></p><h1><span id="er-css-hack">二、CSS hack</span><a href="#er-css-hack" class="header-anchor">#</a></h1><p>CSS hack是什么</p><p>由于不同的厂商的浏览器，或者是同一个浏览器不同的版本（IE），对css的解析和认识不完全一样,可能会导致不同浏览器显示的效果不相同,那么我们需要针对某个浏览器，去写不同的样式，让代码能够兼容所有的浏览器。</p><p>为什么要用 CSS hack</p><p>第一种理解：让我们CSS的代码兼容不同的浏览器</p><p>第二种理解：我们可以为不同的浏览器定制不同的样式</p><p>3种表现方式：</p><p>CSS属性前缀法</p><p>选择器前缀法</p><p><strong>IE条件注释法</strong>: iE10、11不再使用条件注释。</p><h1><span id="san-calc-fang-fa">三、calc 方法</span><a href="#san-calc-fang-fa" class="header-anchor">#</a></h1><p>用来计算长度。</p><p>注意<br>使用+ - * /进行运算<br>可以使用百分比 px em rem等单位，可以单位混合计算<br>在使用的时候，尽量在 + - * / 前后添加一个空格</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 动画</title>
      <link href="/02/09-CSS%E5%8A%A8%E7%94%BB/"/>
      <url>/02/09-CSS%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-transform">一、transform</a></li><li><a href="#er-guo-du-dong-hua-transition">二、过渡动画 transition</a></li><li><a href="#san-guan-jian-zheng-dong-hua-animation">三、关键帧动画 animation</a><ul><li><a href="#1-keyframes-ding-yi-xin-guan-jian-zheng">1、@keyframes 定义新关键帧</a></li><li><a href="#2-animation">2、animation</a></li><li><a href="#3-dong-hua-de-zan-ting-he-bo-fang">3、动画的暂停和播放</a></li><li><a href="#4-dong-hua-de-qi-shi-he-jie-shu-zhuang-tai">4、动画的起始和结束状态</a></li><li><a href="#5-zhu-zheng-dong-hua">5、逐帧动画</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yi-transform">一、transform</span><a href="#yi-transform" class="header-anchor">#</a></h1><ul><li>旋转 rotate</li><li>移动 translate</li><li>缩放 scale</li><li>扭曲 skew</li><li>改变变换基点 transform-origin</li></ul><p>动画分为 <strong>过渡动画</strong> 和 <strong>关键帧动画</strong>。</p><h1><span id="er-guo-du-dong-hua-transition">二、过渡动画 transition</span><a href="#er-guo-du-dong-hua-transition" class="header-anchor">#</a></h1><p>允许CSS的属性在一定的时间区间内平滑过渡。在鼠标点击，鼠标滑过或对元素任何改变中触发，并平滑地以动画改变CSS的属性值。</p><p>transition</p><ul><li>property 参与过渡的属性</li><li>duration 持续时间</li><li>timing-function 动画类型 linear 线性匀速</li><li>delay 延迟时间</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> height 3s linear 2s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="san-guan-jian-zheng-dong-hua-animation">三、关键帧动画 animation</span><a href="#san-guan-jian-zheng-dong-hua-animation" class="header-anchor">#</a></h1><p>关键帧动画是控制关键位置，而不是所有位置。</p><h2><span id="p1-keyframes-ding-yi-xin-guan-jian-zheng">1、@keyframes 定义新关键帧</span><a href="#p1-keyframes-ding-yi-xin-guan-jian-zheng" class="header-anchor">#</a></h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> &lt;name></span><span class="token punctuation">&#123;</span><span class="token selector">from/0%</span><span class="token punctuation">&#123;</span>// ...<span class="token punctuation">&#125;</span> <span class="token selector">to/100%</span><span class="token punctuation">&#123;</span>// ...<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-animation">2、animation</span><a href="#p2-animation" class="header-anchor">#</a></h2><ul><li>name 动画属性名</li><li>duration 关键帧持续时间</li><li>timing-function 动画执行方式（针对于每一个关键帧之间的动画）</li><li>delay 动画延迟时间</li><li>iteration-count 动画循环次数，次数或者 infinite（无穷次）</li><li>direction 控制动画循环反向播放，默认正常播放，alternate，轮流反向播放</li></ul><h2><span id="p3-dong-hua-de-zan-ting-he-bo-fang">3、动画的暂停和播放</span><a href="#p3-dong-hua-de-zan-ting-he-bo-fang" class="header-anchor">#</a></h2><ul><li>animation-play-state</li><li>paused</li></ul><h2><span id="p4-dong-hua-de-qi-shi-he-jie-shu-zhuang-tai">4、动画的起始和结束状态</span><a href="#p4-dong-hua-de-qi-shi-he-jie-shu-zhuang-tai" class="header-anchor">#</a></h2><h2><span id="p5-zhu-zheng-dong-hua">5、逐帧动画</span><a href="#p5-zhu-zheng-dong-hua" class="header-anchor">#</a></h2><p>timing-function: steps()</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见效果</title>
      <link href="/02/22-DOM%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/"/>
      <url>/02/22-DOM%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1><span id="chang-jian-xiao-guo">常见效果</span><a href="#chang-jian-xiao-guo" class="header-anchor">#</a></h1><p>[TOC]</p><h1><span id="yi-biao-qian-ye-qie-huan">一、标签页切换</span><a href="#yi-biao-qian-ye-qie-huan" class="header-anchor">#</a></h1><p>方法一</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> oH2s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".h2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> oLis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oH2s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    oH2s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oH2s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oH2s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                oH2s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"active"</span><span class="token punctuation">;</span>                oLis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"show"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                oH2s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                oLis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> oH2s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".h2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> oLis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oH2s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    oH2s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>    oH2s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 先全部清空</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oH2s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oH2s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            oLis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"active"</span><span class="token punctuation">;</span>        oLis<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"show"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法三（面向对象）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Tab</span><span class="token punctuation">(</span><span class="token parameter">btn<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//把变量或者参数赋值给实例化对象，这样在构造函数和原型对象的方法中都能够访问这个变量</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>btns <span class="token operator">=</span> btn<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>contents <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token comment">//在其他函数中想要使用指向实例化对象的this比较困难，所以用一个that变量保存一个this,方便以后在其他地方使用</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">//对所有的按钮绑定点击事件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//给所有的元素扩展一个下标index属性</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//因为所有的Tab切换的核心方法都是一样的，所以我们把方法写在了原型对象上</span>            <span class="token comment">//当点击按钮的时候，去执行原型对象上的方法</span>            <span class="token comment">//这样所有的Tab切换的执行切换的方法都是同一个，节省效率</span>            <span class="token comment">//把当前的this（指向点击的对象）传参传递给方法，方便使用</span>            that<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Tab</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">that</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用that来接收参数 参数代表的是点击事件的事件对象</span>    <span class="token comment">//先清空所有的内容</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//给当前点击的元素及对应的面板添加类名</span>    that<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>contents<span class="token punctuation">[</span>that<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"active"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>待更新…</p><h2><span id="phui-dao-ding-bu">回到顶部</span><a href="#phui-dao-ding-bu" class="header-anchor">#</a></h2><h2><span id="pce-bian-lan">侧边栏</span><a href="#pce-bian-lan" class="header-anchor">#</a></h2><h2><span id="ppeng-bi-fan-dan">碰壁反弹</span><a href="#ppeng-bi-fan-dan" class="header-anchor">#</a></h2><h2><span id="ptu-pian-lun-bo">图片轮播</span><a href="#ptu-pian-lun-bo" class="header-anchor">#</a></h2><h2><span id="ptuo-zhuai">拖拽</span><a href="#ptuo-zhuai" class="header-anchor">#</a></h2><h2><span id="pbiao-dan-hui-che-ti-jiao-biao-dan-quan-xuan">表单（回车提交表单、全选）</span><a href="#pbiao-dan-hui-che-ti-jiao-biao-dan-quan-xuan" class="header-anchor">#</a></h2><h2><span id="pzi-ding-yi-gun-dong-tiao">自定义滚动条</span><a href="#pzi-ding-yi-gun-dong-tiao" class="header-anchor">#</a></h2><p>视口高度 H1 内容高度 H2</p><p>滑块高度 h1 滑槽高度 h2</p><p>比例 s 内容移动量H’ 滑槽移动量h’</p><p>基本关系</p><p>s = H1/H2 = h1/h2</p><h2><span id="plan-jia-zai">懒加载</span><a href="#plan-jia-zai" class="header-anchor">#</a></h2><h2><span id="ppu-bu-liu">瀑布流</span><a href="#ppu-bu-liu" class="header-anchor">#</a></h2><h2><span id="ptu-pian-fang-da-jing">图片放大镜</span><a href="#ptu-pian-fang-da-jing" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM 对象</title>
      <link href="/02/19-BOM%E5%AF%B9%E8%B1%A1/"/>
      <url>/02/19-BOM%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-window-dui-xiang">一、window对象</a><ul><li><a href="#1-ke-hu-duan-dui-xiang">1、客户端对象</a></li><li><a href="#2-xi-tong-dui-hua-kuang">2、系统对话框</a></li><li><a href="#3-da-kai-he-guan-bi-chuang-kou">3、打开和关闭窗口</a></li><li><a href="#4-liu-lan-qi-kuan-gao">4、浏览器宽高</a></li></ul></li><li><a href="#er-navigator-dui-xiang">二、navigator对象</a><ul><li><a href="#1-liu-lan-qi-jian-ce-fang-fa">1、浏览器检测方法</a></li><li><a href="#2-cao-zuo-xi-tong-jian-ce-fang-fa">2、操作系统检测方法</a></li></ul></li><li><a href="#san-location-dui-xiang">三、location对象</a></li><li><a href="#si-history-dui-xiang">四、history对象 *</a></li><li><a href="#wu-screen-dui-xiang">五、screen对象</a></li><li><a href="#liu-console-dui-xiang">六、console对象 *</a></li></ul><!-- tocstop --></div><p><strong>BOM</strong>，Browser Object Model，浏览器对象模型。</p><h1><span id="yi-window-dui-xiang">一、window对象</span><a href="#yi-window-dui-xiang" class="header-anchor">#</a></h1><p><code>window</code> 是BOM的核心对象。表示浏览器的一个实例，是客户端浏览器对象模型的基类。在浏览器中，该对象具有双重角色，既是通过JS访问浏览器窗口的一个接口，也是ES规定中的 <strong>Global</strong> 对象。这意味着在网页中定义的任何一个对象、变量和函数，都以 <code>window</code> 作为其 <code>Global</code> 对象。<strong>所有在全局作用域中声明的变量、函数都会变成该对象的属性和方法。</strong></p><h2><span id="p1-ke-hu-duan-dui-xiang">1、客户端对象</span><a href="#p1-ke-hu-duan-dui-xiang" class="header-anchor">#</a></h2><p>可以访问客户端其他对象，这种关系构成浏览器对象模型。</p><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td><code>document</code></td><td>包含整个HTML文档，可以用来访问文档内容及其所有页面元素。</td></tr><tr><td><code>navigator</code></td><td>包含客户端有关浏览器的信息。</td></tr><tr><td><code>screen</code></td><td>包含客户端屏幕的信息</td></tr><tr><td><code>history</code></td><td>包含浏览历史记录信息</td></tr><tr><td><code>location</code></td><td>包含当前网页文档的URL信息</td></tr></tbody></table><h2><span id="p2-xi-tong-dui-hua-kuang">2、系统对话框</span><a href="#p2-xi-tong-dui-hua-kuang" class="header-anchor">#</a></h2><p>浏览器通过 <code>alert()</code>、<code>confirm()</code> 和 <code>prompt()</code> 方法可以调用系统对话框向用户显示消息。</p><p>系统对话框与在浏览器中显示的网页没有关系，也不包含 HTML。它们的外观由操作系统及（或）浏览器设置决定，而不是由 CSS 决定（无法设置）。通过这几个方法打开的对话框都是同步和模态的。也就是说，显示这些对话框的时候代码会停止执行，而关掉这些对话框后代码又会恢复执行。</p><p><code>confirm</code>和<code>prompt</code>有返回值。生产环境下不用，调试使用。</p><h2><span id="p3-da-kai-he-guan-bi-chuang-kou">3、打开和关闭窗口</span><a href="#p3-da-kai-he-guan-bi-chuang-kou" class="header-anchor">#</a></h2><p><code>window.open()</code> 方法既可以导航到一个特定的 URL，也可以打开一个新的浏览器窗口。</p><p>参数</p><ul><li>要加载的URL</li><li>新窗口打开方式：<code>_self</code>  <code>_blank</code>（默认新标签页打开）</li><li>窗口大小、位置。</li></ul><p>返回值  就是新建的窗口名称。</p><p><code>窗口名.close()</code>可以关闭窗口，如果关闭自身那就使用 <code>window.close()</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 打开窗口</span><span class="token keyword">var</span> newWin <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"http://www.jd.com"</span><span class="token punctuation">,</span><span class="token string">"_blank"</span><span class="token punctuation">,</span><span class="token string">"width=300,height=300,left=200,top=100"</span><span class="token punctuation">)</span><span class="token comment">// 2. 关闭窗口</span>newWin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>close()</code> 方法仅适用于通过 <code>window.open()</code> 打开的弹出窗口。</p><h2><span id="p4-liu-lan-qi-kuan-gao">4、浏览器宽高</span><a href="#p4-liu-lan-qi-kuan-gao" class="header-anchor">#</a></h2><p><code>window</code>对象有<code>innerWidth</code>和<code>innerHeight</code>属性，可以获取浏览器窗口的内部宽度和高度。内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。</p><p>对应的，还有一个<code>outerWidth</code>和<code>outerHeight</code>属性，可以获取浏览器窗口的整个宽高。</p><h1><span id="er-navigator-dui-xiang">二、navigator对象</span><a href="#er-navigator-dui-xiang" class="header-anchor">#</a></h1><p>navigator 对象储存了浏览器信息。通过 <code>navigator</code> 可以引用该对象，并利用它的属性来读取客户端基本信息。</p><p>常见属性：</p><ul><li><code>onLine</code> 表示浏览器是否连接到因特网</li><li><code>platform</code> 浏览器所在的操作系统</li><li><code>userAgent</code> 浏览器识别码</li><li><code>appName</code> 浏览器名称</li><li><code>labguage</code> 浏览器设置的语言</li></ul><h2><span id="p1-liu-lan-qi-jian-ce-fang-fa">1、浏览器检测方法</span><a href="#p1-liu-lan-qi-jian-ce-fang-fa" class="header-anchor">#</a></h2><p>检测浏览器类型的方法有多种，常用的方法包括两种:<strong>特征检测法</strong>和<strong>字符串检测法</strong>，这两种方法都存在各自的优点与缺点，用户可以根据需要进行选择。</p><p>（1）特征检测法</p><ul><li>特征检测法就是根据浏览器是否支持特定功能来决定相应操作的方式。这是一种非精确判断法。但却是最安全的检测方法</li><li>因为准确检测浏览器的类型和型号是一件很困难的事情,而且很容易存在误差，如果不关心浏览器的身份，仅仅在意浏览器的执行能力，那么使用特征检测法就完全可以满足需要。</li><li>当使用一个对象、方法或属性时，先判断它是否存在，如果存在，则说明浏览器支持该对象、方法属性，那么就可以放心使用</li></ul><p>（2）字符串检测法</p><ul><li>客户端浏览器每次发送HTTP请求时，都会附带有一个user-agent(用户代理)字符串，对于Web开发人员来说，可以使用用户代理字符串检测浏览器类型。</li><li>userAgent字符串包含了web浏览器的大量信息，如浏览器的名称和版本。</li></ul><h2><span id="p2-cao-zuo-xi-tong-jian-ce-fang-fa">2、操作系统检测方法</span><a href="#p2-cao-zuo-xi-tong-jian-ce-fang-fa" class="header-anchor">#</a></h2><p>navigator.userAgent返回值一般都会包含操作系统的基本信息，不过这些信息比较散乱，没有统一的规则。</p><p>用户可以检测一些更为通用的信息，如检测是否为 Windows系统，或者为 Macintosh系统，而不去分辨操作系统的版本号。</p><p>例如，如果仅检测通用信息，那么所有Windows版本的操作系统都会包含&quot;Win”字符串，所有Macintosh版本的操作系统都包含有&quot;Mac”字符串，所有Umix版本的操作系统都包含有&quot;X11”，而 Linux操作系统会同时包含&quot;X11”和&quot; Linux。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> isWin <span class="token operator">=</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Win"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果是Windows系统，则返回true</span><span class="token keyword">var</span> isMac <span class="token operator">=</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Mac"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 如果是Macintosh系统，则返回true </span><span class="token keyword">var</span> isUnix <span class="token operator">=</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"X11"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 如果是UNIX系统，则返回true</span><span class="token keyword">var</span> isLinux <span class="token operator">=</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"Linux"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 如果是Linux系统，则返回true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>！请注意，<code>navigator</code>的信息可以很容易地被用户修改，所以JavaScript读取的值不一定是正确的。但这样既可能判断不准确，也很难维护代码。正确的方法是充分利用JavaScript对不存在属性返回<code>undefined</code>的特性，直接用短路运算符<code>||</code>计算：</p><pre class="line-numbers language-none"><code class="language-none">var width &#x3D; window.innerWidth || document.body.clientWidth;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="san-location-dui-xiang">三、location对象</span><a href="#san-location-dui-xiang" class="header-anchor">#</a></h1><p><code>location</code> 对象存储了与当前文档位置（URL）信息。</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td><code>href</code></td><td>声明或获取当前文档完整的URL</td></tr><tr><td><code>protocol</code></td><td>协议部分 <code>http:</code></td></tr><tr><td><code>host</code></td><td>主机和端口名称 <code>localhost:8080</code></td></tr><tr><td><code>hostname</code></td><td>主机名称 <code>localhost</code></td></tr><tr><td><code>port</code></td><td>端口号 <code>8080</code></td></tr><tr><td><code>pathname</code></td><td>路径部分</td></tr><tr><td><code>search</code></td><td>URL查询部分</td></tr><tr><td><code>hash</code></td><td>锚部分包括前导 <code>#</code></td></tr></tbody></table><p><code>location.href</code> 可以设置和获取url地址</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"demo.html"</span><span class="token punctuation">;</span><span class="token comment">//重定向</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"demo.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"demo.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hostname <span class="token comment">// http://127.0.0.1:5500/0717/12.location.html</span>protocol <span class="token comment">// 127.0.0.1</span>host <span class="token comment">// http:</span>port <span class="token comment">// 127.0.0.1:5500</span>pathname <span class="token comment">// 5500</span>search <span class="token comment">/// 0717/12.location.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>reload()</code> 重新加载文档</p><p><code>replace()</code>  重新加载一个新文档，无需为它创建一个新的历史记录，替换当前文档的历史记录</p><p><code>assign()</code> 和<code>href</code>差不多，要加载一个新页面，可以调用 <code>location.assign()</code> 。如果要重新加载当前页面，调用 <code>location.reload()</code> 方法非常方便。</p><h1><span id="si-history-dui-xiang">四、history对象 *</span><a href="#si-history-dui-xiang" class="header-anchor">#</a></h1><p><code>history</code>对象保存了浏览器的历史记录，JS 可以调用<code>history</code>对象的<code>back()</code>或<code>forward ()</code>，相当于用户点击了浏览器的后退或前进按钮。</p><p>这个对象属于历史遗留对象，对于现代Web页面来说，由于大量使用AJAX和页面交互，简单粗暴地调用<code>history.back()</code>可能会让用户感到非常愤怒。</p><p>新手开始设计Web页面时喜欢在登录页登录成功时调用<code>history.back()</code>，试图回到登录前的页面。这是一种错误的方法。</p><p>任何情况，你都不应该使用<code>history</code>这个对象了。</p><h1><span id="wu-screen-dui-xiang">五、screen对象</span><a href="#wu-screen-dui-xiang" class="header-anchor">#</a></h1><p><code>screen</code> 对象表示屏幕的信息，常用的属性有：</p><ul><li>screen.width：屏幕宽度，以像素为单位；</li><li>screen.height：屏幕高度，以像素为单位；</li><li>screen.colorDepth：返回颜色位数，如8、16、24。</li></ul><h1><span id="liu-console-dui-xiang">六、console对象 *</span><a href="#liu-console-dui-xiang" class="header-anchor">#</a></h1><p>JavaScript 原生中默认是没有 Console 对象，这是宿主对象（也就是浏览器）提供的内置对象。 用于访问调试控制台, 在不同的浏览器里效果可能不同。</p><p>Console 对象常见的两个用途：</p><ul><li>显示网页代码运行时的错误信息。</li><li>提供了一个命令行接口，用来与网页代码互动。</li></ul><table><thead><tr><th>assert()</th><th>ssert方法接受两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</th></tr></thead><tbody><tr><td>clear()</td><td>清除当前控制台的所有输出，将光标回置到第一行。</td></tr><tr><td>count()</td><td>用于计数，输出它被调用了多少次。</td></tr><tr><td>error()</td><td>输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈。</td></tr><tr><td>group()</td><td>用于将显示的信息分组，可以把信息进行折叠和展开。</td></tr><tr><td>groupCollapsed()</td><td>与console.group方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</td></tr><tr><td>groupEnd()</td><td>结束内联分组</td></tr><tr><td>info()</td><td>console.log 别名，输出信息</td></tr><tr><td>log()</td><td>输出信息</td></tr><tr><td>table()</td><td>将复合类型的数据转为表格显示。</td></tr><tr><td>time()</td><td>计时开始</td></tr><tr><td>timeEnd()</td><td>计时结束</td></tr><tr><td>trace()</td><td>追踪函数的调用过程</td></tr><tr><td>warn()</td><td>输出警告信息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM 对象</title>
      <link href="/02/20-DOM%E5%AF%B9%E8%B1%A1/"/>
      <url>/02/20-DOM%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><p>[TOC]</p><div class="toc"><!-- toc --><ul><li><a href="#yi-gai-nian">一、概念</a><ul><li><a href="#1-dom-ban-ben">1、DOM 版本</a></li><li><a href="#2-document-dui-xiang">2、document 对象</a></li></ul></li></ul><ul><li><a href="#er-jie-dian-fang-wen">二、节点访问</a><ul><li><a href="#1-jie-dian">1、节点</a></li><li><a href="#2-fang-wen-jie-dian">2、访问节点</a><ul><li><a href="#2-1-chuan-tong-fang-fa-huo-qu">2.1 传统方法获取</a></li><li><a href="#2-2-selectors-api">2.2 selectors API</a></li><li><a href="#2-3-fang-fa-bi-jiao">2.3 方法比较</a></li><li><a href="#2-4-jie-dian-guan-xi-zhong-fang-wen-jie-dian-fang-fa">2.4 节点关系中访问节点方法</a></li></ul></li></ul></li><li><a href="#san-jie-dian-cao-zuo">三、节点操作</a><ul><li><a href="#1-chuang-jian-jie-dian">1、创建节点</a><ul><li><a href="#4-yuan-su-nei-rong-cao-zuo">4、元素内容操作</a></li><li><a href="#5-shu-xing-jie-dian-cao-zuo">5、属性节点操作</a></li><li><a href="#6-wen-dang-pian-duan-jie-dian">6、文档片段节点</a></li></ul></li><li><a href="#san-jiao-ben-hua-css">三、脚本化CSS</a><ul><li><a href="#1-huo-qu-chi-cun">1、获取尺寸</a></li><li><a href="#2-huo-qu-wei-zhi">2、获取位置</a></li><li><a href="#3-huo-qu-wen-dang-da-xiao-shi-kou-da-xiao">3、获取文档大小、视口大小</a></li><li><a href="#4-huo-qu-he-she-zhi-xi-tong-gun-dong-tiao">4、获取和设置系统滚动条</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h2><span id="pyi-gai-nian">一、概念</span><a href="#pyi-gai-nian" class="header-anchor">#</a></h2><p><strong>Document Object Model</strong>， DOM，<strong>文档对象模型</strong>。是W3C制订的一套技术规范，用来描述JS脚本如何与HTML或XML文档进行交互的Web标准。加载HTML页面时，Web 浏览器生成一个树型结构，用来表示页面内部结构。DOM将这种树型结构理解为由节点组成的DOM树。</p><p>DOM规定了一系列标准接口（函数），允许开发人员通过标准方式访问文档结构、操作网页内容、控制样式和行为等。</p><p><img src="/images/2020/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B.jpg" alt="文档对象模型"></p><h3><span id="p1-dom-ban-ben">1、DOM 版本</span><a href="#p1-dom-ban-ben" class="header-anchor">#</a></h3><p>DOM0和DOM2。</p><h3><span id="p2-document-dui-xiang">2、document 对象</span><a href="#p2-document-dui-xiang" class="header-anchor">#</a></h3><p><strong><code>document</code> 对象</strong> 是<code>window</code>对象的一个属性，因此可以将<code>document</code>对象作为一个全局对象来访问。当浏览器载入html文档, 它就会成为<code>document</code>对象。</p><p>JS 顶层对象是<code>global</code>，<code>window</code>是<code>global</code>的实现。</p><h1><span id="er-jie-dian-fang-wen">二、节点访问</span><a href="#er-jie-dian-fang-wen" class="header-anchor">#</a></h1><p>在网页中所有对象和内容都被称为节点（Node）。如文档、元素、文本、属性、注释等。节点是DOM最基本的单元，并派生出不同类型的节点，它们共同构成了文档的树形结构模型。</p><h2><span id="p1-jie-dian">1、节点</span><a href="#p1-jie-dian" class="header-anchor">#</a></h2><h4><span id="pchang-yong-jie-dian-chong-lei">常用节点种类</span><a href="#pchang-yong-jie-dian-chong-lei" class="header-anchor">#</a></h4><ul><li>document 文档节点</li><li>documentFragment 文档片段节点</li><li>Element 元素节点</li><li>attr 属性节点</li><li>text 文本节点</li><li>comment 注释节点</li></ul><h4><span id="pjie-dian-guan-xi">节点关系</span><a href="#pjie-dian-guan-xi" class="header-anchor">#</a></h4><p>DOM把文档视为树形结构，称为节点树。节点之间的关系包括：上下父子关系，相邻兄弟关系。</p><ul><li>在节点树中，最顶端节点为根节点。除了根节点之外，每个节点都有一个父节点。</li><li>节点可以包含任何数量的子节点。</li><li>叶子是没有子节点的节点。</li><li>同级节点是拥有相同父节点的节点。</li></ul><h4><span id="pchildnodes">childNodes</span><a href="#pchildnodes" class="header-anchor">#</a></h4><p><code>childNodes</code> 属性获取元素所有的子节点，保存到一个<code>NodeList</code>对象中。</p><h4><span id="pjie-dian-lei-xing-ming-cheng-zhi">节点类型、名称、值</span><a href="#pjie-dian-lei-xing-ming-cheng-zhi" class="header-anchor">#</a></h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>nodeType</code></td><td>节点类型</td></tr><tr><td><code>nodeName</code></td><td>节点名称</td></tr><tr><td><code>nodeValue</code></td><td>节点值</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> oBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nodes <span class="token operator">=</span> oBox<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span><span class="token comment">// nodes -- 节点的集合，类型 NodeList</span><span class="token comment">// nodes[3] -- 直接获取节点</span><span class="token comment">// nodes.item(5) -- 直接获取节点</span><span class="token comment">// (1) documment</span><span class="token comment">// nodeType -- 9</span><span class="token comment">// nodeName -- #document</span><span class="token comment">// nodeValue -- null</span><span class="token comment">// (2) 元素节点</span><span class="token comment">// nodeType -- 1</span><span class="token comment">// nodeName -- 标签名大写</span><span class="token comment">// nodeValue -- null</span><span class="token comment">// (3) 文本节点</span><span class="token comment">// nodeType -- 3</span><span class="token comment">// nodeName -- #text</span><span class="token comment">// nodeValue -- 文本内容</span><span class="token comment">// (4) 注释节点</span><span class="token comment">// nodeType -- 8</span><span class="token comment">// nodeName -- #comment</span><span class="token comment">// nodeValue -- 注释内容</span><span class="token comment">// (5) 属性节点</span><span class="token comment">// nodeType -- 2</span><span class="token comment">// nodeName -- 键值对形式，属性名就是节点名称</span><span class="token comment">// nodeValue -- 属性值就是节点的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>​</p><h2><span id="p2-fang-wen-jie-dian">2、访问节点</span><a href="#p2-fang-wen-jie-dian" class="header-anchor">#</a></h2><h3><span id="p2-1-chuan-tong-fang-fa-huo-qu">2.1 传统方法获取</span><a href="#p2-1-chuan-tong-fang-fa-huo-qu" class="header-anchor">#</a></h3><p>（1） <strong>getElementsByTagName</strong> 通过标签名获取</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获得一个 HTMLCollection 对象（伪数组）</span><span class="token comment">// 拥有 length 属性</span><span class="token keyword">var</span> oLis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 控制背景并变色</span>oLis<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span> <span class="token comment">// 报错了！</span>oLis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span> <span class="token comment">// 注意要加下标获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）<strong>getElementsByClassName</strong> 通过类名</p><p>（3）getElementsByName 通过name属性获取（几乎不用）</p><p>IE6789 不兼容。</p><p>（4）getElementByID 通过id获取</p><p>和上面三个的区别是，这个可以直接获取到元素，不需要下标。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取某个元素中元素的方法</span><span class="token comment">// （1）先获取到ul</span><span class="token keyword">var</span> oBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> oBox2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// （2）通过ul获取到其中的li</span><span class="token keyword">var</span> oBoxLis <span class="token operator">=</span> oBox<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> oBoxLis2 <span class="token operator">=</span> oBox2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//   注意下标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-2-selectors-api">2.2 selectors API</span><a href="#p2-2-selectors-api" class="header-anchor">#</a></h3><p>直接使用CSS选择器作为参数传递。</p><p>核心方法 <code>querySelector</code> 和 <code>querySelectorAll</code>。后者获取的是一个<code>NodeList</code>对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取单个节点（如果选择多个，默认选第一个）</span><span class="token keyword">var</span> oRed <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#box>.red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取多个节点（NodeList），使用的时候注意加下标</span><span class="token keyword">var</span> oRed2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"#box>.red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oRed2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：低版本的IE&lt;8不支持<code>querySelector</code>和<code>querySelectorAll</code>。IE8仅有限支持。</p><h3><span id="p2-3-fang-fa-bi-jiao">2.3 方法比较</span><a href="#p2-3-fang-fa-bi-jiao" class="header-anchor">#</a></h3><p><code>getElementsByXX</code> 获取的元素集合是 <strong>动态</strong> 的，也就是DOM节点改变时，当前获取的集合内容也会改变。（选出来的元素会随着文档的改变而改变）</p><p><code>selector API</code> 是 <strong>静态</strong> 的集合。（只要取出来，就和页面有没有任何关系；未来元素改变，不影响获取的结果。）</p><p>NodeList是静态的，HTMLCollection是动态的</p><h3><span id="p2-4-jie-dian-guan-xi-zhong-fang-wen-jie-dian-fang-fa">2.4 节点关系中访问节点方法</span><a href="#p2-4-jie-dian-guan-xi-zhong-fang-wen-jie-dian-fang-fa" class="header-anchor">#</a></h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>parentNode</td><td>获取元素的父元素节点</td></tr><tr><td>children</td><td>获取元素的所有子元素节点 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></td></tr><tr><td>firstChild</td><td>获取第一个子元素节点<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></td></tr><tr><td>firstElementChild</td><td>获取第一个子元素节点</td></tr><tr><td>lastChild</td><td>获取最后一个子元素节点<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2:1]</a></sup></td></tr><tr><td>lastElementChild</td><td>获取最后一个子元素节点</td></tr><tr><td>nextSibling</td><td>获取下一个兄弟节点<sup class="footnote-ref"><a href="#fn2" id="fnref2:2">[2:2]</a></sup></td></tr><tr><td>nextElementSibing</td><td>获取下一个兄弟节点</td></tr><tr><td>previousSibling</td><td>获取上一个兄弟节点<sup class="footnote-ref"><a href="#fn2" id="fnref2:3">[2:3]</a></sup></td></tr><tr><td>previosElementSibing</td><td>获取上一个兄弟节点</td></tr></tbody></table><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// (1) parentNode</span><span class="token operator">...</span>parentNode <span class="token comment">// ul</span><span class="token operator">...</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token comment">// body</span><span class="token operator">...</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode <span class="token comment">// html</span><span class="token operator">...</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode <span class="token comment">// document</span><span class="token operator">...</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode <span class="token comment">// null</span><span class="token operator">...</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode <span class="token comment">// 报错</span><span class="token comment">// (2) 获取上一个兄弟元素节点的兼容性封装</span><span class="token keyword">function</span> <span class="token function">getPrevSibling</span><span class="token punctuation">(</span><span class="token parameter">ele</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>previousElementSibing<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousElementSibing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ele<span class="token punctuation">.</span>previousSibing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他获取节点方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// (1)获取body元素</span>document<span class="token punctuation">.</span>body<span class="token operator">==</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// (2)获取head元素</span>document<span class="token punctuation">.</span>head<span class="token operator">==</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// (3)获取html元素</span>document<span class="token punctuation">.</span>documentElement<span class="token operator">==</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="san-jie-dian-cao-zuo">三、节点操作</span><a href="#san-jie-dian-cao-zuo" class="header-anchor">#</a></h1><p>节点关系都是只读的，DOM提供了一些操作节点的方法。</p><h2><span id="p1-chuang-jian-jie-dian">1、创建节点</span><a href="#p1-chuang-jian-jie-dian" class="header-anchor">#</a></h2><p>（1）<code>createElement</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token comment">/*参数：标签名字返回值：新元素的引用*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用document对象的createElement方法能够根据参数指定的标签名创建一个新的元素。并返回对新元素的引用。</p><p>使用creatElement方法创建的新元素不会被自动添加到文档里，需要使用appendChild等方法。</p><p>（2）创建文本节点 <code>createTextNode</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token comment">//                    参数是字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用document对象的createTextNode方法可创建文本节点。创建的文本节点需要使用appendChild等方法才能插入到元素节点中，当然也可以使用 <strong>innerHTML</strong> 方法给元素节点添加内容。</p><h4><span id="pcha-ru-jie-dian">插入节点</span><a href="#pcha-ru-jie-dian" class="header-anchor">#</a></h4><p>都是插入元素的父元素调用的方法。</p><p>（1）appendChild()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>appendChild()方法可以向当前节点的字节点列表的==末尾==添加新的节点。如果文档树中已经存在参数节点，则将从文档树中删除，然后重新插入新的位置。</p><p>（2）insertBefore( )</p><p>使用 <strong>insertBefore(newChild,oldChild)</strong> 方法可以在已有的子节点前插入一个新的子节点。</p><p>newChild表示新插入的节点，oldChild用于指定插入节点的后边的相邻位置。插入成功以后，该方法返回新插入的节点。insertBefore可以把指定元素及其所包含的所有子节点都一起插入到指定位置中。同时会先删除移动的元素，再重新插入。</p><p>appendChild 和 insertBefore 可以操作已经存在的元素。</p><h4><span id="pfu-zhi-jie-dian-clonenode">复制节点 cloneNode()</span><a href="#pfu-zhi-jie-dian-clonenode" class="header-anchor">#</a></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//      参数 true 深复制 复制整个节点和里面的内容</span><span class="token comment">//           false 浅复制 只复制节点（不要里面的内容）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>cloneNode()</code> 方法可以创建一个节点的副本<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。复制后的新节点，也不会被自动插入到文档，需要用到之前的方法去插入。</p><h4><span id="pshan-chu-jie-dian-removechild">删除节点 removeChild()</span><a href="#pshan-chu-jie-dian-removechild" class="header-anchor">#</a></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 返回值：</span><span class="token comment">// - 删除成功 ==> 返回被删除的节点</span><span class="token comment">// - 删除失败 ==> 返回 null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>removeChild</strong>() 方法可以从子节点列表中删除某个节点，该节点所包含的所有子节点将同时被删除。</p><h4><span id="pti-huan-jie-dian-replacechild">替换节点 replaceChild()</span><a href="#pti-huan-jie-dian-replacechild" class="header-anchor">#</a></h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">replaceChild</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span>oldNode<span class="token punctuation">)</span><span class="token comment">// 参数</span><span class="token comment">// - newNode 指定的新节点</span><span class="token comment">// - oldNode 被替换的节点</span><span class="token comment">// 返回值</span><span class="token comment">// - 替换成功 ==> 返回替换的节点</span><span class="token comment">// - 替换失败 ==>  null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>replaceChild(new, old)</code> 方法可以将某个子节点替换为另一个。替换节点替换的是所有子节点以及包含的所有内容。</p><h3><span id="p4-yuan-su-nei-rong-cao-zuo">4、元素内容操作</span><a href="#p4-yuan-su-nei-rong-cao-zuo" class="header-anchor">#</a></h3><h4><span id="pinnerhtml-innertext-outerhtml-outertext">innerHTML、innerText、outerHTML、outerText</span><a href="#pinnerhtml-innertext-outerhtml-outertext" class="header-anchor">#</a></h4><p>（1）获取标签</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>破晓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>是猪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">oT <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oT<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span> <span class="token comment">//&lt;span>破晓&lt;/span>是猪</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oT<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span> <span class="token comment">//破晓是猪</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oT<span class="token punctuation">.</span>outerText<span class="token punctuation">)</span> <span class="token comment">//破晓是猪</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oT<span class="token punctuation">.</span>outerHTML<span class="token punctuation">)</span> <span class="token comment">//&lt;p id="abc">&lt;span>破晓&lt;/span>是猪&lt;/p></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>innerHTML</code> 和 <code>innerText</code>  前者可以解析并输出标签，后者是纯文本。</p><p><code>innerHTML</code> 和 <code>outerHTML</code>  前者不包括自身，后者包括自身。</p><p><img src="/images/2020/%E5%85%83%E7%B4%A0%E5%86%85%E5%AE%B9%E6%93%8D%E4%BD%9C.gif" alt="元素内容操作"></p><p>（2）设置标签（直接覆盖原来的内容）</p><p>innerText 和 outerText 在获取的时候是相同效果，但在设置时，innerText仅设置标签所包含的文本，而 outerText 设置包含包括标签<strong>自身在内</strong>的文本。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">oTest<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"这是内容"</span>oTest<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href = "</span>##<span class="token string">"> 这是内容 &lt;/a>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="ptextcontent">textContent</span><a href="#ptextcontent" class="header-anchor">#</a></h4><p><strong>textContent</strong> 设置或者返回固定节点的文本内容。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"你好"</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（1）textContent和innerHTML的区别</p><ul><li>textContent 会获取 style= “display:none” 中的文本，而innerText不会。</li><li>innerText 不会理会html格式，直接输出不换行的文本，textContent会根据标签里面的元素独立一行。</li><li>innerText 对IE的兼容性较好 ，textContent虽然作为标准方法但是只支持IE8+以上的浏览器 。</li></ul><p>（2）兼容性处理</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">setOrGetContent</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span>content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//代表当前是读取操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//只要能拿到这个dom对象的textContent属性值，代表当前用户是高级浏览器</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>textContent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//代表拿不到  那就是低级浏览器</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//代表写入操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//代表高级</span>            node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> content<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//代表低级</span>            node<span class="token punctuation">.</span>innerText <span class="token operator">=</span> content<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p5-shu-xing-jie-dian-cao-zuo">5、属性节点操作</span><a href="#p5-shu-xing-jie-dian-cao-zuo" class="header-anchor">#</a></h3><p>create | get | set | remove</p><h4><span id="pchuang-jian-shu-xing-jie-dian">创建属性节点</span><a href="#pchuang-jian-shu-xing-jie-dian" class="header-anchor">#</a></h4><p><strong>createAttribute</strong> 方法可以创建属性节点。</p><ul><li>使用属性节点的name属性，可以得到属性的名称。</li><li>使用属性节点的value属性，可以设置和属性的值。</li><li>创建的属性可以通过setAttributeNode来插入到元素中。</li></ul><h4><span id="pdu-qu-shu-xing-zhi">读取属性值</span><a href="#pdu-qu-shu-xing-zhi" class="header-anchor">#</a></h4><p>（1） 常用点语法通过元素直接访问HTML属性，如src、href等<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>。</p><p>（2） <strong>getAttribute</strong> 方法可以读取指定属性的值（非自有属性）。</p><h4><span id="pshe-zhi-shu-xing-zhi">设置属性值</span><a href="#pshe-zhi-shu-xing-zhi" class="header-anchor">#</a></h4><p><strong>setAttribute(name,value)</strong> 方法可以设置元素的属性值。</p><p>参数name和value分别代表属性名称和属性值，并且必须是字符串，如果存在相同属性，则值被刷新，如果不存在则创建属性并添加。</p><p>通过 <code>ele.value</code> 获取或设置表单的值（string）。</p><h4><span id="pshan-chu-shu-xing">删除属性</span><a href="#pshan-chu-shu-xing" class="header-anchor">#</a></h4><p><strong>removeAttribute</strong>() 使用元素的方法可以删除指定的属性</p><p>参数是要删除的属性名。</p><h4><span id="pzi-ding-yi-shu-xing-h5">自定义属性 <code>H5</code></span><a href="#pzi-ding-yi-shu-xing-h5" class="header-anchor">#</a></h4><p>HTML5 允许用户为元素自定义属性，但是要求添加前缀<code>data-</code>。</p><p><code>.dataset</code> 设置和获取自定义属性</p><p><code>.delete</code> 删除自定义属性</p><h3><span id="p6-wen-dang-pian-duan-jie-dian">6、文档片段节点</span><a href="#p6-wen-dang-pian-duan-jie-dian" class="header-anchor">#</a></h3><p><strong>DocumentFragment</strong> 是一个==虚拟的==节点类型，仅仅存在于内存中，没有添加到文档树中，看不到渲染效果。当文档片段设计完善后，再使用JS一次性添加到文档树中显示出来，提高效率，==减少页面重绘的次数==。避免浏览器渲染和资源占用，解决大量添加节点时候的性能问题。</p><p><strong>createDocumentFragment()</strong> 创建虚拟节点，使用 appendChild 等方法插入。</p><h2><span id="psan-jiao-ben-hua-css">三、脚本化CSS</span><a href="#psan-jiao-ben-hua-css" class="header-anchor">#</a></h2><h3><span id="p1-huo-qu-chi-cun">1、获取尺寸</span><a href="#p1-huo-qu-chi-cun" class="header-anchor">#</a></h3><p><code>offsetWidth</code>和<code>offsetHeight</code> 可以获取元素的<code>border-box</code>尺寸。</p><p><code>clientWidth</code>和<code>clientHeight</code> 可以获取元素的<code>padding-box</code>尺寸。</p><p><code>scrollWidth</code>和<code>scrollHeight</code> 可以获取元素完全内容尺寸和<code>padding</code>。（几乎不用）</p><p><code>innerWidth</code>和<code>innerHeight</code> 可以获取浏览器窗口的尺寸。</p><p><code>outerWidth</code>和<code>outerHeight</code> 可以获取取加上工具条与滚动条窗口的尺寸。</p><p><code>style.width/height</code> <strong>只能获取行内样式的尺寸</strong>（字符串，“10px”）。</p><p>常见应用: 大盒子里面小盒子，大盒子用<code>clientX</code>，小盒子用<code>offsetX</code>。</p><h3><span id="p2-huo-qu-wei-zhi">2、获取位置</span><a href="#p2-huo-qu-wei-zhi" class="header-anchor">#</a></h3><p><code>getBoundingClientRect()</code> 返回一个对象，对象中包含元素距离视口的距离信息。</p><p>getBoundingClientRect。</p><p>获取某个元素相对于视口的位置集合</p><ul><li>top 元素上边到视窗上的距离</li><li>right 元素右边到视窗左的距离</li><li>bottom 元素下边到视窗上的距离</li><li>left 元素左边到视窗左的距离</li><li>width</li><li>height</li></ul><p>offsetParent</p><p>==offsetLeft / Top==</p><p>返回当前元素的相对包含块的偏移位置。</p><p>JS 默认把它当成绝对定位属性来寻找包含块，不管是什么属性，都是寻找最近定位父级，如果没找到就是 HTML。</p><p>clientLeft / Top</p><p>clientLeft 等于 border-left。</p><p>==scrollLeft / Top==</p><p>==设置或者获取==当前元素滚动条已经滚动过的距离。（值增大，内容左滚）</p><h3><span id="p3-huo-qu-wen-dang-da-xiao-shi-kou-da-xiao">3、获取文档大小、视口大小</span><a href="#p3-huo-qu-wen-dang-da-xiao-shi-kou-da-xiao" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取文档大小</span><span class="token keyword">function</span> <span class="token function">getDocSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> h <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>       <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>           y<span class="token operator">:</span>h<span class="token punctuation">.</span>offsetHeight <span class="token operator">||</span> b<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>           x<span class="token operator">:</span>h<span class="token punctuation">.</span>offsetWidth <span class="token operator">||</span> b<span class="token punctuation">.</span>offsetWidth       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取视口大小</span><span class="token keyword">function</span> <span class="token function">getWinSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>         y<span class="token operator">:</span>h<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> b<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>         x<span class="token operator">:</span>h<span class="token punctuation">.</span>clientWidth <span class="token operator">||</span> b<span class="token punctuation">.</span>clientWidth    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p4-huo-qu-he-she-zhi-xi-tong-gun-dong-tiao">4、获取和设置系统滚动条</span><a href="#p4-huo-qu-he-she-zhi-xi-tong-gun-dong-tiao" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取系统滚动条</span><span class="token keyword">function</span> <span class="token function">getDocScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> h <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">var</span> y <span class="token operator">=</span> self<span class="token punctuation">.</span>pageYOffset<span class="token operator">||</span>            h<span class="token punctuation">.</span>scrollTop<span class="token operator">||</span>            b<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> self<span class="token punctuation">.</span>pageXOffset<span class="token operator">||</span>            h<span class="token punctuation">.</span>scrollLeft<span class="token operator">||</span>            b<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            x<span class="token operator">:</span>x<span class="token punctuation">,</span>            y<span class="token operator">:</span>y        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 设置系统滚动条</span><span class="token keyword">function</span> <span class="token function">setDocScroll</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> x<span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"number"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> y <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> x<span class="token punctuation">;</span>        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> y<span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> x<span class="token punctuation">;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> y<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>IE678会取到注释节点。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>前者在IE678中获取上一个元素节点，在其他浏览器中获取的是是一个节点（可能是文本节点等）。后者在浏览器中获取上一个兄弟元素节点，IE678不兼容。 <a href="#fnref2" class="footnote-backref">↩︎</a> <a href="#fnref2:1" class="footnote-backref">↩︎</a> <a href="#fnref2:2" class="footnote-backref">↩︎</a> <a href="#fnref2:3" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>注意改id 复制的节点会包含原节点的所有特性，如果原节点中包含id属性，就会出现id属性值重叠的情况。为了避免潜在的冲突，应修改其中某个节点的id属性值。 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>对于class属性，必须使用className属性名。对于for属性，则必须使用htmlFor属性名。 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>在脚本化css中设置float属性和text属性，要改为cssFloat和cssText（一次设置多个样式）使用。 <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/09/Linux/"/>
      <url>/09/Linux/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">命令</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>clear</code></td><td>清屏</td></tr><tr><td style="text-align:center"><code>LS</code></td><td>查看当前文件夹下的文件列表<br><code>list</code>的缩写<br><code>ls -al</code> 、<code>ls -a -l</code> 查看隐藏文件并竖向排列</td></tr><tr><td style="text-align:center"><code>CD</code></td><td>移动到文件夹<br>可以使用<code>TAB</code>补全<br><code>cd ..</code> 返回上级目录</td></tr><tr><td style="text-align:center"><code>mkdir</code></td><td>创建文件夹</td></tr><tr><td style="text-align:center"><code>touch</code></td><td>创建文件</td></tr><tr><td style="text-align:center"><code>rm</code></td><td>删除文件<br>删除文件夹 <code>-r</code></td></tr><tr><td style="text-align:center"><code>mv</code></td><td>移动文件（源 目标）</td></tr><tr><td style="text-align:center"><code>cat</code></td><td>查看文件内容</td></tr><tr><td style="text-align:center"><code>ctrl+c</code></td><td>关闭程序</td></tr><tr><td style="text-align:center"><code>vi</code></td><td>编辑文件</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
