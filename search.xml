<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>索引</title>
      <link href="/%E7%B4%A2%E5%BC%95/"/>
      <url>/%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2><span id="pweb"><code>web</code></span><a href="#pweb" class="header-anchor">#</a></h2><h2><span id="pextra"><code>extra</code></span><a href="#pextra" class="header-anchor">#</a></h2><ul><li>Hexo，基于Node.js的博客框架</li><li>VSCode 代码片段</li><li>Git 手册</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mockjs 使用手册</title>
      <link href="/web/mockjs/"/>
      <url>/web/mockjs/</url>
      
        <content type="html"><![CDATA[<p><a href="http://mockjs.com/examples.html">文档</a></p><h2><span id="pchang-yong-api">常用 API</span><a href="#pchang-yong-api" class="header-anchor">#</a></h2><p>开始使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">npm i mockjs<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Random <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mockjs"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>基础</p><ul><li><p>随机布尔值 <code>Random.boolean()</code></p></li><li><p>随机整数 <code>Random.integer( min?, max? )</code></p></li><li><p>随机浮点数 <code>Random.float( min?, max?, dmin?, dmax? )</code></p></li><li><p>随机字符 <code>Random.character( pool? )</code></p></li><li><p>随机字符串 <code>Random.string( pool?, min?, max? )</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Random.character( 'lower/upper/number/symbol' )</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>数组</p><ul><li>序列 <code>Random.range(start?, stop, step?)</code></li><li><strong>数组随机取个 <code>Random.pick( arr )</code></strong></li><li><strong>数组乱序 <code>Random.shuffle(arr)</code></strong></li></ul><p>生成随机id</p><ul><li><code>Random.guid()</code></li><li>累加 <code>Random.increment( step? )</code></li></ul><p>生成随机时间</p><ul><li><code>Random.date( format? )</code></li><li><code>Random.time( format? )</code></li></ul><p>生成随机占位图</p><ul><li><p>生成图片链接 <code>Random.image( 尺寸?, 背景色?, 前景色?, 格式?, 文本? )</code></p></li><li><p>生成图片数据 <code>Random.dataImage( 尺寸?, 文本? )</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Random<span class="token punctuation">.</span><span class="token function">image</span><span class="token punctuation">(</span><span class="token string">'200x100'</span><span class="token punctuation">,</span> <span class="token string">'#894FC4'</span><span class="token punctuation">,</span> <span class="token string">'#FFF'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>生成随机颜色</p><ul><li><code>Random.color()</code>  / <code>Random.hex()</code></li><li><code>Random.rgb()</code> / <code>Random.rgba()</code></li><li><code>Random.hsl()</code></li></ul><p>生成随机文本</p><ul><li>中文段落 <code>Random.cparagraph( 最小行数?, 最大行数)</code></li><li>中文句子 <code>Random.csentence()</code></li><li>中文字 <code>Random.cword( pool?, min?, max? )</code></li><li>中文标题 <code>Random.ctitle()</code></li></ul><p>生成随机中文姓名</p><ul><li><code>Random.cfirst()</code></li><li><code>Random.clast()</code></li><li><code>Random.cname()</code></li></ul><p>生成随机地名</p><ul><li><p>省级 <code>Random.province()</code></p></li><li><p>地级 <code>Random.city()</code></p></li><li><p>县级 <code>Random.county()</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 使用手册</title>
      <link href="/extra/Git/"/>
      <url>/extra/Git/</url>
      
        <content type="html"><![CDATA[<p><strong>Git</strong> 是一款开源免费的<strong>分布式</strong>的版本控制系统。相对来说，SVN 是集中式版本控制系统。Git 最本质的工作流程是从远程仓库拉取代码到本地版本库，签出分支然后在本地工作区进行开发，通过暂存区将代码提交到版本库，最后再推送到远程仓库。</p><p>Git 可以备份代码、版本回退、协作开发、权限控制。</p><h2><span id="pchang-yong-ming-ling-yi-lan">常用命令一览</span><a href="#pchang-yong-ming-ling-yi-lan" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 初始化仓库git init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="yi-kai-shi">一、开始</span><a href="#yi-kai-shi" class="header-anchor">#</a></h1><h2><span id="p1-an-zhuang-pei-zhi">1、安装配置</span><a href="#p1-an-zhuang-pei-zhi" class="header-anchor">#</a></h2><ul><li><a href="https://git-scm.com/">下载</a>并安装 Git</li><li>打开命令行工具检查是否安装成功</li><li>配置用户名和邮箱</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config -global user.name &quot;xxx&quot;git config -global user.email &quot;xxx&quot;# 配置完成之后检查git config -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-xin-jian-bing-chu-shi-hua-yi-ge-cang-ku">2、新建并初始化一个仓库</span><a href="#p2-xin-jian-bing-chu-shi-hua-yi-ge-cang-ku" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p3-si-ge-qu-kuai">3、四个区块</span><a href="#p3-si-ge-qu-kuai" class="header-anchor">#</a></h2><p>Git 分为四个区块</p><ul><li>远程仓库</li><li>本地版本库</li><li>暂存区 <code>staged</code></li><li>工作区</li></ul><h2><span id="p4-hu-lue-wen-jian-gitignore">4、忽略文件 <code>.gitignore</code></span><a href="#p4-hu-lue-wen-jian-gitignore" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 忽略所有的 .idea 文件.idea# 忽略所有以 .test 结尾的文件*.test# 忽略 node_modules 文件和文件夹&#x2F;node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="er-ri-chang-cao-zuo">二、日常操作</span><a href="#er-ri-chang-cao-zuo" class="header-anchor">#</a></h1><h2><span id="p1-chang-yong">1、常用</span><a href="#p1-chang-yong" class="header-anchor">#</a></h2><p>（1）查看仓库状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>nothing to commit, working tree clean</code> 工作区和仓库一样，暂存区空</li><li><code>untracked files</code> 工作区未跟踪的文件</li><li><code>changes to be commited</code> 暂存区文件</li><li><code>no staged for commit</code> 以下文件还没添加到暂存区</li></ul><p>（2）把文件加入暂存区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add 文件名# 添加所有修改的文件到暂存区git add . git add *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）提交暂存区的文件到仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git commit -m &#39;注释内容&#39;# 注释规范# feat 新增功能# fix  修复bug# cors 对核心功能进行修改# doc  更新文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）查看工作区和暂存区的差异</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看工作区和暂存区的修改（不会显示删除或者新增文件）git diff# 查看暂存区和仓库区的差异git diff -cached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-la-qu">2、拉取</span><a href="#p2-la-qu" class="header-anchor">#</a></h2><p>场景01</p><p>假设现有两个远程分支 master、branchA，并已经拉取到本地版本库，此时一同事删除了远程仓库中的分支 branchA，但是你电脑上仍然能看到 origin/branchA ，怎样才能更新仓库呢？</p><p>解决：获取远程仓库的新分支以及删除远程仓库已删除的分支（本地版本库中的分支）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git fetch -p# --prune 修剪的缩写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>场景02</p><p>本地新增提交记录后，准备推到远程前会先从远程 <code>git pull</code> 拉取代码进行更新，假设此时其他同事已经推送新的代码，为什么这时候拉取会自动产生一个（看似）没有意义的提交记录，怎样让提交记录更直观明了？</p><p>原始提交记录（*代表当前分支）</p><pre class="line-numbers language-none"><code class="language-none">      C---D  origin&#x2F;branchA     &#x2F;A---B---E  branchA*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git pull</code> 之后的提交记录多了一个 <code>Merge branch &quot;XXX&quot; into XXX</code>，也就是下例的 F 点</p><pre class="line-numbers language-none"><code class="language-none">      C---D  origin&#x2F;branchA     &#x2F;     \A---B---E---F  branchA*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git pull --rebase<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">      origin&#x2F;branchA            |A---B---C---D---E  branchA*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：</p><ul><li><p><code>git pull</code> = <code>git fetch</code> + <code>git merge</code></p><pre><code>                   拉取到本地版本库 + 合并到本地工作区</code></pre></li><li><p><code>git pull --rebase</code> = <code>git fetch</code> + <code>git rebase</code></p><pre><code>                   拉取到本地版本库 + 工作区变基到最新版本库</code></pre></li></ul><h2><span id="p3-fen-zhi">3、分支</span><a href="#p3-fen-zhi" class="header-anchor">#</a></h2><p>查看分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git checkout 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>场景01</p><p>怎么从指定分支创建分支?</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 从目标分支创建本地分支，如果没有指定目标分支，默认为当前分支git branch 分支名[&lt;目标分支&gt;]# 创建并切换到该分支git checkout -b 分支名 [&lt;目标分支&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>场景02</p><p>怎么将本地分支关联到指定的远程分支?</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git branch --set-upstream-to&#x3D;&lt;origin&#x2F;branchname&gt;# 或者git branch -u &lt;origin&#x2F;branchname&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>场景03</p><p>怎么取消本地分支和远程分支的关联?</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git branch --unset-upstream [&lt;origin&#x2F;branchname&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>场景04</p><p>怎么查看分支以及其关联的远程分支的详细信息?</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git branch -vv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>场景05</p><p>怎么删除本地分支？</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git branch -D 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>场景06</p><p>怎么删除远程分支？</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git push -d origin &lt;branchname&gt;# 或者git push origin :branchname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>场景07</p><p>怎么移动/重命名分支？</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 将目标分支 移动&#x2F;重命名 到新分支git branch -m &lt;branchname&gt; [&lt;targetBranch&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>场景08</p><p>怎么合并分支？</p><p>解决：<code>merge</code> 合并</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git merge &lt;branchname&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>情况1：</p><p>原始提交记录</p><pre class="line-numbers language-none"><code class="language-none">      C---D  feature     &#x2F;A---B  master*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>合并之后的提交记录</p><pre class="line-numbers language-none"><code class="language-none">A---B---C---D  master*、feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>情况2：</p><p>原始提交记录</p><pre class="line-numbers language-none"><code class="language-none">      C---D  feature     &#x2F;A---B---E  master*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>合并之后的提交记录</p><pre class="line-numbers language-none"><code class="language-none">      C---D  feature     &#x2F;     \A---B---E---F master*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在多人协作开发场景下，<code>merge</code> 操作容易产生分支间的闭环，使得分支提交信息变得不清晰，不利于分支维护。</p><p>场景09</p><p>怎么合并指定分支的指定提交记录？</p><p>解决：<code>cherry-pick</code> 遴选</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 合并指定提交记录git cherry-pick &lt;commit&gt;# 合并多个提交记录git cherry-pick &lt;commit1&gt; &lt;commit2&gt; &lt;commit3&gt;# 若提交记录在同一分支上，则可以采用区间形式(start, end]，commit1不包含，commit3包含# 等价于合并了 commit2、commit3git cherry-pick &lt;commit1&gt;..&lt;commit3&gt;# 若省略了区间形式的起点，则起点默认为两个分支的交点git cherry-pick ..&lt;commit3&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原始提交记录</p><pre class="line-numbers language-none"><code class="language-none">      C---D  feature     &#x2F;A---B---E  master*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git cherry-pick B..D</code>  遴选之后的提交记录</p><pre class="line-numbers language-none"><code class="language-none">      C---D  feature     &#x2F;A---B---E---C&#39;---D&#39;  master*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>cherry-pick</code> 操作会拷贝提交记录到当前分支，使得当前分支的提交信息更为清晰。</p><p>扩展：<code>cherry-pick</code> 操作若产生了冲突，处理流程如下</p><ol><li>解决冲突，或者想中断此次操作 <code>git cherry-pick --abort</code>（中断则不需要后两步操作）</li><li>添加到暂存区 <code>git add .</code></li><li>继续遴选 <code>git cherry-pick --continue</code></li></ol><p>场景10</p><p>从公共分支签出特性分支进行新功能开发，开发完后准备合并回功公共分支，此时发现公共分支已经有其他人推送新的提交记录，此时怎么以公共分支来更新特性分支？</p><p>解决：通过 <code>rebase</code> 变基，将当前分支的基点移动到目标分支上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># branchname 默认为当前分支，可省略git rebase &lt;targetBranch&gt; [&lt;branchname&gt;]# 等价于下面两条命令git checkout &lt;branchname&gt;git rebase &lt;targetBranch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原始提交记录</p><pre class="line-numbers language-none"><code class="language-none">      C---D  feature     &#x2F;A---B---E  master*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git rebase master</code> 变基之后的提交记录</p><pre class="line-numbers language-none"><code class="language-none">          C&#39;---D&#39;  feature*         &#x2F;A---B---E  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变基操作能更新当前分支的基点（起点），使当前分支包含公共分支上新的提交记录，这样有个好处就是如果和主分支存在冲突，可以在特性分支上提前解决。</p><p>因为重塑了历史提交记录，所以变基后当前分支会和远程分支不一致，需要采用强制推送覆盖远程分支。</p><p>扩展：<code>rebase</code> 操作若产生了冲突，处理流程如下</p><ol><li>解决冲突，或者想中断此次操作 <code>git rebase --abort</code>（中断则不需要后两步操作）</li><li>添加到暂存区 <code>git add .</code></li><li>继续变基 <code>git rebase --continue</code></li></ol><p>场景11</p><p>怎么合并多个提交记录？</p><p>解决方法：<code>git rebase --interactive</code> 或者缩写形式 <code>git rebase -i</code>交互式变基</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># commit 为需要处理的提交记录区间的父节点git rebase -i &lt;commit&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原始提交记录</p><pre class="line-numbers language-none"><code class="language-none">A---B---C---D feature*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要合并 C、D 两个提交记录，<code>git rebase -i B</code></p><pre class="line-numbers language-none"><code class="language-none">pick a0a6eba feat: 新增 C 功能pick 95f09e5 feat: 新增 D 功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 D 提交记录合并进 C 中 ，所以把 D 记录的 <code>pick</code> 改为 <code>squash</code>，然后保存退出即可</p><pre class="line-numbers language-none"><code class="language-none">pick a0a6eba feat: 新增 C 功能squash 95f09e5 feat: 新增 D 功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最终的提交记录，E 点则包含了 C 和 D 的全部改动</p><pre class="line-numbers language-none"><code class="language-none">A---B---E feature*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扩展：交互式变基过程中会自动进入 vi 编辑模式，参数解释如下</p><ul><li>p，pick 选中</li><li>r，reword 选中，并且修改提交信息</li><li>e，edit 选中，rebase 时会暂停，允许你修改这个 commit</li><li>s，squash 选中，会将当前 commit 与上一个 commit 合并</li><li>f，fixup ，与 squash 相同，但不会保存当前 commit 的提交信息</li><li>x，exec 执行其他 shell 命令</li></ul><h2><span id="p4-ti-jiao">4、提交</span><a href="#p4-ti-jiao" class="header-anchor">#</a></h2><p>场景01</p><p>最近的一次提交记录信息错误怎么修改？</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git commit --amend -m &#39;新的提交信息&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>场景02</p><p>最近的一次提交，发现遗漏了部分改动？</p><p>解决方法：</p><p>出于提交信息的完整性考虑，在不新增提交记录的情况下将遗漏的改动合并到本次提交中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 将遗漏的文件改动添加到暂存区git add &lt;filename&gt;# 将暂存区中的所有文件合并到最近一次提交中，# 如果不带 --no-edit 参数，则在合并之后会进入提交信息修改面板git commit --amend --no-edit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p5-tui-song">5、推送</span><a href="#p5-tui-song" class="header-anchor">#</a></h2><p>场景01</p><p>怎么推送到远程指定分支？</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 推送到远程指定分支，并创建关联git push -u origin &lt;branchname&gt;# 若本地分支已经与远程分支关联，则可省略远程分支git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>场景02</p><p>怎么强制推送到远程分支？</p><p>解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git push -f # --force 的缩写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若在强制推送的过程中，已经有其他人推送到该远程分支，则会使他人的提交记录丢失，<strong><code>为了更安全的推送</code></strong>，可用如下命令。<strong><code>在他人推送了新的提交的情况下，强制推送会被拒绝</code></strong>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git push --force-with-lease<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>扩展：需要强制推送的场景可能如下</p><ul><li>分支 <code>git rebase</code> 变基操作后</li><li>将错误代码推送到了远程，想要丢弃此提交记录（建议用下文介绍的 <code>git revert</code> 操作）</li></ul><p>强制推送到远程分支会覆盖远程，若不熟悉此命令，请慎用！</p><h2><span id="p6-che-xiao">6、撤销</span><a href="#p6-che-xiao" class="header-anchor">#</a></h2><p>（1）怎么撤销本地工作区文件的改动？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 丢弃工作区某个文件的改动git checkout -- &lt;filePath&gt;# 丢弃工作区所有文件的改动git checkout -- .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>撤销本地工作的改动后，文件会回退到最近一次 commit 或 add 状态。</p><p>（2）怎么撤销暂存区的改动？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 当没有指定 filename 时，表示撤销暂存区中的所有文件git reset HEAD &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>撤销暂存区的改动后，文件会回到工作区状态。</p><p>（3）怎么撤销本地版本库的改动？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 回退到指定的提交记录git reset [&lt;mode&gt;] [&lt;commit&gt;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过指定 mode 参数，使回退之后g的文件处于相应状态：</p><ul><li><code>--soft</code>：将当前分支重置到指定 ，当前版本与指定版本间的改动文件处于 <strong>暂存区</strong> 中，待提交状态。</li><li><code>--hard</code>：重置 <strong>暂存区</strong> 和 <strong>工作区</strong>，自以来暂存区和工作区中的任何修改都被 <strong>丢弃</strong>。</li><li><code>--mixed</code>（默认）：将当前分支重置到指定 ，当前版本与指定版本间的改动文件处于 <strong>工作区</strong> 中，<strong>‘not staged’</strong> 状态。</li></ul><p>扩展：HEAD 可以理解为一个指针，总是指向当前分支上最近一次的提交记录。<code>HEAD^ </code>表示上一个提交记录，<code>HEAD^^</code>表示上两个提交记录，<code>HEAD~n</code> 表示上 n 个提交记录。</p><pre class="line-numbers language-none"><code class="language-none">           HEAD^&#x2F;HEAD~1                |A---B---C---D---E---F  branchA            |       |    HEAD^^&#x2F;HEAD~2   HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）下班前急匆匆的将代码推到远程仓库，然后愉快的回家了，结果第二天发现推远程的代码出错了，这时候怎么撤销远程仓库的改动？</p><p><code>revert</code> 逆向修改，然后重新提交并推送到远程仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 撤销修改git revert &lt;commit&gt;# 推送到远程仓库，实现远程仓库的撤销git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展：<code>revert</code> 和 <code>reset</code> 的区别</p><p><code>revert</code> 是新增一次提交记录，其修改内容正好抵消指定 的改动，而 <code>reset</code> 的撤销效果是重置了版本库。假设本地版本库和远程仓库一致，<code>reset</code> 撤销了一个提交，此时本地版本库落后远程仓库一个版本，<code>git push</code> 推送到远程会失败，而 <code>revert</code> 新增了一个提交，本地版本库领先远程仓库一个记录，此时 <code>git push</code> 可以正常推送到远程。</p><p>（5）恢复工作区改动的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git restore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（6）取消暂存区的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git restore --staged 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="p7-ri-zhi">7、日志</span><a href="#p7-ri-zhi" class="header-anchor">#</a></h2><p>（1）本地 commit 提交了但是未推送到远程仓库，此时 <code>git reset --hard</code> 误操作强制回滚，弄丢的提交记录怎么恢复？</p><p>通过 <code>git reflog</code> 查看引用日志，找到误删的提交记录，然后回滚到这条被删除的记录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git reflog # Reference logs(引用日志)，能记录 HEAD 和分支引用所指向的历史<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>假设本地提交了三次 commit，然后误操作强制回滚到第一次提交，导致第二、三次的提交全部丢失</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; git reflog 引用日志输出格式如下1c36188 HEAD@&#123;0&#125;: reset: moving to 1c36188d921970 HEAD@&#123;1&#125;: commit: feature-31c002dd HEAD@&#123;2&#125;: commit: feature-21c36188 HEAD@&#123;3&#125;: commit (initial): feature-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到误删的提交记录 feature-2 和 feature-3</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git reset --hard d921970<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）查看日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看历史版本git log# 查看简易历史版本git log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p8-zhu-cang">8、贮藏</span><a href="#p8-zhu-cang" class="header-anchor">#</a></h2><p>（1）当正在编写代码的时候，接到了一个紧急任务，需要切换分支去开发，此时未完成的代码怎么保存？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 将全部未保存的代码添加到贮藏区，若未填写描述信息，则以上一次 commit 的信息记录git stash [push [-m &lt;message&gt;]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）怎么查看贮藏区中保存的代码？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git stash list# 若存在贮藏的代码，则输出格式如下stash@&#123;0&#125;: On feature: 新功能开发未完成，先贮藏一下         # 添加了描述信息stash@&#123;1&#125;: WIP on master: 8e50dc3a feat：添加新功能xxx # 未填写描述信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）怎么取出贮藏的代码？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 恢复指定下标的贮藏代码，并删除对应的贮藏列表，index 默认为 0git stash pop [index]# 等价于下面两条命令git stash apply [index] &#x2F;&#x2F; 取出贮藏git stash drop [index] &#x2F;&#x2F; 删除贮藏列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）怎么清空贮藏列表？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git stash clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="san-yuan-cheng-cang-ku">三、远程仓库</span><a href="#san-yuan-cheng-cang-ku" class="header-anchor">#</a></h1><h2><span id="p1-github">1、GitHub</span><a href="#p1-github" class="header-anchor">#</a></h2><p><code>github.com/</code></p><ul><li><p>本地新建一个文件夹，打开命令行，进去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 初始化仓库git init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>里面添加点东西</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看状态git status# 添加到暂存区git add .# 提交到仓库git commit -m &quot;feat：第一次提交&quot;# 新建一个分区并切换过去git checkout -b keel# 查看分支git branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开 github 新建一个仓库</p><p><img src="/extra/Git/image-20201027184113208.png" alt="image-20201027184113208"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 关联一个远程仓库git remote add origin https:&#x2F;&#x2F;github.com&#x2F;...# 推送到远程指定分支，并创建关联git push -u origin keel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>VSCode 相关操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 关联一个远程仓库git remote add origin https:&#x2F;&#x2F;github.com&#x2F;...# 创建一个分支并切换git checkout -b keel# 推代码git push -u origin keel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>日常</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 正常推送git push# 正常拉取git pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>克隆之后的相关操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  # clone 只能获取别人的 master 分支  git clone    # git fetch origin 需要克隆的分支:自己克隆的分支git init  git remote...  git fetch origin xiongjian:keel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2><span id="p2-ma-yun">2、码云</span><a href="#p2-ma-yun" class="header-anchor">#</a></h2><p><code>gitee.com</code></p><h2><span id="p3-pei-zhi-ssh-mian-mi-deng-lu">3、配置SSH免密登录 <code>+</code></span><a href="#p3-pei-zhi-ssh-mian-mi-deng-lu" class="header-anchor">#</a></h2><ul><li><p>创建非对称加密对 <code>ssh-keygen</code></p></li><li><p>件默认存储在家目录（c:/用户/用户名/.ssh）的 .ssh 文件夹中。</p><ul><li>id_rsa 私钥</li><li>id_rsa.pub 公钥</li></ul></li><li><p>将公钥（.pub）文件内容配置到账号的秘钥中</p><p>首页 -&gt; 右上角头像-&gt; settings -&gt; SSH and GPG keys -&gt; new SSH Key</p><p>克隆代码时，选择 ssh 模式进行克隆 （地址 在仓库首页 绿色 克隆的位置 选择 use ssh）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone git@github.com&#x2F;xxxx&#x2F;xxxx.git <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆代码时的提醒，这里需要输入 yes</p></li></ul><h2><span id="p4-zi-dong-bao-cun-yong-hu-ming-he-mi-ma">4、自动保存用户名和密码</span><a href="#p4-zi-dong-bao-cun-yong-hu-ming-he-mi-ma" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global credential.helper store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="si-duo-ren-kai-fa-yu-xie-zuo">四、多人开发与协作</span><a href="#si-duo-ren-kai-fa-yu-xie-zuo" class="header-anchor">#</a></h1><p><a href="http://doc.lipeihua.vip:8800/#/./GitHub/02.%E5%A4%9A%E4%BA%BA%E5%90%88%E4%BD%9C">http://doc.lipeihua.vip:8800/#/./GitHub/02.多人合作</a></p><p><a href="http://doc.lipeihua.vip:8800/#/./GitHub/03.%E5%8D%8F%E4%BD%9C%E6%B5%81%E7%A8%8B">http://doc.lipeihua.vip:8800/#/./GitHub/03.协作流程</a></p><h1><span id="wu-xiang-guan-cha-jian">五、相关插件</span><a href="#wu-xiang-guan-cha-jian" class="header-anchor">#</a></h1><h1><span id="liu-za-xiang">六、杂项</span><a href="#liu-za-xiang" class="header-anchor">#</a></h1><p>查看代码统计</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log --format&#x3D;&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\t&quot;; git log --author&#x3D;&quot;$name&quot; --pretty&#x3D;tformat: --numstat | awk &#39;&#123; add +&#x3D; $1; subs +&#x3D; $2; loc +&#x3D; $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s &quot;, add, subs, loc &#125;&#39; -; done<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h1><ul><li><a href="http://doc.lipeihua.vip:8800/#/./GitHub/01.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">老李文档：Git</a></li><li><a href="https://juejin.im/post/6844904047598632967">掘金：Git 实战手册</a></li><li><a href="https://www.juejin.im/post/6872020320333594637">掘金：如何优雅的合并分支</a></li><li><a href="https://www.juejin.im/post/6874209597595975694">掘金：Git完全手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 报文</title>
      <link href="/network/http-message/"/>
      <url>/network/http-message/</url>
      
        <content type="html"><![CDATA[<h2><span id="p1">1</span><a href="#p1" class="header-anchor">#</a></h2><p>HTTP报文结构主要是报文首部、空行、报文主体。</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/2/385889e9a2ccbf5b9127c6a01faa0ee6?imageView2/0/w/1280/h/960/ignore-error/1" alt></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Date对象</title>
      <link href="/web/JS-Date/"/>
      <url>/web/JS-Date/</url>
      
        <content type="html"><![CDATA[<p><code>Date</code> 对象用于处理日期和时间。</p><h2><span id="pchang-yong-api">常用API</span><a href="#pchang-yong-api" class="header-anchor">#</a></h2><p>（1）获取时间戳，从 <code>Date</code> 对象获取时间戳</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取当前时间戳</span><span class="token keyword">let</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只精确到秒</span><span class="token keyword">let</span> timestamp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> timestamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token keyword">let</span> timestamp <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）时间戳转<code>Date</code>对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）获取年月周日时分秒</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> years <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回四位年份</span><span class="token keyword">let</span> mouth <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回月份（0-11）</span><span class="token keyword">let</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回周x（0-6）</span><span class="token keyword">let</span> date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回日期（1-31）</span><span class="token keyword">let</span> Hours <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">let</span> Minutes <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> Seconds <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> Milliseconds <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 毫秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="pkai-shi">开始</span><a href="#pkai-shi" class="header-anchor">#</a></h2><h3><span id="p1-chuang-jian-date-dui-xiang">1、创建 <code>Date</code> 对象</span><a href="#p1-chuang-jian-date-dui-xiang" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Date 对象会自动把当前日期和时间保存为初始值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/extra/Hexo/"/>
      <url>/extra/Hexo/</url>
      
        <content type="html"><![CDATA[<p>基于 Node.js 的博客框架。</p><h2><span id="pyi-kai-shi">一、开始</span><a href="#pyi-kai-shi" class="header-anchor">#</a></h2><h3><span id="p1-an-zhuang">1、安装</span><a href="#p1-an-zhuang" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p2-xin-jian-bo-ke">2、新建博客</span><a href="#p2-xin-jian-bo-ke" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init 你的博客名称cd 你的博客名称npm i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="p3-chang-yong-ming-ling">3、常用命令</span><a href="#p3-chang-yong-ming-ling" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 在本地服务器运行博客（打开 localhost:4000 查看）hexo s# 清除缓存hexo clean# 构建hexo g# 推送远程hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="per-pei-zhi-bo-ke">二、配置博客</span><a href="#per-pei-zhi-bo-ke" class="header-anchor">#</a></h2><p>博客根目录下的 <code>_config</code> 为 <strong>博客配置文件</strong>，主题目录下的 <code>_config</code> 为 <strong>主题配置文件</strong>。</p><h3><span id="p1-zhu-ti-pei-zhi">1、主题配置</span><a href="#p1-zhu-ti-pei-zhi" class="header-anchor">#</a></h3><p><a href="https://hexo.io/themes/">官方主题库</a></p><p>推荐 <code>NEXT</code> 主题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;nextcd themes&#x2F;nextnpm i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改 博客根目录下 <code>_config</code>  文件 里面的主题为 <code>next</code>。</p><h3><span id="p2-github-page-gitee-page">2、GitHub Page / Gitee Page</span><a href="#p2-github-page-gitee-page" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在博客配置文件 <code>_config.yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: git  repo: https&#x2F;&#x2F; .... .git   # 你的仓库地址  branch: master            # 分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把博客推送上去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="psan-xie-zuo">三、写作</span><a href="#psan-xie-zuo" class="header-anchor">#</a></h2><h3><span id="p1-bo-wen-pei-zhi-tou-yaml-front-matter">1、博文配置头  YAML Front Matter</span><a href="#p1-bo-wen-pei-zhi-tou-yaml-front-matter" class="header-anchor">#</a></h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">title: 这是标题date: 2020-01-01           # 创建时间updated: 2020-01-01        # 更新时间categories: 分类tags: 标签                  # 多标签 --&gt;  [标签一, 标签二]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-markdown-yu-fa-jian-rong-xing">2、Markdown 语法兼容性</span><a href="#p2-markdown-yu-fa-jian-rong-xing" class="header-anchor">#</a></h3><p>待更新。</p><h2><span id="psi-cha-jian">四、插件</span><a href="#psi-cha-jian" class="header-anchor">#</a></h2><p><a href="https://hexo.io/plugins/">官方插件库</a></p><h3><span id="p1-mu-lu-sheng-cheng">1、目录生成</span><a href="#p1-mu-lu-sheng-cheng" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i hexo-toc --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># _config.ymltoc:  maxDepth: 3   # 目录深度，最多生成三级目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-sou-suo">2、搜索</span><a href="#p2-sou-suo" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p3-dai-ma-gao-liang">3、代码高亮</span><a href="#p3-dai-ma-gao-liang" class="header-anchor">#</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i hexo-prism-plugin -S <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;     # 主题选项:  line_number: false    # default false  custom_css:  主题选项：coy,dark,funky,okaidia,solarizedlight,tomorrow,twilight,a11y-dark,atom-dark,base16-ateliersulphurpool.light,cb,darcula,dracula,duotone-dark,duotone-earth,duotone-forest,duotone-light,duotone-sea,duotone-space,ghcolors,hopscotch,material-dark,material-light,material-oceanic,pojoaque,shades-of-purple,synthwave84,vs,xonokai,default,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p4-ping-lun">4、评论</span><a href="#p4-ping-lun" class="header-anchor">#</a></h3><p>待更新。</p><h3><span id="p5-yue-du-liang-tong-ji">5、阅读量统计</span><a href="#p5-yue-du-liang-tong-ji" class="header-anchor">#</a></h3><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode：代码片段</title>
      <link href="/extra/VSCode-Snippet/"/>
      <url>/extra/VSCode-Snippet/</url>
      
        <content type="html"><![CDATA[<h2><span id="pyi-kai-shi">一、开始</span><a href="#pyi-kai-shi" class="header-anchor">#</a></h2><p>进入VSCode代码片段：</p><p><code>文件/首选项/用户片段</code></p><h2><span id="per-shi-li">二、示例</span><a href="#per-shi-li" class="header-anchor">#</a></h2><p>以创建 JS 代码片段为例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;这里写描述&quot;: &#123;    &quot;prefix&quot;: &quot;这里写触发关键字&quot;,    &quot;body&quot;: [&quot;行&quot;, &quot;行&quot;, &quot;$1表示第一个光标位置&quot;],  &#125;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="psan-wo-de-pian-duan-she-zhi-zhi-js">三、我的片段设置之JS</span><a href="#psan-wo-de-pian-duan-she-zhi-zhi-js" class="header-anchor">#</a></h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;输入到控制台&quot;: &#123;    &quot;prefix&quot;: &quot;clg&quot;,    &quot;body&quot;: [&quot;console.log($1)&quot;]  &#125;,  &quot;获取元素之getElementById&quot;: &#123;    &quot;prefix&quot;: &quot;dgi&quot;,    &quot;body&quot;: [&quot;document.getElementById(&#39;$1&#39;)&quot;]  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="psi-wo-de-pian-duan-she-zhi-zhi-jsx">四、我的片段设置之JSX</span><a href="#psi-wo-de-pian-duan-she-zhi-zhi-jsx" class="header-anchor">#</a></h2><p>在JS的基础上面：</p><h2><span id="pwu-wo-de-pian-duan-she-zhi-zhi-vue">五、我的片段设置之Vue</span><a href="#pwu-wo-de-pian-duan-she-zhi-zhi-vue" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> 使用手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
