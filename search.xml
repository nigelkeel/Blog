<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>720201：伊洛纳</title>
      <link href="/7202-yi-luo-na/01/"/>
      <url>/7202-yi-luo-na/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="yi-luo-na">伊洛纳</span><a href="#yi-luo-na" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 7202：伊洛纳 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>630101：人际关系</title>
      <link href="/6301-ren-ji-guan-xi/01/"/>
      <url>/6301-ren-ji-guan-xi/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="ren-ji-guan-xi">人际关系</span><a href="#ren-ji-guan-xi" class="header-anchor">#</a></h1><h2><span id="pwei-gui-lei">未归类</span><a href="#pwei-gui-lei" class="header-anchor">#</a></h2><ul><li>不要卷入八卦<br>卷入八卦就是因为一个假定的错误去诽谤他人。不要随意评论人或事，因为很多状况是你不了解的，就算了解也往往无法感同身受。你以为指出了别人的问题，其实恰恰暴露了自己的问题；你以为显示了自己的学识，其实往往忽略了自己的无知。凡事三思而后行，不论在现实生活中还是虚拟的网络上同样适用。</li><li>使用第二语言来探讨情感性和道德性的话题会使人们对这类话题产生距离感。</li><li>建立信任的关键是言行一致。</li><li>女人最在意的两件事分别为尊重与诚意。</li><li>哪些技能，经较短时间的学习，就可以给人的生活带来巨大帮助？<br>夸奖他人。</li><li>给足别人空间和时间。不要在冲突中追着对方要答案，对方往往没有你要的答案。</li><li>讲话语速不过快<br>有些人讲话过快，往往使他人无法理解你想要表达的东西。也让你重复讲一段话感到烦躁，所以语速正常让人能更好的理解你。</li><li>感情的基础是理解，理解的基础是表达。<br>当你装作无所谓时，别人会以为你真的无所谓。如果不能表达自己，就不要寄希望于别人的理解。感情的基础是理解，理解的基础是表达。不懂如何表达，就坦诚、诚恳的表达。告诉对方你觉得不合理，说出你的原因和想法。不用担心对方如何反应，该来的总会来，顺其自然。他们喜欢与否，是他们的事，但自己要先能喜欢自己。</li><li>别把焦虑写在脸上。焦虑是情绪，情绪会传染。</li><li>不要过度承诺，要量力而行。</li><li>你的时间和精力都是极其有限的，千万别高估自己。</li><li>保持对他人的耐心和尊重，即使是对你这辈子只会见一次的人。</li><li>倾听不同的观点，但辨证地接纳。君子和而不同。</li><li>用自己的心意去推想别人的心意。<br>指设身处地替别人着想。人们之间许多的矛盾争吵的根源恰恰在于不懂得换位思考。我们在赶公交时讨厌身边的人挤来挤去，舍友说梦话把自己吵醒，我们会不断抱怨他人，但我们自己做得怎么样呢？在与人相处的推己及人，许多的矛盾都会迎刃而解。你也会慢慢成为大家眼中明达宽厚之人。</li><li>我一直觉得与人相处的最好的方式，不是证明自己有多对，而是接受别人和你的不合。多给别人台阶下，不要处处为难人。</li><li>如何分辨“套路”和“真心”？<br>在追求的过程中，是否还保有自我。他赞美你，迎合你，小心翼翼的了解你的喜好，给你各种惊喜，但你却看不出他的好恶，不知道什么让他无聊，什么让他反感。只知道他包容你的一切，却不知道他的底线是什么；只知道他对你特别好，却说不出他是什么样的人。<br>这就是套路。了解和尊重，是恋爱关系的基础，那些一味迎合对方，紧紧隐藏自己的人，不是套路太多，就是情商较低。</li><li>仔细聆听别人的世界的模型，然后，在你答复他们之前，在你自己的脑海里建立起他们的模型。</li><li>任何感到紧张的场合，记住一句话：忘掉你自己。<br>把重心过多放在自己身上就会紧张，如果你更多关注的是别人，那紧张就消失了。</li><li>不要试图改变一个人。</li><li>简单来说，总是说别人好的人，往往自己也是个好人。</li><li>为什么我能和谁都聊得来呢？<br>因为我能在对方身上找到和自己身上相同素质的地方，产生一种“合流”之感，从彼此找到归属，再到接纳彼此不同。这种能力的根本就叫&quot;我乐意&quot;。我乐意将我的知识经验与人分享（关键自己的姿态是低姿态地分享，而非高姿态地灌输，后面会讲到。）也因我乐意去相信我脑海里的一些东西能通过语言交流和对方的一些东西迸发产生一些闪亮的暖流，产生出&quot;哇，ta好懂我！&quot;或者&quot;ta现在懂我了！&quot;这两种结果。</li><li>将心比心：</li><li>当你聊天之前是不是希望我们有个愉快的谈话？对方能懂自己？<br>是不是希望对方风趣幽默，就算再无聊的话也能分分钟让你捧腹大笑。<br>是不是想有什么埋怨就一吐为快，但碰到只会吐槽负能量的人就想逃？<br>只要好好做自己，温柔对待他人。</li><li>聊天四大常见错误：连续提问、不说自己、情感过度、随意评价。<br>针对聊天的四大常见错误，我又总结了四个对应原则：少问多说，多说自己、客观陈述事实、适当表达感受、谨慎评价对方。</li><li>不卑不亢。—— 聊天过程中，更重要的是气场和态度，而非答案。</li><li>很多人在说话时会不自觉地抖腿、眨眼、甩头发、皱眉、或者手上搞一些奇怪的动作，都会让别人看着很不舒服，这其实是一种不自信和心虚的潜在表现。同时，自己犯错是不容易自我察觉的，最好的方式就是问身边接触比较多的朋友，自己在聊天过程中有哪些多余的肢体动作，然后下意识地去改正。还有一点，在聊天话题深入的时候，要敢于和对方对视，无论是商业谈判亦或和异性约会，这能够表露出你对话题的重视以及对ta的真诚。</li><li>在所有的聊天中，要仔细聆听对方话语中的情感波动，你需要对里面蕴含的情感进行回应，而不是对内容进行回应。况且大部分的聊天，不一定有内容。</li><li>虚假同感偏差（false consensus bias）<br>认为别人“应该”会有与自己相同的感受和立场。不能理解每个人除中立旁观外，都只是简单地趋利避害和利己主义。例如在美国每个选民都觉得媒体偏向其他候选人，在意大利每个球迷都觉得裁判偏向对手球队，学渣觉得考试太难学霸认为考试不能测试出自己水平的天花板。</li><li>眼睛长时间地盯视对话者还有一种威胁的功能。警察在审讯犯罪者的时候通常对他怒目而视，这种目光对于拒不交代罪行的犯罪者来说是一种无声的压力和威胁。礼貌的做法是盯着对方的鼻子会感觉眼光柔和很多。</li><li>OkCupid分析了男人拍照的姿势和场景与他们收到的女性反馈比率的数据，得出男人应该这样拍照：最好的照片状态是不看着照相机而且不笑。不看着照相机，但是摆出调情的神态是最差劲的。男性照片中比较受欢迎的场景是和动物在一起，炫耀肌肉，正在做有意义的事，和朋友一起玩；不受欢迎的内容为户外，喝酒，旅游。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 6301：人际关系 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>340102：Anaconda</title>
      <link href="/3401-python-ji-chu/02-anaconda/"/>
      <url>/3401-python-ji-chu/02-anaconda/</url>
      
        <content type="html"><![CDATA[<h1><span id="anaconda">Anaconda</span><a href="#anaconda" class="header-anchor">#</a></h1><h2><span id="pyi-an-zhuang-he-pei-zhi-huan-jing-bian-liang">一、安装和配置环境变量</span><a href="#pyi-an-zhuang-he-pei-zhi-huan-jing-bian-liang" class="header-anchor">#</a></h2><p>1、参考：<a href="https://blog.csdn.net/ITLearnHall/article/details/81708148">Anaconda详细安装及使用教程</a><br>2、查看版本 <code>conda --version</code><br>3、升级工具包 <code>conda upgrade --all</code></p><h2><span id="per-guan-li-xu-ni-huan-jing">二、管理虚拟环境</span><a href="#per-guan-li-xu-ni-huan-jing" class="header-anchor">#</a></h2><h3><span id="p1-chuang-jian-xu-ni-huan-jing">1、创建虚拟环境</span><a href="#p1-chuang-jian-xu-ni-huan-jing" class="header-anchor">#</a></h3><p>创建一个名称为test的虚拟环境并指定 Python 版本为3.7。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda  create -n test python&#x3D;3.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p2-qie-huan-huan-jing">2、切换环境</span><a href="#p2-qie-huan-huan-jing" class="header-anchor">#</a></h3><p>切换到<code>base</code>环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到名叫<code>test</code>的环境。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">activate test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p3-xie-zai-huan-jing">3、卸载环境</span><a href="#p3-xie-zai-huan-jing" class="header-anchor">#</a></h3><p>卸载名叫<code>test</code>的环境。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove --name test --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p4-an-zhuang-he-xie-zai-di-san-fang-bao">4、安装和卸载第三方包</span><a href="#p4-an-zhuang-he-xie-zai-di-san-fang-bao" class="header-anchor">#</a></h3><p>安装第三方名叫<code>test</code>的包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda install test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载第三方名叫<code>test</code>的包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有包列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="psan-wen-ti">三、问题</span><a href="#psan-wen-ti" class="header-anchor">#</a></h2><p>1、<a href="https://www.cnblogs.com/dereen/p/ps_conda_env.html">解决Win10 PowerShell无法激活Anaconda环境的问题</a></p><p>2、更改PowerShell执行策略</p><pre class="line-numbers language-none"><code class="language-none">1. 以管理员身份运行PowerShell;2. 执行：get-ExecutionPolicy，显示Restricted，表示状态是禁止的;3. 执行：set-ExecutionPolicy RemoteSigned;4. 这时再执行get-ExecutionPolicy，就显示RemoteSigned;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 3401：Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340201：Python 库</title>
      <link href="/3402-python-ku/01/"/>
      <url>/3402-python-ku/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-ku">Python 库</span><a href="#python-ku" class="header-anchor">#</a></h1><p>分为系统库和第三方库。</p>]]></content>
      
      
      <categories>
          
          <category> 3402：Python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340202：Python sqlite</title>
      <link href="/3402-python-ku/07-sqlite3/"/>
      <url>/3402-python-ku/07-sqlite3/</url>
      
        <content type="html"><![CDATA[<h1><span id="sqlite">sqlite</span><a href="#sqlite" class="header-anchor">#</a></h1><p>with Python</p><p>1、引用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import sqlite3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、连接或者创建数据库，如果数据库不存在将在工作目录创建数据库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">conn &#x3D; sqlite3.connect(&#39;数据库名称.db&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、获取游标</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c &#x3D; conn.cursor()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、新建表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c.execute(&#39;&#39;&#39;       CREATE TABLE 表名(       ID INT PRIMARY KEY NOT NULL,       NAME TEXT NOT NULL,       AGE INT NOT NULL,       ADDRESS CHAR(50),       SALARY REAL       );&#39;&#39;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、插入操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c.execute(&quot;INSERT INTO 表名 (key1,key2) VALUES(value1,value2);&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、查询操作</p><p>7、更新操作</p><p>8、删除操作</p><p>9、提交事务</p><p>Python 的 SQLite 数据库 API 默认是开启了事务的，因此需提交事务；否则程序对数据库所做的修改（包括插入数据、修改数据、删除数据）不会生效。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">conn.commit()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、关闭游标和连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c.close()conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h1><p>&quot; <a href="https://www.runoob.com/sqlite/sqlite-python.html">https://www.runoob.com/sqlite/sqlite-python.html</a> &quot;<br>&quot; <a href="http://c.biancheng.net/view/2571.html">http://c.biancheng.net/view/2571.html</a> &quot;</p>]]></content>
      
      
      <categories>
          
          <category> 3402：Python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340202：Python colorama</title>
      <link href="/3402-python-ku/06-colorama/"/>
      <url>/3402-python-ku/06-colorama/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-colorama">Python colorama</span><a href="#python-colorama" class="header-anchor">#</a></h1><h1><span id="1-an-zhuang-mo-kuai-shell">1. 安装模块（shell）</span><a href="#1-an-zhuang-mo-kuai-shell" class="header-anchor">#</a></h1><p>pip install colorama</p><h1><span id="2-yin-yong-mo-kuai">2. 引用模块</span><a href="#2-yin-yong-mo-kuai" class="header-anchor">#</a></h1><p>from colorama import init, Fore, Back, Style</p><h1><span id="3-chu-shi-hua">3. 初始化</span><a href="#3-chu-shi-hua" class="header-anchor">#</a></h1><p>init(autoreset=True)</p><h1><span id="4-ke-yong-can-shu-lie-biao">4. 可用参数列表</span><a href="#4-ke-yong-can-shu-lie-biao" class="header-anchor">#</a></h1><p>#Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.<br>#Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.<br>#Style: DIM, NORMAL, BRIGHT, RESET_ALL</p><h1><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h1><h1><span id="1-https-www-cnblogs-com-xieshengsen-p-6932233-html">1. </span><a href="#1-https-www-cnblogs-com-xieshengsen-p-6932233-html" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 3402：Python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340202：Python time</title>
      <link href="/3402-python-ku/03-time/"/>
      <url>/3402-python-ku/03-time/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-time">Python Time</span><a href="#python-time" class="header-anchor">#</a></h1><p>import time</p><h1><span id="yan-shi-dan-wei-miao">延时,单位秒</span><a href="#yan-shi-dan-wei-miao" class="header-anchor">#</a></h1><p>time.sleep(t)</p>]]></content>
      
      
      <categories>
          
          <category> 3402：Python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340202：Python Random</title>
      <link href="/3402-python-ku/04-random/"/>
      <url>/3402-python-ku/04-random/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-random">Python Random</span><a href="#python-random" class="header-anchor">#</a></h1><blockquote><p>随机数库</p></blockquote><p>1、引入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import random<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、生成一个指定范围内的随机浮点数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">random.uniform(n1,n2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、生成一个指定范围内的整数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">random.randint(n1,n2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、从指定范围内，按指定的基数递增的集合中获取一个随机数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">random.randrange([start],stop[,step]) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、从序列中获取一个随机元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">random.choice(序列)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、打乱列表元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">random.shuffle(x[,random]) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、从序列中随机获取指定长度的片段</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">random.sample(n1,n2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 3402：Python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340202：Python os &amp; sys</title>
      <link href="/3402-python-ku/02-os-path/"/>
      <url>/3402-python-ku/02-os-path/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-os-amp-sys">Python os &amp; sys</span><a href="#python-os-amp-sys" class="header-anchor">#</a></h1><h1><span id="os">os</span><a href="#os" class="header-anchor">#</a></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">import os<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="psystem">system</span><a href="#psystem" class="header-anchor">#</a></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 清屏os.system(&#39;cls&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1><span id="sys">sys</span><a href="#sys" class="header-anchor">#</a></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">import sys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="pargv">argv</span><a href="#pargv" class="header-anchor">#</a></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    q &#x3D; &#39;&#39;    b &#x3D; &#39;&#39;    c &#x3D; &#39;&#39;    if len(sys.argv) &#x3D;&#x3D; 4:        a &#x3D; sys.argv[1]        b &#x3D; sys.argv[2]        c &#x3D; sys.argv[3]    print(a,b,c)# 输入 python test1.py 1 2 3# 输出 1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 3402：Python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340202：Python Calendar</title>
      <link href="/3402-python-ku/05-calendar/"/>
      <url>/3402-python-ku/05-calendar/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-calendar">Python Calendar</span><a href="#python-calendar" class="header-anchor">#</a></h1><p>import calendar</p><h1><span id="xian-shi-ri-li">显示日历</span><a href="#xian-shi-ri-li" class="header-anchor">#</a></h1><p>print(calendar.month(2020,10))</p>]]></content>
      
      
      <categories>
          
          <category> 3402：Python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>340101：Python 基础</title>
      <link href="/3401-python-ji-chu/01/"/>
      <url>/3401-python-ji-chu/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="python-ji-chu">Python 基础</span><a href="#python-ji-chu" class="header-anchor">#</a></h1><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 3401：Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>230503：fetch</title>
      <link href="/2305-wang-luo-qing-qiu/03-fetch/"/>
      <url>/2305-wang-luo-qing-qiu/03-fetch/</url>
      
        <content type="html"><![CDATA[<h1><span id="fetch">fetch</span><a href="#fetch" class="header-anchor">#</a></h1><p><code>fetch</code> 是新型 ajax 请求方式，返回的是一个 Promise 对象。<br>兼容性不好。</p><p>1、get</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/1"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、post</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// application/json</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token comment">// 默认是 get</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"绒布球之剑"</span><span class="token punctuation">,</span>    attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      atk<span class="token operator">:</span> <span class="token number">999</span><span class="token punctuation">,</span>      parry<span class="token operator">:</span> <span class="token number">999</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// application/x-www-form-urlencoded</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token string">"name=大绒布球之剑&amp;text=绒布球之剑"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、delete</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"delete"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、put</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"put"</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"绒布球之大剑"</span><span class="token punctuation">,</span>    attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      atk<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>      parry<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">999</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、patch</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"patch"</span><span class="token punctuation">,</span>  headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"绒布球快乐剑"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2504：网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ✔ </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>250301：Vuex</title>
      <link href="/2503-vue-zu-jian-tong-xin/01-vuex/"/>
      <url>/2503-vue-zu-jian-tong-xin/01-vuex/</url>
      
        <content type="html"><![CDATA[<h1><span id="vuex">Vuex</span><a href="#vuex" class="header-anchor">#</a></h1><p>管理多组件共享的状态数据。<br>核心概念：</p><ul><li><code>store</code></li><li><code>state</code><br>用于存储多组件共享状态</li><li><code>mutation</code><br>函数<br>直接修改 <code>state</code> 的数据<br>必须写同步代码（为什么？ 官方代码规范 / Vue devTool 记录触发过的 mutation，如果写入异步代码，会导致 mutation 的执行顺序和更新顺序不统一，调试工具就报废了）</li><li><code>action</code><br>函数<br>通过 <code>mutation</code> 来间接修改状态数据。<br>可以是异步函数</li><li><code>getter</code><br>函数（用的是它的返回值）<br>相当于计算属性（当需要一个数据，但是没有，然而这个数据和 data 或者 props 相关，最终可以通过他们获得）</li><li><code>dispatch</code><br>用于分发 action</li><li><code>commit</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2503：Vue组件通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210209：CSS BFC</title>
      <link href="/2102-css/09-bfc/"/>
      <url>/2102-css/09-bfc/</url>
      
        <content type="html"><![CDATA[<h1><span id="css-bfc">CSS BFC</span><a href="#css-bfc" class="header-anchor">#</a></h1><p>BFC，块级格式化上下文。 是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。</p><h2><span id="p1-chuang-jian-bfc">1、创建 BFC</span><a href="#p1-chuang-jian-bfc" class="header-anchor">#</a></h2><ul><li><strong>根元素</strong></li><li><strong>浮动</strong> <code>float: right / left</code></li><li><strong>定位（仅 absolute 和 fixed）</strong></li><li><strong>行内块元素和表格元素</strong> <code>display: inline-block / table</code></li><li><strong>overflow 的值不为 visible</strong></li></ul><h2><span id="p2-fan-wei">2、范围</span><a href="#p2-fan-wei" class="header-anchor">#</a></h2><blockquote><p>A block formatting context contains everything inside of the element creating it, that is not also inside a descendant element that creates a new block formatting context.</p></blockquote><p>直译过来就是, BFC 包含创建它的元素的所有子元素, 但不包括创建了新 BFC 的子元素的内部元素。简单来说，子元素如果又创建了一个新的 BFC，那么它里面的内容就不属于上一个 BFC 了，这体现了 BFC 隔离 的思想。<br>也就是所说，<strong>一个元素不能同时存在于两个 BFC 中</strong>。</p><h2><span id="p3-gui-ze">3、规则</span><a href="#p3-gui-ze" class="header-anchor">#</a></h2><p>BFC 除了会创建一个隔离的空间外，还具有以下特性：</p><ul><li>BFC 内部的块级盒会在垂直方向上一个接一个排列。</li><li>同一 BFC 下的相邻块级元素可能发生外边距折叠，创建新的 BFC 可以避免外边距折叠。（解决塌陷）</li><li>浮动盒的区域不会和 BFC 重叠 （BFC 的区域不会与 float 的元素区域重叠）</li><li>计算 BFC 的高度时，浮动元素也会参与计算</li><li>文字层不会被浮动层覆盖，环绕于周围</li></ul><h2><span id="p4-ying-yong">4、应用</span><a href="#p4-ying-yong" class="header-anchor">#</a></h2><ul><li><p>自适应多栏布局<br>中间栏创建 BFC，左右栏宽度固定后浮动。由于盒子的 margin box 的左边和包含块 border box 的左边相接触，同时浮动盒的区域不会和 BFC 重叠，所以中间栏的宽度会自适应。</p></li><li><p>防止外边距折叠<br>创建新的 BFC ，让相邻的块级盒位于不同 BFC 下可以防止外边距折叠</p></li><li><p>清除浮动<br>BFC 内部的浮动元素也会参与高度计算，可以清除 BFC 内部的浮动</p><p>清除浮动的原理是两个<code>div</code>都位于同一个 BFC 区域之中</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2102：CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>230502：Axios</title>
      <link href="/2305-wang-luo-qing-qiu/02-axios/"/>
      <url>/2305-wang-luo-qing-qiu/02-axios/</url>
      
        <content type="html"><![CDATA[<h1><span id="axios">Axios</span><a href="#axios" class="header-anchor">#</a></h1><p><strong>axios</strong> 是目前最受欢迎的 ajax 封装库， 基于 Promise。</p><p><a href="http://www.axios-js.com/zh-cn">文档</a></p><h2><span id="pyi-kai-shi">一、开始</span><a href="#pyi-kai-shi" class="header-anchor">#</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="per-ji-ben-shi-yong">二、基本使用</span><a href="#per-ji-ben-shi-yong" class="header-anchor">#</a></h2><p><code>axios</code> 相当于 <code>axios.request</code> ，返回的是一个 Promise 对象</p><h3><span id="p1-get">1、GET</span><a href="#p1-get" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p2-post">2、POST</span><a href="#p2-post" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// application/json</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">"破剑"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// application/x-www-form-urlencoded</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span> <span class="token string">"name=破晓快乐剑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>  url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1/sword"</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"破铁剑"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p3-delete">3、DELETE</span><a href="#p3-delete" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"delete"</span><span class="token punctuation">,</span>  url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p4-put">4、PUT</span><a href="#p4-put" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"七色破晓剑"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"put"</span><span class="token punctuation">,</span>  url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"七色破晓剑"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p5-patch">5、PATCH</span><a href="#p5-patch" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"轩辕剑"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  method<span class="token operator">:</span> <span class="token string">"patch"</span><span class="token punctuation">,</span>  url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"轩辕剑"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p6-lian-zhui-xie-fa">6、连缀写法</span><a href="#p6-lian-zhui-xie-fa" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="p7-await-xie-fa">7、await 写法</span><a href="#p7-await-xie-fa" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/sword/9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="p8-quan-ju-she-zhi">8、全局设置</span><a href="#p8-quan-ju-she-zhi" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 指定根路径</span>axios<span class="token punctuation">.</span>default<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"http://127.0.0.1"</span><span class="token punctuation">;</span><span class="token comment">// 指定超时时间（毫秒）</span>axios<span class="token punctuation">.</span>default<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ajax <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  baseURL<span class="token operator">:</span> <span class="token string">"/api"</span><span class="token punctuation">,</span> <span class="token comment">// 设置根路径</span>  timeOut<span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token comment">// 设置超时时间</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="plan-jie-qi-chang-yong">拦截器 <code>常用</code></span><a href="#plan-jie-qi-chang-yong" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 请求拦截</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  config<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"url"</span> <span class="token operator">+</span> config<span class="token punctuation">.</span>url<span class="token punctuation">;</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 响应拦截</span>axios<span class="token punctuation">.</span>intercertors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="psi-shou-xie-shi-xian-er-ci-feng-zhuang">四、手写实现 / 二次封装+</span><a href="#psi-shou-xie-shi-xian-er-ci-feng-zhuang" class="header-anchor">#</a></h2><p>待更新。</p><p>[TOC]</p>]]></content>
      
      
      <categories>
          
          <category> 2504：网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210502：媒体查询</title>
      <link href="/2105-xiang-ying-shi-bu-ju/02-mei-ti-cha-xun/"/>
      <url>/2105-xiang-ying-shi-bu-ju/02-mei-ti-cha-xun/</url>
      
        <content type="html"><![CDATA[<h1><span id="mei-ti-cha-xun">媒体查询</span><a href="#mei-ti-cha-xun" class="header-anchor">#</a></h1><p>媒体查询（media query)，CSS2 推出，CSS3 优化。</p><p><code>navigator.userAgent</code> 获取浏览器的识别码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="pmei-ti-lei-xing">媒体类型</span><a href="#pmei-ti-lei-xing" class="header-anchor">#</a></h2><p><code>all</code> 所有设备</p><p><code>screen</code> 屏幕，默认值</p><p><code>tv</code> 电视</p><h2><span id="pshe-bei-te-zheng">设备特征</span><a href="#pshe-bei-te-zheng" class="header-anchor">#</a></h2><p><code>width</code> <code>height</code> <code>min/max-width/height</code></p><p><code>orientation</code> 横屏竖屏判断</p><p><code>resolution</code> 分辨率</p><p><code>devicePixelRatio</code> 像素比</p><p>检测横屏、竖屏</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (orientation: portrait)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen and (orientation: landscape)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="pluo-ji-tiao-jian">逻辑条件</span><a href="#pluo-ji-tiao-jian" class="header-anchor">#</a></h2><ul><li><code>and</code> 与</li><li><code>not </code> 是对后边所有逻辑语句的否定，not 只能写第一位</li><li><code>,</code> 或</li><li><code>only</code></li></ul><h2><span id="pshe-zhi-duan-dian">设置断点</span><a href="#pshe-zhi-duan-dian" class="header-anchor">#</a></h2><h2><span id="pc3-mei-ti-cha-xun">C3 媒体查询</span><a href="#pc3-mei-ti-cha-xun" class="header-anchor">#</a></h2><p><code>@media</code></p>]]></content>
      
      
      <categories>
          
          <category> 2105：响应式布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210501：响应式布局</title>
      <link href="/2105-xiang-ying-shi-bu-ju/01/"/>
      <url>/2105-xiang-ying-shi-bu-ju/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="xiang-ying-shi-bu-ju">响应式布局</span><a href="#xiang-ying-shi-bu-ju" class="header-anchor">#</a></h1><p>响应式布局是在 2010 年提出的一个概念，简而言之，<strong>就是一个网站能够兼容多个终端，而不是为每个终端做一个特定的版本</strong>。用户会使用不同的终端，由于屏幕分辨率不同，想要用户体验更好，就有必要让你的网页兼容多个终端。响应式布局设计可以让一个网站适配多种设备和多个屏幕，可以让网站的布局和功能随用户的使用环境（屏幕大小，输入方式，设备/浏览器能力）而变化。</p><p>三个特征</p><ul><li>媒体查询：检查设备在渲染我们作品时的物理特性</li><li>流动布局</li><li>灵活的视觉效果</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2105：响应式布局 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>220201：ES 面向对象</title>
      <link href="/2202-es-gao-ji/01-mian-xiang-dui-xiang/"/>
      <url>/2202-es-gao-ji/01-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-mian-xiang-dui-xiang">ES 面向对象</span><a href="#es-mian-xiang-dui-xiang" class="header-anchor">#</a></h1><p>面向对象和面向过程是两种不同的编程思想和方法。<br>面向过程是以过程为中心，就像流水线一样设计程序的思想。面向对象是以对象为中心的编程思想。更符合人类的思维习惯。<br>在面向对象的概念中，<strong>类</strong>是一类相似事物的统称，对象是类的实例化，类是对象的模版。（JS 中没有具体类的概念，ES6 引入的类实际上是函数。）<br>面向对象的三个基本特性: <strong>封装、继承、多态</strong>。<br><strong>对象（Object）</strong> 可以是一个变量，一个函数，一种数据结构。在 JS 中，一切皆为对象。JS 允许自定义对象，从狭义的概念来分析，对象是最基本的数据类型，是复合型的结构、引用型的数据，它是无序数据集合。对象中每个成员被称为<strong>属性</strong>。对象是无序的键值对，数组是有序的键值对，函数是一种可执行的特殊对象。</p><p><strong>实例对象</strong>与<strong>函数对象</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 2202：ES高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>230504：跨域解决方案</title>
      <link href="/2305-wang-luo-qing-qiu/04-kua-yu-jie-jue-fang-an/"/>
      <url>/2305-wang-luo-qing-qiu/04-kua-yu-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h1><span id="kua-yu-jie-jue-fang-an">跨域解决方案</span><a href="#kua-yu-jie-jue-fang-an" class="header-anchor">#</a></h1><h2><span id="pyi-tong-yuan-ce-lue">一、同源策略</span><a href="#pyi-tong-yuan-ce-lue" class="header-anchor">#</a></h2><p>Same-Origin Policy，<a href><strong>同源策略</strong></a> 最早由 Netscape 公司提出，是浏览器的一种安全策略。该策略表示<strong>协议</strong>、<strong>域名</strong>、<strong>端口号</strong>必须完全相同。</p><p>违背同源策略就是<a href><strong>跨域</strong></a>，主要是针对 ajax 而言。</p><h2><span id="per-jsonp">二、JSONP</span><a href="#per-jsonp" class="header-anchor">#</a></h2><p>JSON with Padding，<strong>JSONP</strong> 是一个非官方的跨域解决方案，只支持 get 请求，而且需要服务器的配合。</p><h3><span id="p1-gong-zuo-yuan-li">1、工作原理</span><a href="#p1-gong-zuo-yuan-li" class="header-anchor">#</a></h3><p>在网页有一些标签天生具有跨域能力，比如 <code>img</code> <code>link</code> <code>iframe</code> <code>script</code>。JSONP 就是利用 <code>script</code> 标签的跨域能力来发送请求的。</p><h3><span id="p2-ying-yong-shi-li">2、应用示例</span><a href="#p2-ying-yong-shi-li" class="header-anchor">#</a></h3><p>客户端</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 这是一个事件触发</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 新建一个 script 标签</span>      script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置需要跨域的URL</span>      script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://.../test?a=1&amp;cb=jp"</span><span class="token punctuation">;</span>      <span class="token comment">// 插入到页面</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 回调函数</span>  <span class="token keyword">function</span> <span class="token function">jp</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 这边要移除script 标签</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 后续操作</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="psan-cors">三、CORS</span><a href="#psan-cors" class="header-anchor">#</a></h2><p>Cross-Origin Resource Sharing，CORS，<strong>跨域资源共享</strong>是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 GET 和 POST 请求。是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 服务端</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 设置白名单</span>    <span class="token keyword">const</span> arrOrigin <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"http://xxxxx"</span><span class="token punctuation">,</span>        <span class="token string">"xxxx"</span>    <span class="token punctuation">]</span>    <span class="token comment">// 如果访问的URL在白名单中</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arrOrigin<span class="token punctuation">.</span><span class="token function">oncludes</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>header<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 允许跨域</span>        res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>header<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 允许携带内容</span>        res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"content-type"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="psi-fu-wu-qi-dai-li">四、服务器代理</span><a href="#psi-fu-wu-qi-dai-li" class="header-anchor">#</a></h2><p>服务器和服务器之间没有同源策略限制，所以可以通过代理的方式进行跨域。</p>]]></content>
      
      
      <categories>
          
          <category> 2504：网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210402：Stylus</title>
      <link href="/2104-css/02-stylus/"/>
      <url>/2104-css/02-stylus/</url>
      
        <content type="html"><![CDATA[<h1><span id="stylus">Stylus</span><a href="#stylus" class="header-anchor">#</a></h1><p>向下兼容 <code>Less</code><br>可以省略括号和分号，靠缩进区分层级</p>]]></content>
      
      
      <categories>
          
          <category> 2104：CSS+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210401：Less</title>
      <link href="/2104-css/01-less/"/>
      <url>/2104-css/01-less/</url>
      
        <content type="html"><![CDATA[<h1><span id="less">LESS</span><a href="#less" class="header-anchor">#</a></h1><p>less 是一种动态样式语言，属于 CSS 预处理器，扩展了 CSS 语言，增加了变量、混合、函数等特性，使 CSS 更易维护和扩展。LESS 既可以在客户端浏览器上运行，也能借助 node.js 在服务器端运行。</p><blockquote><p>CSS 自诞生以来，基本语法和核心机制一直没有本质上的变化，它的发展几乎全是表现力层面上的提升。最开始 CSS 在网页中的作用只是辅助性的装饰，轻便易学是最大的需求；然而如今网站的复杂度已经不可同日而语，原生 CSS 已经让开发者力不从心。当一门语言的能力不足而用户的运行环境又不支持其它选择的时候，这门语言就会沦为 “编译目标” 语言。开发者将选择另一门更高级的语言来进行开发，然后编译到底层语言以便实际运行。于是，在前端领域，CSS 预处理器应运而生。而 CSS 这门古老的语言以另一种方式 “重新适应” 了网页开发的需求。</p></blockquote><h2><span id="p1-an-zhuang">1、安装</span><a href="#p1-an-zhuang" class="header-anchor">#</a></h2><p><a href="http://lesscss.cn/">中文</a> | <a href="http://lesscss.org/">英文</a> | <strong><a href="http://www.lesscss.net/">源码</a></strong></p><ol><li>安装 Node.JS</li><li>通过命令行程序，<code>node -v</code> 和 <code>npm -v</code> 检查是否安装成功。</li><li>使用<code>npm i -g less</code> 进行全局安装 less, 并输入 <code>lessc -V</code> 检查版本</li></ol><h2><span id="p2-te-xing">2、特性</span><a href="#p2-te-xing" class="header-anchor">#</a></h2><ul><li>动态样式 CSS 是非程式式语言，需要书写大量没有逻辑的代码，不方便维护和扩展、复用。</li><li>预处理器 生成 CSS 前某一语法的处理程序。</li></ul><h2><span id="p3-shi-yong">3、使用</span><a href="#p3-shi-yong" class="header-anchor">#</a></h2><p>(1) <code>style</code>标签类型改成<code>less</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet/less"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"styles.less"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还需要一个编译相关的 js 文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdnjs.cloudflare.com/ajax/libs/less.js/3.11.1/less.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2) 在命令行编译 less 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lessc styles.less styles.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(3) 通过 VSCode 的<code>Easy LESS</code>插件，在文件夹新建 less 文件，保存，即可在当前文件夹编译出相应的 css 文件。</p><h2><span id="per-yu-fa">二、语法</span><a href="#per-yu-fa" class="header-anchor">#</a></h2><h2><span id="p1-zhu-shi">1、注释</span><a href="#p1-zhu-shi" class="header-anchor">#</a></h2><p><code>//注释</code> 和 <code>/*注释*/</code></p><p>后者可以注释到 CSS 文件中。</p><h2><span id="p2-bian-liang">2、变量</span><a href="#p2-bian-liang" class="header-anchor">#</a></h2><p>LESS 允许我们定义一些变量来管理 CSS，变量需以<code>@</code>开头。</p><pre class="line-numbers language-less" data-language="less"><code class="language-less">&#x2F;&#x2F; 定义@test: 10px;&#x2F;&#x2F; 使用width: @test;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意作用域。</p><p>作为选择器名字、声明一个属性的名称 <code>@&#123;a&#125;</code></p><h2><span id="p3-qian-tao-gui-ze">3、嵌套规则</span><a href="#p3-qian-tao-gui-ze" class="header-anchor">#</a></h2><p><code>&amp;:</code> 父级引用</p><h2><span id="p4-yun-suan">4、运算</span><a href="#p4-yun-suan" class="header-anchor">#</a></h2><h2><span id="p5-hun-he">5、混合</span><a href="#p5-hun-he" class="header-anchor">#</a></h2><p>类似函数。</p><h2><span id="p6-mo-shi-pi-pei-he-shou-wei">6、模式匹配和守卫</span><a href="#p6-mo-shi-pi-pei-he-shou-wei" class="header-anchor">#</a></h2><p>重载，根据参数的个数来选择混合。</p><h2><span id="p7-zi-fu-chuan-cha-zhi">7、字符串插值</span><a href="#p7-zi-fu-chuan-cha-zhi" class="header-anchor">#</a></h2><h2><span id="p8-han-shu">8、函数</span><a href="#p8-han-shu" class="header-anchor">#</a></h2><h2><span id="p9-wen-jian-dao-ru">9、文件导入</span><a href="#p9-wen-jian-dao-ru" class="header-anchor">#</a></h2><h2><span id="p10-zhuan-yi">10、转义</span><a href="#p10-zhuan-yi" class="header-anchor">#</a></h2><p>有时候，当需要引入无效的 CSS 语法或 Less 不能识别的字符，就需要使用转义字符。此时，就可以在字符串前面加一个<code>~</code>，并将需要转义的字符串放在<code>&quot; &quot;</code>中。</p>]]></content>
      
      
      <categories>
          
          <category> 2104：CSS+ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210204：CSS 样式</title>
      <link href="/2102-css/04-yang-shi/"/>
      <url>/2102-css/04-yang-shi/</url>
      
        <content type="html"><![CDATA[<h1><span id="css-yang-shi">CSS 样式</span><a href="#css-yang-shi" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 2102：CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210203：CSS 盒模型</title>
      <link href="/2102-css/03-he-mo-xing/"/>
      <url>/2102-css/03-he-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1><span id="css-he-mo-xing">CSS 盒模型</span><a href="#css-he-mo-xing" class="header-anchor">#</a></h1><p>盒模型<br>box-sizing 盒子模式<br>content-box 标准盒模型<br>border-box 怪异盒模型（IE盒模型）<br>content 内容<br>width / min-width / max-width<br>height / min-height / max-height<br>padding 内边距<br>border 边框<br>border-radius 圆角边框<br>border-shadow 边框阴影<br>border-image 边框填充图片<br>margin 外边距<br>margin auto<br>负margin<br>margin 塌陷问题<br>原因： 防止父级和其他元素之间的间隙过大，当第一个和最后一个子元素的margn塌陷给父级以后 父级就可以和兄弟元素在垂直方向上进行叠加<br>避免：1. 给父级设置一个边框  边框的宽度不能为0，防止影响视觉，可以设置透明（transparent）颜色<br>2.开启BFC（块级格式化上下文）很多种方法，后边讲解:overflow：hidden 可以开启</p><p>outline 轮廓<br>BFC 块级格式化上下文<br>块级格式化上下文 BlockFormattingContexts<br>创建条件<br>根元素<br>浮动<br>overflow不为visible<br>display<br>绝对定位或者固定定位</p>]]></content>
      
      
      <categories>
          
          <category> 2102：CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210105：HTML 多媒体</title>
      <link href="/2101-html/05-duo-mei-ti/"/>
      <url>/2101-html/05-duo-mei-ti/</url>
      
        <content type="html"><![CDATA[<h1><span id="html-duo-mei-ti">HTML 多媒体</span><a href="#html-duo-mei-ti" class="header-anchor">#</a></h1><p>多媒体<br>图片<br>格式<br>jpg<br>png<br>gif<br>webp<br>音频<br>格式<br>mp3<br>webm<br><code>&lt;audio&gt;</code><br>视频<br>格式<br><code>&lt;video&gt;</code><br>src 引入的资源路径<br>width / height<br>controls 显示控制和进度条<br>autoplay 自动播放<br>muted 静音（想要自动播放生效，需要开启静音）<br>loop 循环<br>poster 视频播放前的一帧，图片路径<br>preload 加载设置<br>none：不提前加载视频 metadata：抓取元数据 auto：预加载<br>音视频兼容性处理</p>]]></content>
      
      
      <categories>
          
          <category> 2101：HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210104：H5</title>
      <link href="/2101-html/04-h5/"/>
      <url>/2101-html/04-h5/</url>
      
        <content type="html"><![CDATA[<h1><span id="html-5">HTML 5</span><a href="#html-5" class="header-anchor">#</a></h1><p>新增标签<br>header<br>footer<br>表单增强<br>画布 Canvas<br>地理 Geolocation<br>音视频<br>自定义属性<br>本地存储 localStorage/seesionStorege<br>拖拽释放<br>WebWorker<br>WebSocket</p>]]></content>
      
      
      <categories>
          
          <category> 2101：HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210103：HTML 表单</title>
      <link href="/2101-html/03-biao-dan/"/>
      <url>/2101-html/03-biao-dan/</url>
      
        <content type="html"><![CDATA[<h1><span id="html-biao-dan">HTML 表单</span><a href="#html-biao-dan" class="header-anchor">#</a></h1><p>form<br>action<br>method<br>表单的提交<br>input<br>类型 type<br>text | password | radio | checkbox<br>button | submit | reset<br>file | image | reset<br>email | url | tel | number<br>date | time | search<br>属性<br>autocomplete            自动完成 off<br>autofocus 自动获取焦点<br>placeholder<br>multiple<br>button</p><h2><span id="plabel">label</span><a href="#plabel" class="header-anchor">#</a></h2><p>定义表单控制件的关系</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2101：HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210102：HTML 标签</title>
      <link href="/2101-html/02-biao-qian/"/>
      <url>/2101-html/02-biao-qian/</url>
      
        <content type="html"><![CDATA[<h1><span id="html-biao-qian">HTML 标签</span><a href="#html-biao-qian" class="header-anchor">#</a></h1><h2><span id="pyi-gai-shu">一、概述</span><a href="#pyi-gai-shu" class="header-anchor">#</a></h2><p>标签，又称为元素。</p><h3><span id="p1-biao-qian-de-guan-xi">1、标签的关系</span><a href="#p1-biao-qian-de-guan-xi" class="header-anchor">#</a></h3><p>兄弟关系<br>父子关系</p><h3><span id="p2-biao-qian-de-fen-lei">2、标签的分类</span><a href="#p2-biao-qian-de-fen-lei" class="header-anchor">#</a></h3><p>（1）块标签 <code>block</code></p><ul><li>代表标签: <code>div</code></li><li>默认的宽度是占据父标签全部内容，即 <code>width: 100%</code></li><li>默认的高度由内容决定</li><li>设宽高、边距、边框没有限制</li><li>独占一行</li><li>允许嵌套块元素和行元素（<code>p</code>/<code>h</code>标签除外）</li></ul><p>（2）行内标签 <code>inline</code></p><ul><li>代表标签: <code>span</code></li><li>默认的宽高由内容决定。</li><li>内容过多时允许换行并断开（一般都是用于处理文字样式）。</li><li>设置宽高无效。上下边距、边框无法设置。</li><li>共用一行：在一行中如有剩余空间，允许同其他行内/行内块标签共用。</li><li>某些动画样式不能添加和使用。</li></ul><p>（3）行内块标签 <code>inline-block</code></p><ul><li>代表标签: <code>img</code>、<code>button</code>、<code>input</code></li><li>默认的宽高由内容决定。</li><li>内容过多时不会断开。</li><li>可以设置宽高。</li><li>在一行中如有剩余空间，允许同其他 行内/行内块 标签公用一行。</li><li>行内块和内行标签会有行高的概念。</li><li>行内块受父元素的 <code>line-height</code> 以及自身的 <code>vertical-align</code> 影响。</li></ul><p>将非块级元素转换成块级元素的方法</p><ul><li><code>display: block</code></li><li><code>float: left/right</code></li><li><code>position: absolute/fixed</code></li><li>父级元素使用 <code>display:flex</code></li></ul><h2><span id="p3-yu-yi-hua-biao-qian">3、语义化标签</span><a href="#p3-yu-yi-hua-biao-qian" class="header-anchor">#</a></h2><p>优点：</p><ul><li>语义化标签更具有可读性，便于团队的开发和维护</li><li>没有 CSS 的情况下，网页也能很好的呈现出内容结构和代码结构</li><li>关于SEO，搜索引擎更能理解到网页中各部分之间的关系，更准确更快速搜索信息</li></ul><p>布局的三个发展阶段：</p><ul><li>开荒时期：前端的代码主要是后台写的，使用 <code>table</code> 来布局</li><li>美工时期：有专门的人来写前端代码了，主要布局方式是 <code>DIV+CSS</code></li><li>现在：使用具有语义的标签，可以表达正确的内容，也利用开发和维护。</li></ul><h2><span id="per-chang-yong-biao-qian">二、常用标签</span><a href="#per-chang-yong-biao-qian" class="header-anchor">#</a></h2><h3><span id="p1-div-fen-kuai">1、<code>div</code> 分块</span><a href="#p1-div-fen-kuai" class="header-anchor">#</a></h3><p>用于分块。<br>分块原则：先行后列。</p><h3><span id="p2-biao-ti-duan-luo-huan-xing">2、标题、段落、换行</span><a href="#p2-biao-ti-duan-luo-huan-xing" class="header-anchor">#</a></h3><p>（1）标题：<code>h1</code> <code>h2</code> <code>h3</code> …<br>最多允许6级标题。<br>依次使用，避免跳过某级标题使用。<br>同一个网页最多使用一次 <code>h1</code> 标签。</p><p>（2）段落：<code>p</code><br>（3）换行：<code>br</code><br>单纯的换行，被称为软换行。</p><h3><span id="p3-lie-biao">3、列表</span><a href="#p3-lie-biao" class="header-anchor">#</a></h3><p>（1）无序列表：<code>ul</code>-<code>li</code><br>常用于重复结构的大块内容布局。<br>注：<br>1、<code>ol</code>/<code>ul</code>只能嵌套 <code>li</code>。<br>2、不建议在<code>ul</code>和<code>li</code>嵌套的中间，书写其他元素。</p><p>（2）有序列表：<code>ol</code>-<code>li</code><br>用的少。</p><p>（3）自定义列表<br><code>dl</code>-<code>dt</code>-<code>dd</code>，组合标签。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p4-biao-ge">4、表格</span><a href="#p4-biao-ge" class="header-anchor">#</a></h3><h3><span id="p5-span-e-wai-jie-gou">5、<code>span</code> 额外结构</span><a href="#p5-span-e-wai-jie-gou" class="header-anchor">#</a></h3><h3><span id="p6-mao-lian-jie">6、锚链接</span><a href="#p6-mao-lian-jie" class="header-anchor">#</a></h3><h3><span id="p7-tu-pian">7、图片</span><a href="#p7-tu-pian" class="header-anchor">#</a></h3><p>inline 行标签<br>span 额外结构<br>i 小图标<br><code>&lt;a&gt;</code> 链接<br>属性<br>href 跳转地址<br>title 悬浮提示<br>target 跳转设置<br>_self<br>_blank 新标签页打开<br>download<br>tel<br>sms<br>mailto<br>路径<br>绝对路径<br>相对路径<br>./ ：代表文件所在的目录（可以省略不写）<br>…/ ：代表文件所在的父级目录<br>…/…/ ：代表文件所在的父级目录的父级目录<br>/ ：代表文件所在的根目录,可以理解成项目内部的绝对路径。<br>网络路径<br>锚链接<br>#id<br>相关伪类<br>link：当有链接属性时<br>visited：当连接被访问过以后<br>hover：当连接被鼠标悬浮的时候<br>active：当连接在激活状态的时候<br>inline-block 行内块<br>img 图片<br>属性<br>src: 设置路径<br>alt: 设置替代文本<br>title: 鼠标悬浮提示文本<br>width / height<br>表格<br>属性<br>src &amp; href<br>href：文档之间的跳转<br>src：资源的引用</p>]]></content>
      
      
      <categories>
          
          <category> 2101：HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220405：ES Map</title>
      <link href="/2204-es6/05-map/"/>
      <url>/2204-es6/05-map/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-map">ES Map</span><a href="#es-map" class="header-anchor">#</a></h1><p>ES6+</p><p>类似于对象的一种数据结构，是键值对的集合，但是键的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//为什么会有Map，因为对象属性名称必须是字符串，如果是其他类型则不行</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lily"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"good"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Map也是新增的数据解构  类似于对象</span><span class="token keyword">let</span> mp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"lily"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> mp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>p2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mp2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="papi">API</span><a href="#papi" class="header-anchor">#</a></h2><ul><li><code>size</code>属性返回 Map 结构的成员总数。</li><li><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个 Map 结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。<code>set</code>方法返回的是当前的<code>Map</code>对象，因此可以采用链式写法。</li><li><code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>。</li><li><code>has</code>方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li><li><code>delete</code>方法删除某个键，返回<code>true</code>。如果删除失败，返回<code>false</code>。</li><li><code>clear</code>方法清除所有成员，没有返回值。</li><li><code>keys()</code>：返回键名的遍历器。</li><li><code>values()</code>：返回键值的遍历器。</li><li><code>entries()</code>：返回所有成员的遍历器。</li><li><code>forEach()</code>：遍历 Map 的所有成员。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2204：ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220404：ES Set</title>
      <link href="/2204-es6/04-set/"/>
      <url>/2204-es6/04-set/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-set">ES Set</span><a href="#es-set" class="header-anchor">#</a></h1><p>ES6+</p><p>一种数据结构，类似数组，但是<strong>成员的值都是唯一</strong>的，不能重复。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set &#123;1, 2, 3&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="papi">API</span><a href="#papi" class="header-anchor">#</a></h2><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td><code>size</code></td><td>返回 Set 的长度</td></tr><tr><td><code>add()</code></td><td>添加一个值，返回 Set 结构本身</td></tr><tr><td><code>delete()</code></td><td>删除一个值，返回一个布尔值</td></tr><tr><td><code>has()</code></td><td>判断是否存在某成员，返回一个布尔值</td></tr><tr><td><code>clear()</code></td><td>清除所有成员</td></tr><tr><td><code>keys()</code> <code>values</code></td><td>遍历键值，同 <code>for..of</code></td></tr><tr><td><code>entries()</code></td><td>遍历返回键值对</td></tr><tr><td><code>forEach()</code></td><td>使用回调函数遍历每个成员</td></tr></tbody></table><h2><span id="pying-yong">应用</span><a href="#pying-yong" class="header-anchor">#</a></h2><p>去除数组重复成员</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>去除字符串里面重复字符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2204：ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220306：ES 对象方法</title>
      <link href="/2203-es-api/06-dui-xiang-fang-fa/"/>
      <url>/2203-es-api/06-dui-xiang-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-dui-xiang-fang-fa">ES 对象方法</span><a href="#es-dui-xiang-fang-fa" class="header-anchor">#</a></h1><p>Object.keys</p>]]></content>
      
      
      <categories>
          
          <category> 2203：ES API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220305：ES Array API</title>
      <link href="/2203-es-api/05-shu-zu-fang-fa/"/>
      <url>/2203-es-api/05-shu-zu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-array-api">ES Array API</span><a href="#es-array-api" class="header-anchor">#</a></h1><blockquote><p>数组方法</p></blockquote><h2><span id="pyi-chang-yong-fang-fa">一、常用方法</span><a href="#pyi-chang-yong-fang-fa" class="header-anchor">#</a></h2><h2><span id="pyi-shu-zu-de-dui-lie-yu-zhan-cao-zuo">一、数组的队列与栈操作</span><a href="#pyi-shu-zu-de-dui-lie-yu-zhan-cao-zuo" class="header-anchor">#</a></h2><h3><span id="p1-push">1、<code>push</code></span><a href="#p1-push" class="header-anchor">#</a></h3><h3><span id="p2-pop">2、<code>pop</code></span><a href="#p2-pop" class="header-anchor">#</a></h3><h3><span id="p3-unshift">3、<code>unshift</code></span><a href="#p3-unshift" class="header-anchor">#</a></h3><h3><span id="p4-shift">4、<code>shift</code></span><a href="#p4-shift" class="header-anchor">#</a></h3><h2><span id="per-shu-zu-de-cao-zuo">二、数组的操作</span><a href="#per-shu-zu-de-cao-zuo" class="header-anchor">#</a></h2><h3><span id="p1-splice">1、<code>splice</code></span><a href="#p1-splice" class="header-anchor">#</a></h3><h3><span id="p2-slice">2、<code>slice</code></span><a href="#p2-slice" class="header-anchor">#</a></h3><h3><span id="p3-join">3、<code>join</code></span><a href="#p3-join" class="header-anchor">#</a></h3><h2><span id="psan-shu-zu-de-bian-li-yu-cha-zhao">三、数组的遍历与查找</span><a href="#psan-shu-zu-de-bian-li-yu-cha-zhao" class="header-anchor">#</a></h2><h3><span id="p1-indexof-lastindexof">1、<code>indexOf</code> / <code>lastIndexOf</code></span><a href="#p1-indexof-lastindexof" class="header-anchor">#</a></h3><h3><span id="p2-sort-pai-xu">2、<code>sort</code> 排序</span><a href="#p2-sort-pai-xu" class="header-anchor">#</a></h3><h3><span id="p3-reverse-fan-zhuan">3、<code>reverse</code> 反转</span><a href="#p3-reverse-fan-zhuan" class="header-anchor">#</a></h3><h3><span id="p4-foreach-map-filter-reduce-every-some-bian-li">4、<code>forEach</code>/<code>map</code>/<code>filter</code>/<code>reduce</code>/<code>every</code>/<code>some</code> 遍历</span><a href="#p4-foreach-map-filter-reduce-every-some-bian-li" class="header-anchor">#</a></h3>]]></content>
      
      
      <categories>
          
          <category> 2203：ES API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220304：ES String API</title>
      <link href="/2203-es-api/04-zi-fu-chuan-fang-fa/"/>
      <url>/2203-es-api/04-zi-fu-chuan-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-string-api">ES String API</span><a href="#es-string-api" class="header-anchor">#</a></h1><p>查找<br>indexOf / lastIndexOf<br>search<br>match<br>charAt<br>截取<br>substring<br>slice<br>substr<br>拼接<br>+<br>concat<br>大小写转换<br>toLowerCase<br>toUpperCase<br>转数组 split<br>清理字符串两侧空格 trim</p>]]></content>
      
      
      <categories>
          
          <category> 2203：ES API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220303：ES Date</title>
      <link href="/2203-es-api/03-date/"/>
      <url>/2203-es-api/03-date/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-date">ES Date</span><a href="#es-date" class="header-anchor">#</a></h1><p><code>Date</code> 是JS中用来处理<strong>日期和时间</strong>的内置对象。</p><p><a href="http://doc.lipeihua.vip:8800/#/./JS%E5%9F%BA%E7%A1%80/11.Date%E5%AF%B9%E8%B1%A1">参考链接</a></p><h2><span id="p1-ji-ben-shi-yong">1、基本使用</span><a href="#p1-ji-ben-shi-yong" class="header-anchor">#</a></h2><p>获取一个Date对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token comment">// 2020-08-26T12:11:25.743Z</span><span class="token keyword">typeof</span> now <span class="token comment">// object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个时间</p><ul><li>传入一个毫秒数（会把毫秒数转换成一个时间c  然后加上1970年1月1日 8：00 的时间）</li><li>传入一个字符串格式的时间</li><li>传入多个参数 分别代表年 月 日 时 分 秒 毫秒</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1546354578234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-10-01 8:0:0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2019-10-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果不写时间 只写年月日 那么时间按照00点来计算</span><span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"8:0:0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Invalid Date 如果不写年月日 那么时间是错误的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当数字形式传递或者获取月份的时候，月份是从0开始算  0 代表 1月</span><span class="token keyword">var</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时间超出分为 会自动向前进一位  但是不建议这么写</span><span class="token keyword">var</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p2-shi-jian-chuo">2、时间戳</span><a href="#p2-shi-jian-chuo" class="header-anchor">#</a></h2><p><strong>时间戳</strong>是一个整数，保存1970年1月1日到现在的毫秒数。</p><p>获取时间戳方法</p><ul><li><code>Date.now()</code></li><li><code>new Date().getTime()</code></li><li><code>Date.parse(new Date())</code></li><li><code>new Date().valueOf()</code></li></ul><h2><span id="p3-she-zhi-shi-jian">3、设置时间</span><a href="#p3-she-zhi-shi-jian" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取当前的时间戳</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前时间</span><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// now => 2020-07-14T06:00:41.645Z</span><span class="token comment">// 作为构造函数使用</span><span class="token keyword">let</span> dt  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>年<span class="token punctuation">,</span>月<span class="token punctuation">,</span>日<span class="token punctuation">,</span><span class="token punctuation">[</span>时<span class="token punctuation">,</span>分<span class="token punctuation">,</span>秒<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自动校准机制，超过范围的会自动换算。</p><h2><span id="p4-shi-jian-huo-qu">4、时间获取</span><a href="#p4-shi-jian-huo-qu" class="header-anchor">#</a></h2><table><thead><tr><th>方法</th><th>功能</th><th>范围</th></tr></thead><tbody><tr><td><code>getFullYear()</code></td><td>获得四位年份</td><td></td></tr><tr><td><code>getMonth()</code></td><td>获取月份</td><td><strong>0-11</strong></td></tr><tr><td><code>getDate()</code></td><td>获取月份中的天数</td><td>1-31</td></tr><tr><td><code>getDay()</code></td><td>获取星期，0表示周日</td><td>0-6</td></tr><tr><td><code>getHours()</code></td><td>小时</td><td>0-23</td></tr><tr><td><code>getMinutes()</code></td><td>分钟</td><td>0-59</td></tr><tr><td><code>getSeconds()</code></td><td>秒数</td><td>0-59</td></tr><tr><td><code>getMilliseconds()</code></td><td>毫秒数</td><td>0-999</td></tr></tbody></table><h2><span id="p5-she-zhi-dan-du-de-shi-jian">5、设置单独的时间</span><a href="#p5-she-zhi-dan-du-de-shi-jian" class="header-anchor">#</a></h2><ul><li>设置年份 setFullYear</li><li>设置月份 setMonth</li><li>设置日 setDate</li><li>设置小时 setHours</li><li>设置分钟 setMinutes</li><li>设置秒 setSeconds</li><li>设置毫秒 setMilliseconds</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>设置时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置年份</span>    now<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置月份</span>    now<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置日期</span>    now<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置 小时</span>    now<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置分钟</span>    now<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置秒</span>    now<span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置毫秒</span>    now<span class="token punctuation">.</span><span class="token function">setMilliseconds</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>    <span class="token comment">//设置星期  不允许 没有这个方法</span>    now<span class="token punctuation">.</span><span class="token function">setDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置一个3天后的当前时间</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//设置一个3天后的当前时间</span><span class="token comment">/* //获取当前时间 var now = new Date(); //获取当前时间的日期 var nowDate = now.getDate(); //让当前的日期 加上3 newDate = nowDate+3; // 获取一个当前的时间，然后把当前时间的日期 设置为newDate // console.log(newDate) var newTime = new Date(); newTime = newTime.setDate(newDate); console.log(newTime);*/</span> <span class="token keyword">var</span> threeDatLast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> threeDatLast<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>threeDatLast<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p6-shi-li">6、示例</span><a href="#p6-shi-li" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取类似 2020-08-08 12:04:56 格式的字符串</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>        <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span>        time<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2203：ES API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220302：ES Math</title>
      <link href="/2203-es-api/02-math/"/>
      <url>/2203-es-api/02-math/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-math">ES Math</span><a href="#es-math" class="header-anchor">#</a></h1><h2><span id="pqu-zheng">取整</span><a href="#pqu-zheng" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// parseInt 保留整数部分</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// floor 向下取整（丢弃小数部分）</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// ceil 向上取整</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token comment">// round 四舍五入</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="phuo-qu-sui-ji-shu">获取随机数</span><a href="#phuo-qu-sui-ji-shu" class="header-anchor">#</a></h2><p>获取 0~1 之间的随机数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取指定范围的随机整数（常用）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 公式（MAX，最大值；MIN，最小值）</span><span class="token keyword">const</span> Result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">MAX</span> <span class="token operator">-</span> <span class="token constant">MIN</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">MIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简写</span><span class="token keyword">const</span> Result <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">MAX</span> <span class="token operator">-</span> <span class="token constant">MIN</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">MIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为什么不用 <code>ceil</code> 和 <code>round</code> 取整而用 <code>floor</code></p><ul><li>用 ceil 的话，第一个数被随机到的概率极小。</li><li>用 round 的话，第一个和最后一个的概率比中间各项的概率低 50%。</li></ul><h2><span id="p1-jin-zhi">1、进制</span><a href="#p1-jin-zhi" class="header-anchor">#</a></h2><p>（1）进制表示</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 二进制</span><span class="token number">0b101</span><span class="token comment">// 八进制</span><span class="token number">0o123</span><span class="token comment">// 十六进制</span><span class="token number">0x123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）进制转换（待补充）</p><h2><span id="p2-qu-zheng">2、取整</span><a href="#p2-qu-zheng" class="header-anchor">#</a></h2><p>将小数转换成整数，如果是整数则不改变。</p><ul><li><code>Math.ceil()</code>  进一取整</li><li><code>Math.floor()</code> 舍一取整</li><li><code>Math.round()</code>  标准的四舍五入</li></ul><h2><span id="p3-zui-zhi">3、最值</span><a href="#p3-zui-zhi" class="header-anchor">#</a></h2><p><code>Math.max()</code> <code>Math.min()</code> 获取一个参数列表的最大值，最小值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取一个数组的最值</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment">// ES5</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ES6</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="p4-shu-xue-yun-suan">4、数学运算</span><a href="#p4-shu-xue-yun-suan" class="header-anchor">#</a></h2><p><code>Math.abs()</code>  取绝对值</p><p><code>Math.pow(底数，次方)</code> <code>**</code> 幂运算</p><p><code>Math.PI</code> 圆周率π</p><p><code>Math.random()</code> 返回大于等于0小于1的一个随机数</p><p><code>Math.sign()</code>   判断正负<br>正数 <code>1</code><br>零或者 <code>null</code>  <code>0</code><br>负数 <code>-1</code><br>其他 <code>NaN</code></p><p><code>Math.sqrt()</code> <code>Math.cbrt()</code> <code>Math.hypot(3, 4)==5</code>  平分根、立方根</p><h2><span id="p5-bu-chong">5、补充</span><a href="#p5-bu-chong" class="header-anchor">#</a></h2><p>去掉小数部分 <code>Math.trunc()</code></p><h2><span id="p6-sheng-cheng-zhi-ding-fan-wei-de-sui-ji-shu">6、生成指定范围的随机数</span><a href="#p6-sheng-cheng-zhi-ding-fan-wei-de-sui-ji-shu" class="header-anchor">#</a></h2><p><code>Math.floor (Math. random()*( MAX-MIN+1 ) + MIN)</code></p><h2><span id="p7-sheng-cheng-wei-yi-de-sui-ji-zi-fu-chuan">7、生成唯一的随机字符串</span><a href="#p7-sheng-cheng-wei-yi-de-sui-ji-zi-fu-chuan" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">uniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// substring去掉.</span>  <span class="token keyword">const</span> randomNum <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// .toString(32) 转换为32进制</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>randomNum <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2203：ES API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220301：JSON</title>
      <link href="/2203-es-api/01-json/"/>
      <url>/2203-es-api/01-json/</url>
      
        <content type="html"><![CDATA[<h1><span id="json">JSON</span><a href="#json" class="header-anchor">#</a></h1><p><code>JSON</code> 是ES内置对象（不用定义就能用）。<br><code>.json</code> 是一种常用于前后端数据交互的格式，本质是字符串。</p><h2><span id="pyi-zhi-de-biao-shi">一、值的表示</span><a href="#pyi-zhi-de-biao-shi" class="header-anchor">#</a></h2><h3><span id="p1-ji-ben-zhi">1、基本值</span><a href="#p1-ji-ben-zhi" class="header-anchor">#</a></h3><p>可以表示除了 <code>undefined</code>、<code>symbol</code> 之外的基本数据类型，<strong>表示字符串必须加双引号。</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json">false5&quot;hello world&quot; &#x2F;&#x2F; 表示字符串需加双引号null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p2-dui-xiang">2、对象</span><a href="#p2-dui-xiang" class="header-anchor">#</a></h3><p>表示的是一组无序的键值对，属性必须用双引号包起来。此外，最后一个属性末尾不能加逗号。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;    &quot;name&quot;: &quot;Tom&quot;,    &quot;age&quot;: 18&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p3-shu-zu">3、数组</span><a href="#p3-shu-zu" class="header-anchor">#</a></h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">[25, &quot;hi&quot;, true]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="per-json-api">二、JSON API</span><a href="#per-json-api" class="header-anchor">#</a></h2><h3><span id="p1-json-stringify">1、<code>JSON.stringify()</code></span><a href="#p1-json-stringify" class="header-anchor">#</a></h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token operator">...</span><span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">Stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将JS值序列化为JSON字符串，常用于向服务器发送数据。<br>函数，原型成员，<code>undefined</code>，<code>symbol</code> 会被忽略。</p><h3><span id="p2-json-parse">2、<code>JSON.parse()</code></span><a href="#p2-json-parse" class="header-anchor">#</a></h3><p>将JSON字符串解析成原生的JS值，常用于解析服务器获取的数据。<br>不是有效的JSON字符串就会报错。</p>]]></content>
      
      
      <categories>
          
          <category> 2203：ES API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ✔ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220109：ES 对象</title>
      <link href="/2201-es-ji-chu/09-dui-xiang/"/>
      <url>/2201-es-ji-chu/09-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-dui-xiang">ES 对象</span><a href="#es-dui-xiang" class="header-anchor">#</a></h1>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220108：ES 函数</title>
      <link href="/2201-es-ji-chu/08-han-shu/"/>
      <url>/2201-es-ji-chu/08-han-shu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220107：ES 数组</title>
      <link href="/2201-es-ji-chu/07-shu-zu/"/>
      <url>/2201-es-ji-chu/07-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-shu-zu">ES 数组</span><a href="#es-shu-zu" class="header-anchor">#</a></h1><p>Array<br>定义数组<br>数组的长度<br>操作数组<br>多维数组<br>伪数组<br>数组方法</p>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220106：ES 错误与异常处理</title>
      <link href="/2201-es-ji-chu/06-cuo-wu-yu-yi-chang-chu-li/"/>
      <url>/2201-es-ji-chu/06-cuo-wu-yu-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h1><span id="cuo-wu-yu-yi-chang-chu-li">错误与异常处理</span><a href="#cuo-wu-yu-yi-chang-chu-li" class="header-anchor">#</a></h1><p>ECMA-262 规范了7种错误类型。其中<code>Error</code>是基类，其他6种错误类型是子类，都继承了基类。基类的主要作用是自定义错误对象。</p><h2><span id="p1-cuo-wu-lei-xing">1、错误类型</span><a href="#p1-cuo-wu-lei-xing" class="header-anchor">#</a></h2><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>Error</code></td><td>基类 <br><code>name</code> 可以读写异常类型（TypeError）<br><code>message</code> 可以读写详细的错误信息。</td></tr><tr><td><code>EvalError</code></td><td>不正确使用eval()方法时抛出</td></tr><tr><td><code>SyntaxError</code></td><td><strong>语法错误</strong></td></tr><tr><td><code>ReferenceError</code></td><td>读取不存在的变量时抛出</td></tr><tr><td><code>TypeError</code></td><td>值的类型发生错误的时候抛出</td></tr><tr><td><code>RangeError</code></td><td>数字超出合法范围</td></tr><tr><td><code>URIError</code></td><td>URI编码和解码错误</td></tr></tbody></table><h2><span id="p2-try-catch">2、try…catch</span><a href="#p2-try-catch" class="header-anchor">#</a></h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 调试代码块</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 捕获异常，并进行异常处理代码块</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般情况下 <code>try...catch</code> 就够用了。</p><p>按顺序执行 try 子句中的代码，如果没有异常发生，将会忽略 catch 跳转到 finally 子句继续执行。</p><p>无法捕获逻辑错误。</p><h2><span id="p3-throw">3、throw</span><a href="#p3-throw" class="header-anchor">#</a></h2><p>抛出异常。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 抛出错误</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抛出错误之后，后续代码不会执行。</p>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220103：ES 基本流程控制</title>
      <link href="/2201-es-ji-chu/05-ji-ben-liu-cheng-kong-zhi/"/>
      <url>/2201-es-ji-chu/05-ji-ben-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-ji-ben-liu-cheng-kong-zhi">ES 基本流程控制</span><a href="#es-ji-ben-liu-cheng-kong-zhi" class="header-anchor">#</a></h1><h2><span id="pfen-zhi-kong-zhi">分支控制</span><a href="#pfen-zhi-kong-zhi" class="header-anchor">#</a></h2><p>if-else<br>switch</p><h2><span id="pxun-huan-kong-zhi">循环控制</span><a href="#pxun-huan-kong-zhi" class="header-anchor">#</a></h2><p>for<br>while<br>do-while<br>break<br>continue</p><h2><span id="plian-xi-shu-chu-jiu-jiu-cheng-fa-biao">练习：输出九九乘法表</span><a href="#plian-xi-shu-chu-jiu-jiu-cheng-fa-biao" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220403：展开运算符</title>
      <link href="/2204-es6/03-zhan-kai-yun-suan-fu/"/>
      <url>/2204-es6/03-zhan-kai-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h1><span id="zhan-kai-yun-suan-fu">展开运算符</span><a href="#zhan-kai-yun-suan-fu" class="header-anchor">#</a></h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 展开</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span class="token punctuation">&#125;</span><span class="token comment">// 复制数组</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 这个不是复制数组，他们是同一个数组</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token comment">// 数组复制方法之 for</span>  <span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr2"</span><span class="token punctuation">,</span> arr3<span class="token punctuation">)</span>  <span class="token comment">// 数组复制方法之 ...</span>  <span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr3"</span><span class="token punctuation">,</span> arr4<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 合并数组</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr4"</span><span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 可以展开字符串</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr5"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 对象是没有部署 itertor 接口，所以不能被展开</span><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'poxiao'</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">'rbq'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// console.log(...obj)</span><span class="token punctuation">&#125;</span><span class="token comment">// 类数组对象上面也有iterator接口，所以也可以被展开</span><span class="token comment">// const olis = document.querySelectorAll("ul li")</span><span class="token comment">// console.log(...olis)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2204：ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220104：ES 运算符与类型转换</title>
      <link href="/2201-es-ji-chu/04-yun-suan-fu-yu-lei-xing-zhuan-huan/"/>
      <url>/2201-es-ji-chu/04-yun-suan-fu-yu-lei-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-yun-suan-fu-yu-lei-xing-zhuan-huan">ES 运算符与类型转换</span><a href="#es-yun-suan-fu-yu-lei-xing-zhuan-huan" class="header-anchor">#</a></h1><h2><span id="psuan-zhu-yun-suan-fu">算术运算符</span><a href="#psuan-zhu-yun-suan-fu" class="header-anchor">#</a></h2><h2><span id="pguan-xi-yun-suan-fu">关系运算符</span><a href="#pguan-xi-yun-suan-fu" class="header-anchor">#</a></h2><h2><span id="pluo-ji-yun-suan-fu">逻辑运算符</span><a href="#pluo-ji-yun-suan-fu" class="header-anchor">#</a></h2><h2><span id="pwei-yun-suan-fu">位运算符</span><a href="#pwei-yun-suan-fu" class="header-anchor">#</a></h2><h2><span id="plei-xing-zhuan-huan">类型转换</span><a href="#plei-xing-zhuan-huan" class="header-anchor">#</a></h2><p>强制类型转换<br>parseInt<br>ParseFloat<br>toString / valueOf<br><a href="https://juejin.im/post/6873215243804213262">https://juejin.im/post/6873215243804213262</a></p>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220402：Symbol</title>
      <link href="/2204-es6/02-symbol/"/>
      <url>/2204-es6/02-symbol/</url>
      
        <content type="html"><![CDATA[<h1><span id="symbol">Symbol</span><a href="#symbol" class="header-anchor">#</a></h1><p>保证对象的每个属性的名字都是独一无二的，从根本上面防止属性名冲突。</p><h2><span id="pyi-shi-yong">一、使用</span><a href="#pyi-shi-yong" class="header-anchor">#</a></h2><p>1、不用加 <code>new</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">typeof</span> s <span class="token comment">// "symbol"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、可以加描述符</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 'Symbol(foo)'</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 3、</span><span class="token template-punctuation string">`</span></span><span class="token class-name">Symbol</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>description<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">> ES2019新增</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>js<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>description <span class="token comment">// "foo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、<code>Symbol.for</code> / <code>Symbol.keyFor</code><br>有时，我们希望重新使用同一个Symbol值，Symbol.for()方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值，并将其注册到全局。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>s1 <span class="token operator">===</span> s2 <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Symbol.keyFor ()</code> 方法返回一个已登记的 Symbol 类型值的 key。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// "foo"</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="per-bian-li">二、遍历</span><a href="#per-bian-li" class="header-anchor">#</a></h2><p>无法遍历: <code>for...in</code>、<code>for...of</code>、<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code></p><p>可以遍历：<br><code>Object.getOwnPropertySymbols()</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span>obj<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"World"</span><span class="token keyword">const</span> objectSymbols <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">// [Symbol(a), Symbol(b)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Reflect.ownKeys()</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token keyword">enum</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  nonEnum<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">// ["enum", "nonEnum", Symbol(key)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="psan-ying-yong">三、应用</span><a href="#psan-ying-yong" class="header-anchor">#</a></h2><p>1、作为对象的属性名</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 第一种写法</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token comment">// 第二种写法</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token comment">// 第三种写法</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> mySymbol<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 以上写法都得到同样的结果</span><span class="token comment">// 只能用[]不能用.取值</span>a<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、消除魔术字符串<br>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 2204：ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220103：ES 基本数据类型</title>
      <link href="/2201-es-ji-chu/03-ji-ben-shu-ju-lei-xing/"/>
      <url>/2201-es-ji-chu/03-ji-ben-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-ji-ben-shu-ju-lei-xing">ES 基本数据类型</span><a href="#es-ji-ben-shu-ju-lei-xing" class="header-anchor">#</a></h1><p>在 ES 中，数据类型分为基本类型和引用类型（复杂类型）。</p><table><thead><tr><th></th><th>基本类型</th><th>引用类型</th></tr></thead><tbody><tr><td>值</td><td>不可变（注）</td><td>可变</td></tr><tr><td>添加属性和方法</td><td>无效</td><td>可以</td></tr><tr><td>存储方式</td><td>栈区</td><td>名字地址存栈区，值存堆区</td></tr><tr><td>比较方式</td><td>值比较</td><td>引用的比较</td></tr></tbody></table><p>基本类型分为</p><ul><li>布尔值 <code>Boolean</code></li><li>数值 <code>Number</code></li><li>大整数 <code>bigint</code> （ES6新增）</li><li>字符串 <code>String</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>Symbol</code> （ES6新增）</li></ul><h2><span id="pyi-bu-er-zhi">一、布尔值</span><a href="#pyi-bu-er-zhi" class="header-anchor">#</a></h2><h2><span id="per-shu-zhi-da-zheng-shu">二、数值、大整数</span><a href="#per-shu-zhi-da-zheng-shu" class="header-anchor">#</a></h2><p>NaN</p><p>最值</p><p>安全值</p><h2><span id="psan-zi-fu-chuan">三、字符串</span><a href="#psan-zi-fu-chuan" class="header-anchor">#</a></h2><p>模板字符串</p><h2><span id="psi-null-amp-undefined">四、<code>null</code> &amp; <code>undefined</code></span><a href="#psi-null-amp-undefined" class="header-anchor">#</a></h2><p>常见的 <code>undefined</code> 环境</p><ul><li>变量声明但是没有赋值</li><li>调用函数没有提供的参数</li><li>函数默认返回值</li><li>对象没有赋值的属性</li></ul><p>常见的 <code>null</code> 环境</p><ul><li>对象原型链的终点</li><li>让变量指向的对象成为垃圾对象</li></ul><h2><span id="pwu-symbol">五、<code>Symbol</code></span><a href="#pwu-symbol" class="header-anchor">#</a></h2><p>保证对象的每个属性的名字都是独一无二的，从根本上面防止属性名冲突。</p><p>更多内容详看 <code>ES6/Symbol</code></p><h2><span id="pliu-pan-duan-lei-xing">六、判断类型</span><a href="#pliu-pan-duan-lei-xing" class="header-anchor">#</a></h2><p><code>typeof</code><br><code>instanceof</code><br><code>isNaN</code></p>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220102：ES 基本语法</title>
      <link href="/2201-es-ji-chu/02-ji-ben-yu-fa/"/>
      <url>/2201-es-ji-chu/02-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-ji-ben-yu-fa">ES 基本语法</span><a href="#es-ji-ben-yu-fa" class="header-anchor">#</a></h1><h2><span id="pyi-yu-ju-zhu-shi-fen-hao-kong-ge">一、语句、注释、分号、空格</span><a href="#pyi-yu-ju-zhu-shi-fen-hao-kong-ge" class="header-anchor">#</a></h2><h2><span id="per-bian-liang">二、变量</span><a href="#per-bian-liang" class="header-anchor">#</a></h2><h3><span id="p1-bian-liang-de-ming-ming-gui-fan">1、变量的命名规范</span><a href="#p1-bian-liang-de-ming-ming-gui-fan" class="header-anchor">#</a></h3><h3><span id="p2-var">2、var</span><a href="#p2-var" class="header-anchor">#</a></h3><h3><span id="p3-let-es6">3、let <code>ES6</code></span><a href="#p3-let-es6" class="header-anchor">#</a></h3><p>块级作用域。</p><h3><span id="p4-const-es6">4、const <code>ES6</code></span><a href="#p4-const-es6" class="header-anchor">#</a></h3><h2><span id="psan-yan-ge-mo-shi">三、严格模式</span><a href="#psan-yan-ge-mo-shi" class="header-anchor">#</a></h2><p>开启严格模式 <code>&quot;use strict&quot;</code></p><p>严格模式的特点：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 变量需声明才能使用</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"变量需声明才能使用"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>   <span class="token comment">// 函数全局调用的时候 this 指向 undefined</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220101：ES 开始</title>
      <link href="/2201-es-ji-chu/01-kai-shi/"/>
      <url>/2201-es-ji-chu/01-kai-shi/</url>
      
        <content type="html"><![CDATA[<h1><span id="es-kai-shi">ES 开始</span><a href="#es-kai-shi" class="header-anchor">#</a></h1><p>JavaScript 由 ECMAScript、BOM、DOM三部分组成，其中 ESMAScript （简称ES）是JS的核心语法规范。</p><h2><span id="pyi-gai-nian-he-te-dian">一、概念和特点</span><a href="#pyi-gai-nian-he-te-dian" class="header-anchor">#</a></h2><p>概念：</p><ul><li>ES-262</li><li>ES6</li></ul><p>特点：</p><ul><li>脚本语言</li><li>弱类型</li><li>动态</li><li>基于对象（原型）</li></ul><h2><span id="per-zai-wang-ye-zhong-shi-yong-js">二、在网页中使用JS</span><a href="#per-zai-wang-ye-zhong-shi-yong-js" class="header-anchor">#</a></h2><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>270201：微信小程序</title>
      <link href="/2702-wei-xin-xiao-cheng-xu/01/"/>
      <url>/2702-wei-xin-xiao-cheng-xu/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="wei-xin-xiao-cheng-xu">微信小程序</span><a href="#wei-xin-xiao-cheng-xu" class="header-anchor">#</a></h1><p>2017年1月9日微信上线小程序。</p><p>要求：压缩包不能超过2M。</p><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 2702：微信小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>210902：AntV</title>
      <link href="/2109-shu-ju-ke-shi-hua/02-antv/"/>
      <url>/2109-shu-ju-ke-shi-hua/02-antv/</url>
      
        <content type="html"><![CDATA[<h1><span id="antv">AntV</span><a href="#antv" class="header-anchor">#</a></h1><p>阿里出品</p><p>文档：<a href="https://antv.gitee.io/zh">https://antv.gitee.io/zh</a></p>]]></content>
      
      
      <categories>
          
          <category> 2109：数据可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>510401：英语</title>
      <link href="/5104-ying-yu/01/"/>
      <url>/5104-ying-yu/01/</url>
      
        <content type="html"><![CDATA[<ul><li>FYI = For your information.<br>仅供参考。</li><li>Best Regards.<br>诚挚的问候，最好的祝福，致敬。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 5104：英语 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>280301：错误文档</title>
      <link href="/2803-qian-duan-diao-shi/01-cuo-wu-wen-dang/"/>
      <url>/2803-qian-duan-diao-shi/01-cuo-wu-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1><span id="cuo-wu-wen-dang">错误文档</span><a href="#cuo-wu-wen-dang" class="header-anchor">#</a></h1><h2><span id="p2020-nian-12-yue">2020年12月</span><a href="#p2020-nian-12-yue" class="header-anchor">#</a></h2><p>1、<code>electron</code> 下载过慢的问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm i -g cross-envcross-env ELECTRON_MIRROR&#x3D;&quot;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;electron&#x2F;&quot;  npm i -g electron@(你要下载的版本)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、<code>node-sass</code> 编译环境的问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --global --production windows-build-toolsnpm install node-sass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="p2021-nian-01-yue">2021年01月</span><a href="#p2021-nian-01-yue" class="header-anchor">#</a></h2><p>1、高德地图无法添加标记的问题（部分可以，部分不行）</p><p>问题：<code>AMap.LanLat(longitude, latitude)</code> 传递的经度、纬度参数不能为空。</p><p>解决：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2803：前端调试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>210901：ECharts</title>
      <link href="/2109-shu-ju-ke-shi-hua/01-echarts/"/>
      <url>/2109-shu-ju-ke-shi-hua/01-echarts/</url>
      
        <content type="html"><![CDATA[<h1><span id="echarts">ECharts</span><a href="#echarts" class="header-anchor">#</a></h1><p>百度出品</p><p>文档：<a href="https://echarts.apache.org/examples">https://echarts.apache.org/examples</a></p><h2><span id="pkai-shi">开始</span><a href="#pkai-shi" class="header-anchor">#</a></h2><p><code>npm install echarts --save</code></p>]]></content>
      
      
      <categories>
          
          <category> 2109：数据可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>240401：防抖&amp;节流</title>
      <link href="/2404-qian-duan-xing-neng-you-hua/01-fang-dou-jie-liu/"/>
      <url>/2404-qian-duan-xing-neng-you-hua/01-fang-dou-jie-liu/</url>
      
        <content type="html"><![CDATA[<h1><span id="fang-dou-amp-jie-liu">防抖&amp;节流</span><a href="#fang-dou-amp-jie-liu" class="header-anchor">#</a></h1><h2><span id="pjie-liu">节流</span><a href="#pjie-liu" class="header-anchor">#</a></h2><p>假设有一个场景，滚动就会发起网络请求，但是我们不希望用户在滚动过程中一直发请求，而是隔一段时间发一次，对于这种情况，我们可以使用节流。</p><h2><span id="pfang-dou">防抖</span><a href="#pfang-dou" class="header-anchor">#</a></h2><p>假设有一个按钮，用户点击一次就会触发网络请求，但是我们不希望用户一直点这个按钮发请求，而是这个用户点击这个按钮一段时间内没有再去点击才去发请求，对于这种情况，我们可以使用防抖。</p>]]></content>
      
      
      <categories>
          
          <category> 2404：前端性能优化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>240202：Tree Shaking</title>
      <link href="/2402-webpack/02-tree-shaking/"/>
      <url>/2402-webpack/02-tree-shaking/</url>
      
        <content type="html"><![CDATA[<h1><span id="tree-shaking">Tree-Shaking</span><a href="#tree-shaking" class="header-anchor">#</a></h1><p>俗称树摇，摇树。作用是清理无用代码。<br>webpack 最新版本在生产环境会自动开启。</p>]]></content>
      
      
      <categories>
          
          <category> 2402：webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>240201：webpack</title>
      <link href="/2402-webpack/01/"/>
      <url>/2402-webpack/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="webpack">webpack</span><a href="#webpack" class="header-anchor">#</a></h1><h2><span id="pchang-jian-mian-shi-ti">常见面试题</span><a href="#pchang-jian-mian-shi-ti" class="header-anchor">#</a></h2><p>1、loader 和 plugin 的区别？<br>webpack 默认情况只支持 js 和 json ，无法打包其他类型代码。<br>借助 loader 的力量，可以打包更多的类型，比如 css，html<br>对于 plugin 不偏向于文件类型处理，主要就是扩展 webpack 的功能，比如 HTMLWebpackPlugin</p><p>最后：问到不会的怎么办？</p><blockquote><p>webpack 之前的看文档配的，有点忘记了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 2402：webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>240101：前端工程化</title>
      <link href="/2401-qian-duan-gong-cheng-hua/qian-duan-gong-cheng-hua/"/>
      <url>/2401-qian-duan-gong-cheng-hua/qian-duan-gong-cheng-hua/</url>
      
        <content type="html"><![CDATA[<h1><span id="qian-duan-gong-cheng-hua">前端工程化</span><a href="#qian-duan-gong-cheng-hua" class="header-anchor">#</a></h1><p>前端工程化就是为了让前端开发可以自成体系。<br>可以从 模块化、组件化、规范化、自动化 四个方面来思考。</p><h2><span id="pcan-kao">参考</span><a href="#pcan-kao" class="header-anchor">#</a></h2><ul><li><a href="https://www.jianshu.com/p/88ed70476adb">https://www.jianshu.com/p/88ed70476adb</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2401：前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>250701：Vue 3</title>
      <link href="/2507-vue3/01/"/>
      <url>/2507-vue3/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="vue-3">Vue 3</span><a href="#vue-3" class="header-anchor">#</a></h1><blockquote><p>前置知识：<code>Vue基础</code> <code>Vue高级</code> <code>TypeScript</code></p></blockquote><h2><span id="pcan-kao">参考</span><a href="#pcan-kao" class="header-anchor">#</a></h2><ul><li><a href="https://juejin.cn/post/6897030228867022856">https://juejin.cn/post/6897030228867022856</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2507：Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>250501：Vue + ElementUI</title>
      <link href="/2505-vue-elementui/01/"/>
      <url>/2505-vue-elementui/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="element-ui">Element UI</span><a href="#element-ui" class="header-anchor">#</a></h1><p>作者：饿了么团队<br>文档：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a><br>适用技术栈：Vue</p><h2><span id="pyi-ru-shou">一、入手</span><a href="#pyi-ru-shou" class="header-anchor">#</a></h2><h2><span id="per-zu-jian">二、组件</span><a href="#per-zu-jian" class="header-anchor">#</a></h2><p>使用比较多的组件：标签页（Tabs），表格，按钮，开关</p>]]></content>
      
      
      <categories>
          
          <category> 2505：Vue+ElementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220501：NodeJS</title>
      <link href="/2205-nodejs/01/"/>
      <url>/2205-nodejs/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="nodejs">NodeJS</span><a href="#nodejs" class="header-anchor">#</a></h1><p>I/O密集型</p><p>非阻塞</p>]]></content>
      
      
      <categories>
          
          <category> 2205：NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220401：解构赋值</title>
      <link href="/2204-es6/01-jie-gou-fu-zhi/"/>
      <url>/2204-es6/01-jie-gou-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h1><span id="jie-gou-fu-zhi">解构赋值</span><a href="#jie-gou-fu-zhi" class="header-anchor">#</a></h1><p>基础使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 字符串解构</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"qwq"</span><span class="token comment">// 数组解构</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">// 对象解构</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token comment">// 默认值</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token comment">// 改名</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token operator">:</span> z<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组的解构赋值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 一一对应</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// 解构失败返回 undefined</span><span class="token comment">// 允许不完全解构</span><span class="token comment">// 可以设置默认值(没有对应关系时)</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token operator">=</span><span class="token string">"qwq"</span><span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// 想把后面没有解构的值保存起来(rest参数必须是最后)</span><span class="token keyword">const</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> <span class="token operator">...</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token comment">// 多维数组保证一一对应也能解构</span><span class="token comment">// 交换两个变量</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 例子</span><span class="token keyword">let</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> hoo<span class="token punctuation">,</span> hoo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 报错 cannot access ‘hoo' before initialization</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象的解构赋值（用的很多）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 对象没有顺序，直接取 对应的方法 （保证同名，key）</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span>    log<span class="token punctuation">&#125;</span> <span class="token operator">=</span> console<span class="token punctuation">;</span><span class="token comment">// 如果键名key和键值value是一样的，则可以直接简写</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    hoo<span class="token operator">:</span> <span class="token string">"hoo"</span><span class="token punctuation">,</span>    foo<span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    hoo<span class="token punctuation">,</span>    foo<span class="token punctuation">&#125;</span><span class="token comment">// 也能设置默认值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用场景</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 交换变量</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token comment">// 按需使用模块</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> readFile <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment">// 函数传参</span><span class="token comment">// 待更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 1、函数多个返回值返回</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> hoo<span class="token operator">:</span> <span class="token string">"word"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> foo <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2、函数传参数</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3.json数据的提取</span><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">"lily"</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">"nv"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">&#125;</span> <span class="token operator">=</span> json<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 2204：ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>630201：亲密关系</title>
      <link href="/6302-qin-mi-guan-xi/01/"/>
      <url>/6302-qin-mi-guan-xi/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="qin-mi-guan-xi">亲密关系</span><a href="#qin-mi-guan-xi" class="header-anchor">#</a></h1><ul><li>男人的情感需求是信任，接纳，欣赏，崇拜，认可，鼓励。<br>女人的情感需求是关爱，理解，忠诚，尊重，体贴，安全感。</li><li>想要持续拥有感情中的幸福是一件很难的事情。可能比你在工作上获得成功还要难，所以需要你和伴侣都提升爱的能力，付出时间、精力、金钱、感情去学习提升和经营。</li><li>得不到的永远最好的。</li><li>一度追求结果，可能会适得其反。过度强求结果，是一个非常错误的恋爱观念。</li><li>虽然聊天的目的在于邀约和升级关系，但不要一味的在信息的世界里去升级关系。升级关系应该放在两人接触之后，双方感觉良好，适时且适当的升级关系。</li><li>你的自我感动和自我安慰，比又蠢又懒更致命，明明啥都没做，还在那儿觉得自己是全世界最努力的人。</li><li>拥抱可以带来阳光，温暖。<br>接近，碰触，拥抱可以增加幸福感，增强免疫力。</li><li>伴侣相处：<br>给予和索取应该平衡。<br>讲情，而不讲理，不站在道德的至高点（你总是. . . . ）<br>互相感情支持，给对方更好的安慰，提供依赖。<br>双方努力，需要双方不可避免的差异进行磨合。</li><li>在亲密关系中，你对自己的想法和行为控制力比你认为得要低得多。 尤其是一些不安全依恋风格的人，在感情中基本上处于被自己潜意识控制的状态。</li><li>我深以为然，最好的爱情状态应该是：保有自我的基础之上，拥有彼此。</li></ul><p><strong>吵架禁忌</strong></p><p>1、冷战<br>夫妻吵架，最忌讳冷暴力。你不理我，我也不理你，同住在一个屋檐下却像一个陌生人，明明有话却憋着不说。尽管没有“唇枪舌剑”，但对两人造成的伤害远比暴力要严重得多</p><p>2、翻旧账<br>吵架要一码归一码，不要总是揪着对方过去的错误不放。把陈芝麻烂谷子的事一股脑拿出来再说一遍，并不能解决现有的问题，反而还会加剧矛盾。</p><p>3、口不择言<br>人在愤怒的时候往往会说出很多伤感情的话：分手、离婚、你不如别人、你有什么用、当初真是瞎了眼才和你在一起……这些话一说出口，就会像一把尖刀插在对方的心中。给对方造成无可挽回的伤害。</p><p>4、兜圈子<br>很多夫妻在吵架中兜圈子，有问题不直说，而是希望对方猜测。但你要知道，对方并不是你肚子里的蛔虫，男女思维不同，想要解决问题就要剥离掉谩骂、羞辱的“外衣”，直接和对方划出内容重点，这样才能让对方的注意力回到事件本身。</p><p>和伴侣相处：<br>1、给予和索取应该平衡。<br>2、讲情，而不讲理，不站在道德的至高点（你总是. . . . ）。<br>3、互相感情支持，给对方更好的安慰，提供依赖。<br>4、双方努力，需要双方不可避免的差异进行磨合。</p><p>不失去自我，安全感不能从对方身上寻找。<br>不试图去改变对方。<br>不随意发脾气，不要冷战，不翻旧账。<br>不拿自己的尺子量对方。</p>]]></content>
      
      
      <categories>
          
          <category> 6302：亲密关系 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>640101：建立知识体系</title>
      <link href="/6401-zhi-shi-guan-li/01-jian-li-zhi-shi-ti-xi/"/>
      <url>/6401-zhi-shi-guan-li/01-jian-li-zhi-shi-ti-xi/</url>
      
        <content type="html"><![CDATA[<h1><span id="jian-li-zhi-shi-ti-xi">建立知识体系</span><a href="#jian-li-zhi-shi-ti-xi" class="header-anchor">#</a></h1><h2><span id="pyi-kai-shi">一、开始</span><a href="#pyi-kai-shi" class="header-anchor">#</a></h2><p>为什么要建立知识体系？</p><ul><li>大脑的工作机制是基于索引</li><li>学那么多东西，为什么记不住，用不上？是因为你学到的都是零碎的，不成体系的。</li><li>我们给知识建立体系就是给知识建立索引，以及索引间的逻辑关系，当知识体系大厦搭建完毕以后，你就可以随意调用，只要在你知识体系涵盖的范围内，就可以任意使用。</li></ul><h2><span id="per-ru-he-jian-li-zhi-shi-ti-xi">二、如何建立知识体系</span><a href="#per-ru-he-jian-li-zhi-shi-ti-xi" class="header-anchor">#</a></h2><h3><span id="pgou-zao-zhi-shi-ti-xi-de-cai-liao">构造知识体系的材料</span><a href="#pgou-zao-zhi-shi-ti-xi-de-cai-liao" class="header-anchor">#</a></h3><p>（1）元认知（地基）</p><ul><li>能指导你思考背后的思考，指导你解释原理背后的原理。</li><li>最底层的知识，它为一切现象原理，提供最底层的解释和支撑。</li></ul><p>（2）方法（钢筋水泥）</p><ul><li>方法，套路。</li></ul><p>（3）概念（砖瓦）</p><ul><li>我们身处的世界都是由一个个概念构成的，这个时候我们理解事物的基本方式。</li><li>可以说我们认知这个世界的方式，就是在认知一个个概念，概念是组成我们思想的基本方式，你了解的概念越多，你认识这个世界的维度就会越丰富。</li></ul><p>（4）事实（边料）</p><ul><li>浩如烟海。</li><li>这些知识只在特定情况有用，大多数情况下是没有用的，所以它的可迁移能力最弱。</li></ul><h3><span id="pzhi-shi-de-ke-qian-yi">知识的可迁移</span><a href="#pzhi-shi-de-ke-qian-yi" class="header-anchor">#</a></h3><ul><li>知识的可迁移能力，就是<strong>我们学习的任何东西，都是为了实现知识的最大可迁移，我们可以从一个领域，迅速用同样的方式，进行跨界。</strong></li><li>元认知类知识最有用，迁移能力最强，但学习难度最高，而事实类知识迁移能力最弱，学习难度也是最容易的。</li></ul><h3><span id="pyuan-ren-zhi-yi-shi-cong-di-ceng-chu-fa">元认知意识 —— 从底层出发</span><a href="#pyuan-ren-zhi-yi-shi-cong-di-ceng-chu-fa" class="header-anchor">#</a></h3><h3><span id="pcong-wen-ti-xian-xiang-chu-fa">从问题、现象出发</span><a href="#pcong-wen-ti-xian-xiang-chu-fa" class="header-anchor">#</a></h3><h3><span id="pzhu-yi-shi-xiang">注意事项</span><a href="#pzhu-yi-shi-xiang" class="header-anchor">#</a></h3><ul><li><p>无用之用是为大用</p><p>很多人觉得哲学、美学、逻辑学、社会学、心理学、经济学、历史学等各大学科很高大上，很空洞，感觉学了也不能找到工作啥的，事实上恰恰相反，这些东西才是真正承载人类顶级智慧和知识的学科，你所见到的一切都是在这些底层学科之上构建而成的。</p></li><li><p>让知识间建立关系，切记一定不要孤立</p></li><li><p>寻找一切现象，填充你的知识框架：为理论找到实例，为实例提供理论。</p></li><li><p>搭建知识体系的过程一定是需要过程的</p></li></ul><h2><span id="psan-ru-he-guan-li-zhi-shi-ti-xi">三、如何管理知识体系</span><a href="#psan-ru-he-guan-li-zhi-shi-ti-xi" class="header-anchor">#</a></h2><h3><span id="pjian-li-wai-bu-zhi-shi-ku">建立外部知识库</span><a href="#pjian-li-wai-bu-zhi-shi-ku" class="header-anchor">#</a></h3><h3><span id="pdie-dai-geng-xin">迭代更新</span><a href="#pdie-dai-geng-xin" class="header-anchor">#</a></h3><h2><span id="psi-xue-yi-zhi-yong">四、学以致用</span><a href="#psi-xue-yi-zhi-yong" class="header-anchor">#</a></h2><p>知识拿去用了才有用</p><h2><span id="pcan-kao">参考</span><a href="#pcan-kao" class="header-anchor">#</a></h2><ul><li><a href="https://www.zhihu.com/question/19591121/answer/1364971134">https://www.zhihu.com/question/19591121/answer/1364971134</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 6401：知识管理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>210701：Electron</title>
      <link href="/2701-electron/01/"/>
      <url>/2701-electron/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="electron">Electron</span><a href="#electron" class="header-anchor">#</a></h1><p>VSCode 等应用是使用 <code>Electron</code> 搭建的。</p><h2><span id="pyi-xiang-mu-gou-jian-he-da-bao">一、项目构建和打包</span><a href="#pyi-xiang-mu-gou-jian-he-da-bao" class="header-anchor">#</a></h2><p>项目搭建：</p><p><code>electron-vue</code></p><p>项目打包：<br><code>electron-builder</code></p><ul><li>可以支持 Windows/Mac/Linux 平台</li><li>支持自动更新，打包更轻量</li><li>可以打包出不暴露源码的安装程序<br><code>electron-packager</code></li><li>配置 <code>nsis</code> 自定义安装目录以及安装个性化</li></ul><h2><span id="per-electron-zhi-shi-dian">二、Electron 知识点</span><a href="#per-electron-zhi-shi-dian" class="header-anchor">#</a></h2><h3><span id="p1-zhu-jin-cheng-he-xuan-ran-jin-cheng">1、主进程和渲染进程</span><a href="#p1-zhu-jin-cheng-he-xuan-ran-jin-cheng" class="header-anchor">#</a></h3><p>主进程：package.json 中的 main.js<br>Electron 内核是 Chromium<br>在主进程中通过 <code>new BrowserWindow</code> 创建页面，每个 <code>BrowserWindow</code> 就是渲染进程，当某个页面被销毁后，对应的渲染进程就会终止。</p><h3><span id="p2-you-hua-chuang-kou">2、优化窗口</span><a href="#p2-you-hua-chuang-kou" class="header-anchor">#</a></h3><p>（1）无边框窗口</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span> frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> resizable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）窗口拖动<br>现在窗口已经没有标题栏和菜单栏了，所以窗口没办法拖动了，给拖动区域增加 <code>-webkit-app-region: drag</code> 的 CSS 代码。<br><code>&lt;body style=&quot;-webkit-app-region: drag&quot;&gt;&lt;/body&gt;</code><br>需要注意的是，如果在拖动区域里有按钮等需要点击的元素，需要增加 <code>-webkit-app-region: no-drag</code> 设置，否则会无法点击。</p><h3><span id="p3-jin-cheng-jian-tong-xin">3、进程间通信</span><a href="#p3-jin-cheng-jian-tong-xin" class="header-anchor">#</a></h3><p>因为安全限制，页面不能直接访问原生 GUI 资源，在 Electron 中也是一样。<br>渲染进程要进行原生的 GUI 操作，比如和主进程进行通信，请求相应的操作，在 Electron 中提供了几种通信方式：</p><p>（1）<code>ipcMain</code> 和 <code>ipcRenderer</code><br>在渲染进程中使用 <code>ipcRenderer</code> 模块来向主进程发送消息，主进程中使用 <code>ipcMain</code> 模块接受消息，进行操作。如果还需要进行反馈，则通知渲染进程，渲染进程根据接收的内容执行对应的操作。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 渲染进程中</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ipcRenderer <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ipcRender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"somemsg"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>ipcRender<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"replaymsg"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt<span class="token punctuation">,</span> otherData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>otherData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 主进程中</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ipcMain <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"somemsg"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  evt<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"replymsg"</span><span class="token punctuation">,</span> otherData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）remote<br><code>remote</code> 模块为渲染进程和主进程通信提供了一种简单方法</p><p>（3）webContents</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 主进程中</span>win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"did-finish-load"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"23333333333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 渲染进程中</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"electron"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）渲染进程之间通信<br>使用 Vuex 和 router<br>但如果对数据实时性要求高，那就要结合上面的方法来实现：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 主进程中，将两个窗口的 id 分别发送到对方的渲染进程里</span>mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"did-finish-load"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"getChild"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    childId<span class="token operator">:</span> childWindow<span class="token punctuation">.</span>id<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>childWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"did-finish-load"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  childWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"getMain"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    mainId<span class="token operator">:</span> mainWindow<span class="token punctuation">.</span>id<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 渲染进程 mainWindow，通过 id 得到 childWindow 并发送一条消息</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"getChild"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  remote<span class="token punctuation">.</span>BrowserWindow<span class="token punctuation">.</span><span class="token function">fromId</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>childId<span class="token punctuation">)</span><span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>    <span class="token string">"say"</span><span class="token punctuation">,</span>    <span class="token string">"Hello World!"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 渲染进程 childWindow，接收 mainWindow 的消息</span>ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Hello World!</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同理 childWindow 也可以通过 id 给 mainWindow 发送消息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p4-cai-keng">4、踩坑</span><a href="#p4-cai-keng" class="header-anchor">#</a></h3><p>electron-vue 里使用 elementUI 等，需要在 webpack.renderer.config.js 的白名单里配置：<code>let whiteListedModules = ['vue', 'element-ui']</code></p><h3><span id="p5-nan-dian">5、难点</span><a href="#p5-nan-dian" class="header-anchor">#</a></h3><p>多窗口的管理，每个窗口使用 <code>remote.getCurrentWindow().id</code> 命名，在主进程中采用单个实例 <code>app.makeSingleInstance</code> 管理</p><h2><span id="pcan-kao">参考：</span><a href="#pcan-kao" class="header-anchor">#</a></h2><ul><li><a href="https://juejin.cn/post/6844903896041652232">https://juejin.cn/post/6844903896041652232</a></li><li><a href="https://molunerfinn.com/electron-vue-1/">https://molunerfinn.com/electron-vue-1/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2701：Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210702：Electron 环境配置</title>
      <link href="/2701-electron/02-electron-huan-jing-pei-zhi/"/>
      <url>/2701-electron/02-electron-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1><span id="electron-huan-jing-pei-zhi">Electron 环境配置</span><a href="#electron-huan-jing-pei-zhi" class="header-anchor">#</a></h1><h2><span id="pwindows-10">Windows 10</span><a href="#pwindows-10" class="header-anchor">#</a></h2><ul><li><a href="https://segmentfault.com/a/1190000018533945">electron打包踩过的坑总结</a></li></ul><h2><span id="pmacos-da-bao-huan-jing-pei-zhi">MacOS 打包环境配置</span><a href="#pmacos-da-bao-huan-jing-pei-zhi" class="header-anchor">#</a></h2><blockquote><p>推荐系统版本：<code>MacOS 10.14</code>，经过测试，10.15 会出现兼容性问题</p></blockquote><ol><li><p>通过 SVN 工具 <code>checkout</code> 代码到本地</p><blockquote><p>推荐用 <code>Cornerstone</code></p></blockquote></li><li><p>在官网下载并安装 Node.js</p><blockquote><p>推荐版本：<code>8.12</code></p><p>也可以安装最新稳定版本，然后通过 npm 版本切换工具 n 来切换版本</p><blockquote><p><code>sudo npm i n -g</code></p><p><code>sudo n 8.12</code></p><p><code>sudo n</code> 选择相应的版本回车即可</p></blockquote></blockquote></li><li><p>全局安装  <code>electron-builder</code></p><blockquote><p><code>sudo npm i electron-builder@20.19.2 -g</code></p><p>另外如果 <code>20.19.2</code> 不行可以换 <code>20.28.4</code> 试试</p></blockquote></li><li><p>终端进入要打包的版本目录，安装依赖</p><blockquote><p><code>cd 你的目录</code></p><p><code>sudo npm i -unsafe-perm</code></p><p>注：如果没有科学上网的话，下载 <code>electron</code> 会非常慢</p></blockquote></li><li><p>安装完依赖执行打包命令</p><blockquote><p><code>sudo npm run build:mac</code></p><p>注：这里需要科学上网，不然可能卡在 <code>downloading</code> 地方</p><p>如果失败，请进入<code>资源库/Cache/Electron</code> 删除全部内容，重新尝试打包</p><p>科学上网只要第一次就可以了，下次打包会有缓存</p></blockquote></li><li><p>下次打包之前运行</p><blockquote><p><code>sudo npm run build:clean</code></p></blockquote></li><li><p>如果出现问题，可以尝试清 npm 缓存</p><blockquote><p><code>sudo npm cache verify</code></p></blockquote><p>然后删除版本目录下面的 <code>node_modules</code> ，重新 <code>sudo npm i --unsafe-perm</code> 安装依赖</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2701：Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210101：网页基础</title>
      <link href="/2101-html/01-wang-ye-ji-chu/"/>
      <url>/2101-html/01-wang-ye-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1><span id="wang-ye-ji-chu">网页基础</span><a href="#wang-ye-ji-chu" class="header-anchor">#</a></h1><p>W3C标准<br>HTML，超文本标记语言<br>XML，可标记扩展语言</p><p>网页的组成<br>结构 Structure<br>表现 Presentation<br>行为 Behavior</p><p>HTML 基本结构<br>doctype<br><code>&lt;!doctype html&gt;</code><br>html/head/body<br>title<br>meta charset<br><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code><br>meta keywords<br>注释</p><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 2101：HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210210：C3 Transform</title>
      <link href="/2102-css/10-transform/"/>
      <url>/2102-css/10-transform/</url>
      
        <content type="html"><![CDATA[<h1><span id="css3-transform">CSS3：transform</span><a href="#css3-transform" class="header-anchor">#</a></h1><p><code>transforms</code> 和 <code>opacity</code> 这两个属性更改不会触发重排与重绘，它们是可以由合成器（composite）单独处理的属性。</p><h2><span id="pyi-transform-2d">一、transform 2d</span><a href="#pyi-transform-2d" class="header-anchor">#</a></h2><p>改变标签在二维平面的位置和形状。</p><p>类型</p><ul><li><code>translate</code> 移动</li><li><code>rotate</code> 旋转</li><li><code>scale</code> 缩放</li></ul><h3><span id="p1-yi-dong-translate">1. 移动 <code>translate</code></span><a href="#p1-yi-dong-translate" class="header-anchor">#</a></h3><ul><li><code>transform: translate(x, y)</code></li><li><code>transform: translateX(n)/Y(n)</code></li><li>最大的优点就是不影响其他元素的位置。</li><li>行内标签没有效果。</li></ul><h3><span id="p2-xuan-zhuan-rotate">2. 旋转 <code>rotate</code></span><a href="#p2-xuan-zhuan-rotate" class="header-anchor">#</a></h3><ul><li>单位是 <code>deg</code></li><li>正是顺时针，负是逆时针。</li><li>可以通过 <code>transform-oringin</code> 设置旋转中心点</li></ul><h3><span id="p3-suo-fang-scale">3. 缩放 <code>scale</code></span><a href="#p3-suo-fang-scale" class="header-anchor">#</a></h3><p>备注</p><ul><li>同时使用多个转换，其格式为 <code>transform: translate() rotate() scale()</code></li></ul><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 2102：CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210202：CSS 选择器</title>
      <link href="/2102-css/02-xuan-ze-qi/"/>
      <url>/2102-css/02-xuan-ze-qi/</url>
      
        <content type="html"><![CDATA[<h1><span id="css-xuan-ze-qi">CSS 选择器</span><a href="#css-xuan-ze-qi" class="header-anchor">#</a></h1><p>要使用 CSS 对 HTML 页面元素实现一对一，一对多，多对一的控制，就要用到选择器。</p><h2><span id="pyi-ji-ben-xuan-ze-qi">一、基本选择器</span><a href="#pyi-ji-ben-xuan-ze-qi" class="header-anchor">#</a></h2><h3><span id="p1-yuan-su-xuan-ze-qi">1. 元素选择器</span><a href="#p1-yuan-su-xuan-ze-qi" class="header-anchor">#</a></h3><p>也叫标签选择器。</p><p>通过元素标签名字选择页面中所有这个标签的元素。</p><h3><span id="p2-lei-xuan-ze-qi">2. 类选择器</span><a href="#p2-lei-xuan-ze-qi" class="header-anchor">#</a></h3><p><code>class</code> 属性用来给元素分组，是允许多个元素拥有的，且一个元素可以拥有多个<code>class</code>。</p><p>通过 <code>.</code> + 元素的<code>class</code>属性进行选择。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.qwq</span> <span class="token punctuation">&#123;</span>    ...  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qwq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 允许书写多个类名，用空格分隔 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qwq1 qwq2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p3-id-xuan-ze-qi">3. id 选择器</span><a href="#p3-id-xuan-ze-qi" class="header-anchor">#</a></h3><p><code>id</code>相对<code>class</code>来说，是不允许重复的，且一个元素只能有一个id属性。</p><blockquote><p><code>id</code> 属性命名规范：</p><ul><li>以字母开头</li><li>不出现汉字、空格</li><li>不推荐带有<code>ad</code> 相关的英文单词，容易被浏览器广告过滤插件屏蔽</li><li>见名知意</li></ul></blockquote><p>通过 <code>#</code> + 元素的<code>id</code>属性进行选择。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#qwq</span> <span class="token punctuation">&#123;</span>    ...  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qwq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="p4-tong-pei-fu-xuan-ze-qi">4. 通配符选择器</span><a href="#p4-tong-pei-fu-xuan-ze-qi" class="header-anchor">#</a></h3><p>表示选择所有的元素。</p><p>几乎不用，影响性能。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  ...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="per-guan-xi-xuan-ze-qi">二、关系选择器</span><a href="#per-guan-xi-xuan-ze-qi" class="header-anchor">#</a></h2><h3><span id="p1-qun-zu-xuan-ze-qi-bing-ji-xuan-ze-qi">1. 群组选择器（并集选择器）</span><a href="#p1-qun-zu-xuan-ze-qi-bing-ji-xuan-ze-qi" class="header-anchor">#</a></h3><p>用 <code>,</code>就能对多个选择器一起设置样式。</p><h3><span id="p2-jiao-ji-xuan-ze-qi">2. 交集选择器</span><a href="#p2-jiao-ji-xuan-ze-qi" class="header-anchor">#</a></h3><p>由两个选择器直接连接构成，其结果是选中二者各自元素范围的交集。其中第一必须是标签选择器，第二个必须是类选择器或者<code>id</code>选择器，两个选择器之间不能有空格，必须连续书写。</p><p>如：<code>p#xxx</code> 或者 <code>p.xxx</code>。</p><h3><span id="p3-zi-ji-xuan-ze-qi">3. 子级选择器</span><a href="#p3-zi-ji-xuan-ze-qi" class="header-anchor">#</a></h3><p>用<code>&gt;</code>隔开。如 <code>A&gt;B</code>，在A元素中寻找子元素是B的。</p><h3><span id="p4-hou-dai-xuan-ze-qi">4. 后代选择器</span><a href="#p4-hou-dai-xuan-ze-qi" class="header-anchor">#</a></h3><p>用空格隔开。如 <code>A B</code>，意思是在A元素中寻找后代是B的元素。</p><h3><span id="p5-xiong-di-xuan-ze-qi">5. 兄弟选择器</span><a href="#p5-xiong-di-xuan-ze-qi" class="header-anchor">#</a></h3><p>相邻兄弟选择器 <code>A+B</code>，意思是在A元素下紧贴这A的并且是B才能被选中。</p><p>通用兄弟选择器 <code>A~B</code>，在A元素下边的兄弟元素，并且是B就能被选中。</p><h2><span id="psan-shu-xing-xuan-ze-qi">三、属性选择器</span><a href="#psan-shu-xing-xuan-ze-qi" class="header-anchor">#</a></h2><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>E[attr]</code></td><td>有属性<code>attr</code>的所有E元素</td></tr><tr><td><code>E[attr='val']</code></td><td>属性<code>attr</code>的值是<code>val</code>的元素</td></tr><tr><td><code>E[attr^='val']</code></td><td>属性<code>attr</code>的值以<code>val</code>开头的元素</td></tr><tr><td><code>E[attr$='val']</code></td><td>属性<code>attr</code>的值以<code>val</code>结尾的元素</td></tr><tr><td><code>E[attr*='val']</code></td><td>属性<code>attr</code>的值包含<code>val</code>字符串的元素</td></tr></tbody></table><h2><span id="psi-wei-lei-xuan-ze-qi">四、伪类选择器</span><a href="#psi-wei-lei-xuan-ze-qi" class="header-anchor">#</a></h2><h3><span id="p1-dong-tai-wei-lei-xuan-ze-qi">1. 动态伪类选择器</span><a href="#p1-dong-tai-wei-lei-xuan-ze-qi" class="header-anchor">#</a></h3><ul><li>锚点伪类：<code>link</code>、<code>visited</code></li><li>用户行为伪类：<code>hover</code>、<code>active</code>、<code>focus</code></li><li>目标伪类：<code>target</code>（IE9及以上）</li></ul><h3><span id="p2-zhuang-tai-wei-lei-xuan-ze-qi">2. 状态伪类选择器</span><a href="#p2-zhuang-tai-wei-lei-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>E:enabled</code></td><td>匹配表单中可用的元素</td></tr><tr><td><code>E:disabled</code></td><td>匹配表单中禁用的元素</td></tr><tr><td><code>E:checked</code></td><td>匹配表单中被选中的<code>radio</code>（单选框）或<code>checkbox</code>（复选框）元素</td></tr></tbody></table><h3><span id="p3-jie-gou-xing-wei-lei-xuan-ze-qi">3. 结构性伪类选择器</span><a href="#p3-jie-gou-xing-wei-lei-xuan-ze-qi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>选择器</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>E:first-child</code></td><td>选择第一个子元素E</td></tr><tr><td><code>E:last-child</code></td><td>选择最后一个子元素E</td></tr><tr><td><code>E:nth-child(n)</code></td><td>选择一个或多个特定的子元素 （第一个编号为1）</td></tr><tr><td><code>E:nth-last-child(n)</code></td><td>选择一个或多个特定的子元素，从最后一个子元素开始算</td></tr><tr><td><code>E:only-child</code></td><td>匹配父元素下仅有的一个子元素</td></tr><tr><td><code>E:empty</code></td><td>匹配一个不包含任何子元素的元素 ( 文本节点也被看作子元素 )</td></tr><tr><td><code>E:not(s)</code></td><td>匹配不符合当前选择器的任何元素( 反选 )</td></tr></tbody></table><h2><span id="pwu-wei-yuan-su-xuan-ze-qi">五、伪元素选择器</span><a href="#pwu-wei-yuan-su-xuan-ze-qi" class="header-anchor">#</a></h2><p><code>:before</code></p><p><code>:after</code></p><p>待更新。</p><h2><span id="pliu-xuan-ze-qi-de-you-xian-ji-yu-quan-chong">六、选择器的优先级与权重</span><a href="#pliu-xuan-ze-qi-de-you-xian-ji-yu-quan-chong" class="header-anchor">#</a></h2><h3><span id="p1-important">1. <code>!important</code></span><a href="#p1-important" class="header-anchor">#</a></h3><p>提高指定样式规则的优先级为最高优先级。</p><p>写在定义的最后面。如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.xxx</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="p2-you-xian-ji-shun-xu">2. 优先级顺序</span><a href="#p2-you-xian-ji-shun-xu" class="header-anchor">#</a></h3><p>从上到下，依次增加。</p><ul><li>默认 / 继承（<code>inherit</code>）的样式</li><li>通配符</li><li>标签选择器</li><li>类选择器</li><li><code>id</code> 选择器</li><li>行内书写的样式</li><li><code>!important</code></li></ul><p>当优先级相同时，后写的样式优先级更高。</p><h3><span id="p3-quan-chong-ji-suan">3. 权重计算</span><a href="#p3-quan-chong-ji-suan" class="header-anchor">#</a></h3><table><thead><tr><th>类型</th><th>优先级权重</th></tr></thead><tbody><tr><td><code>!important</code></td><td>∞</td></tr><tr><td>行内书写</td><td>1000</td></tr><tr><td><code>id</code> 选择器</td><td>100</td></tr><tr><td>类选择器、伪类选择器、属性选择器</td><td>10</td></tr><tr><td>标签选择器、伪元素选择器</td><td>1</td></tr></tbody></table><p>待更新。</p>]]></content>
      
      
      <categories>
          
          <category> 2102：CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>210201：CSS 开始</title>
      <link href="/2102-css/01-kai-shi/"/>
      <url>/2102-css/01-kai-shi/</url>
      
        <content type="html"><![CDATA[<h1><span id="css-kai-shi">CSS 开始</span><a href="#css-kai-shi" class="header-anchor">#</a></h1><p>CSS，即 Cascading Style Sheets，层叠样式表。</p><p>具有：</p><ul><li>像素级精确控制。</li><li>将内容和表现形式分离。</li><li>层叠特性。</li></ul><h2><span id="pyi-ji-ben-yu-ju">一、基本语句</span><a href="#pyi-ji-ben-yu-ju" class="header-anchor">#</a></h2><p>通常分为三部分：选择器，属性，属性值。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">       <span class="token selector">属性      分号.box</span> <span class="token punctuation">&#123;</span> <span class="token property">width</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  选择器        属性值  可以写多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="per-shi-yong-fang-shi">二、使用方式</span><a href="#per-shi-yong-fang-shi" class="header-anchor">#</a></h2><h3><span id="p1-nei-lian-shi">1. 内联式</span><a href="#p1-nei-lian-shi" class="header-anchor">#</a></h3><p>一般不推荐使用。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特点：</p><ul><li>优先级高</li><li>臃肿，代码冗余（不能复用）</li><li>结构和样式没有分离，不方便维护</li></ul><h3><span id="p2-tou-bu-yin-ru">2. 头部引入</span><a href="#p2-tou-bu-yin-ru" class="header-anchor">#</a></h3><p>常用。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">div</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：</p><ul><li>方便维护和修改</li><li>样式和结构分离</li></ul><h3><span id="p3-wai-bu-yin-ru">3. 外部引入</span><a href="#p3-wai-bu-yin-ru" class="header-anchor">#</a></h3><p>（1）<code>link</code> 方式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）<code>@import</code> 方式</p><p>不推荐。</p><p>（3）<code>@import</code> 和 <code>link</code> 方式引入的区别：</p><ul><li><code>link</code> 功能较多，比如可以定义 RSS，而 <code>@import</code> 只能用于加载 CSS</li><li>当解析到 <code>link</code> 时，页面会同步加载所引用的 CSS，而 <code>@import</code> 所引用的 CSS 会等页面加载完才被加载</li><li><code>link</code> 可以用 JS 动态加载 CSS，而 <code>@import</code> 不允许</li><li><code>@import</code> 在 IE5 以上才能使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2102：CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>181001：Markdown 快速上手</title>
      <link href="/1810-markdown/01-markdown-kuai-su-shang-shou/"/>
      <url>/1810-markdown/01-markdown-kuai-su-shang-shou/</url>
      
        <content type="html"><![CDATA[<h1><span id="markdown-kuai-su-shang-shou">Markdown 快速上手</span><a href="#markdown-kuai-su-shang-shou" class="header-anchor">#</a></h1><ol><li><p>Markdown 文档的格式是 <code>.md</code> ，推荐使用编辑器 <code>Typora</code></p></li><li><p>标题 <code>#</code> ：</p><pre class="line-numbers language-md" data-language="md"><code class="language-md"># 一级标题## 二级标题### 三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注释 <code>&gt;</code></p><blockquote><p>这是注释</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&gt; 这是注释<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>行内代码用 ` （Tab键上面，1键右边）包裹起来即可</p><p><code>这是行内代码</code></p></li><li><p>多行代码用 ``` 包裹起来即可，可以在第一个上面注明是什么语言</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">​&#96;&#96;&#96;js这里写的是JS代码哦！​&#96;&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>加粗内容 <code>**</code> 包裹，如 <strong>加粗</strong></p></li><li><p>链接：<a href>链接</a></p><pre class="line-numbers language-md" data-language="md"><code class="language-md">[要显示的链接名字](链接地址)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>图片</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">![](图片地址)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>无序列表，用 <code>-</code> （也可以用<code>+</code> 或者 <code>*</code> ，建议统一）</p></li><li><p>有序列表用 <code>序号.</code></p><pre class="line-numbers language-md" data-language="md"><code class="language-md">- 无序列表- 无序列表1.有序列表2.有序列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 1810：Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>170201：用户交互心理学</title>
      <link href="/1702-yong-hu-jiao-hu-xin-li-xue/01/"/>
      <url>/1702-yong-hu-jiao-hu-xin-li-xue/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="yong-hu-jiao-hu-xin-li-xue">用户交互心理学</span><a href="#yong-hu-jiao-hu-xin-li-xue" class="header-anchor">#</a></h1><p>心理学是为了更好地帮助用户理解产品，做出更加易用的、能为用户解决问题的产品。</p><h2><span id="pyi-xi-ke-ding-lu">一、希克定律</span><a href="#pyi-xi-ke-ding-lu" class="header-anchor">#</a></h2><blockquote><p>Hick’s Law</p></blockquote><p>增加可选项也就增加了做决定的时间。</p><p>建议：要减少用户心理疲惫，就要减少选项，并给出默认选项来保持简洁。</p><h2><span id="per-fei-ci-fa-ze">二、费茨法则</span><a href="#per-fei-ci-fa-ze" class="header-anchor">#</a></h2><blockquote><p>Fitt’s Law</p></blockquote><p>简单地说，越大、离得越近的物体对用户来说越容易准确地接触；速度越快、目标尺寸越小，错误率就越高；用户对尺寸大但距离远和尺寸小但距离近的元素（同等比例）完成任务的时间相等。</p><p>建议：将你界面上的关键元素做得越小越远，用户完成任务的时间就越长。这并不是说要把元素设计得越大、越近就越好，而是要根据实际需要来进行调整。</p><p>例子：比如，Chrome 浏览器的关闭键在最右上角的最边缘位置，离鼠标常规操作位置（浏览器界面偏中间）最远，用户要到达关闭的距离最远，给出了用户足够多的反应时间来做出关闭这一决定，防止误操作。再比如，打开你的百度地图，切换到驾车导航界面，是不是发现整个界面元素都比百度地图其他界面大了好多倍？利用费茨法则就容易解释了，因为开车的人并没有那么多的时间和精力去进行精细的操作，并且，司机需要一边看路一边看地图，所以这个时候大、近、准确就是界面元素设计最需要的，这种大大的风格也就不难理解了。</p><h2><span id="psan-mi-le-ding-lu">三、米勒定律</span><a href="#psan-mi-le-ding-lu" class="header-anchor">#</a></h2><blockquote><p>Miller’s Law</p></blockquote><p>人脑记忆可存储的元素块平均是7个一组。</p><p>建议：必要时，对元素进行分组，并且参考希克定律减少复杂性。</p><p>例子：在神经科学对记忆的研究里，科学家发现人脑记忆不是一次性记下很多元素，而是分组块记忆的。每个记忆组块平均最多包含7个元素。所以这对设计师在对功能架构分区的启示就可以体现在，每个分类标签（比如网页导航栏）最好不要超过7个。</p><h2><span id="psi-ge-shi-ta-xin-li-xue-wan-xing-fa-ze">四、格式塔心理学完形法则</span><a href="#psi-ge-shi-ta-xin-li-xue-wan-xing-fa-ze" class="header-anchor">#</a></h2><blockquote><p>Gestalt Principles</p></blockquote><p>相似性：相似/相同的视觉特征趋于自动产生联系。</p><p>相近性：相近的物体趋于组成整体。</p><p>持续性：一旦目光开始注意到一个物体，就会持续跟随物体移动方向移动，直到碰到另一个障碍物。</p><p>闭合性：当信息给出可辨识的一部分的时候，大脑会自动补全缺失的信息。</p><h2><span id="pwu-shuo-fu-yuan-ze">五、说服原则</span><a href="#pwu-shuo-fu-yuan-ze" class="header-anchor">#</a></h2><blockquote><p>Persuasion Principles from Robert Cialdini</p></blockquote><p>互惠：如果我们受到了某种恩惠，就趋于回报这种恩惠。</p><p>一致：我们都倾向于保持一致的人格特征、原则和价值观。</p><p>社会认同：当不确定要不要做的时候，我们倾向于寻求他人的做法作为指导。如XMind公司在网站放出的客户群标识。</p><p>喜好：我们更容易认同我们喜欢的人提出的要求。</p><p>权威：如果我们认为一个人是可信赖的专家，就更倾向认同他的观点。</p><p>稀缺：我们跟偏爱难以得到的东西。</p><h2><span id="pwu-mian-fei-de-mo-li">五、免费的魔力</span><a href="#pwu-mian-fei-de-mo-li" class="header-anchor">#</a></h2><p>人们总是喜欢免费的东西，哪怕这实际上会付出一定的成本。</p><blockquote><p>在《可预见的非理性》一书里面提到一个实验。受试者有两个选择。价值 $10 的亚马逊免费礼券或是花 $7 购买价值 $20 的亚马逊礼券，大部分人都选择了免费的那一款。即使后者明显会带来更多价值。</p></blockquote><p>建议：考虑利用关键词「免费 」来提升点击率和转化率。</p><h2><span id="pliu-xuan-ze-xing-wu-shi">六、选择性无视</span><a href="#pliu-xuan-ze-xing-wu-shi" class="header-anchor">#</a></h2><p>忽视与任务无关的元素。</p><p>建议：突出页面所做的改变。遵循用户心理习惯来提供可用性，完成用户期待。</p><h2><span id="pqi-neng-gong-xing-li-lun">七、能供性理论</span><a href="#pqi-neng-gong-xing-li-lun" class="header-anchor">#</a></h2><blockquote><p>Affordance Theory</p></blockquote><p>人们对世界的感知不仅仅来自于物体的形状和空间关系，还来自于物体的所能给人提供的用途。</p><p>例子：用来按的按钮，用来拉的门把，用来撬的杠杆等等。</p><p>建议：不要用超出常理的设计或暗示来让用户对你的产品功能造成误解。</p>]]></content>
      
      
      <categories>
          
          <category> 1702：用户交互心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>170101：平面设计基础</title>
      <link href="/1701-ping-mian-she-ji-ji-chu/01/"/>
      <url>/1701-ping-mian-she-ji-ji-chu/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="ping-mian-she-ji-ji-chu">平面设计基础</span><a href="#ping-mian-she-ji-ji-chu" class="header-anchor">#</a></h1><h2><span id="pbian-ping-hua">扁平化</span><a href="#pbian-ping-hua" class="header-anchor">#</a></h2><p>扁平化的概念最核心的地方就是：去掉冗余的装饰效果，去掉多余的透视，纹理，渐变等等能做出3D效果的元素。让信息本身重新作为核心被凸显出来。并且在设计元素上强调抽象、极简、符号化。</p>]]></content>
      
      
      <categories>
          
          <category> 1701：平面设计基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>170301：色彩库</title>
      <link href="/1703-se-cai/01-se-cai-ku/"/>
      <url>/1703-se-cai/01-se-cai-ku/</url>
      
        <content type="html"><![CDATA[<h1><span id="se-cai-ku">色彩库</span><a href="#se-cai-ku" class="header-anchor">#</a></h1><ul><li>果灰 <code>#7ecdb6</code>  <span style="display: inline-block; width: 20px; height: 20px; background-color: #7ecdb6"></span></li><li>龙泉青瓷釉 <code>#c8e6c6</code>  <span style="display: inline-block; width: 20px; height: 20px; background-color: #c8e6c6"></span></li><li>银箔 <code>#d4d4d4</code>  <span style="display: inline-block; width: 20px; height: 20px; background-color: #d4d4d4"></span></li><li>芽灰 <code>#e3dbbf</code>  <span style="display: inline-block; width: 20px; height: 20px; background-color: #e3dbbf"></span></li></ul>]]></content>
      
      
      <categories>
          
          <category> 1703：色彩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220202：闭包</title>
      <link href="/2202-es-gao-ji/02-bi-bao/"/>
      <url>/2202-es-gao-ji/02-bi-bao/</url>
      
        <content type="html"><![CDATA[<h1><span id="bi-bao">闭包</span><a href="#bi-bao" class="header-anchor">#</a></h1><h2><span id="p1-shi-me-shi-bi-bao">1、什么是闭包</span><a href="#p1-shi-me-shi-bi-bao" class="header-anchor">#</a></h2><p>闭包是一个包含被引用局部变量的 <code>closure</code> 对象，存在嵌套的内部函数中。</p><h2><span id="p2-zen-me-chan-sheng-bi-bao-amp-sheng-ming-zhou-qi">2、怎么产生闭包 &amp; 生命周期</span><a href="#p2-zen-me-chan-sheng-bi-bao-amp-sheng-ming-zhou-qi" class="header-anchor">#</a></h2><p>必须满足三个条件</p><ul><li>函数嵌套函数</li><li>内部函数调用外部函数的局部变量（引入全局变量是不会产生闭包的）</li><li>调用外部函数</li></ul><p>生命周期</p><ul><li>内部函数定义执行完成就产生</li><li>内部函数成为垃圾对象就销毁</li></ul><h2><span id="p3-bi-bao-de-zuo-yong-yu-que-dian">3、闭包的作用与缺点</span><a href="#p3-bi-bao-de-zuo-yong-yu-que-dian" class="header-anchor">#</a></h2><p>作用</p><ul><li>延长了局部变量的存活时间</li><li>让函数外部操作函数内部的数据</li></ul><p>缺点</p><ul><li>用太多可能会导致内存泄露（因为占用内部空间不释放）</li></ul><h2><span id="p4-bi-bao-de-ying-yong">4、闭包的应用</span><a href="#p4-bi-bao-de-ying-yong" class="header-anchor">#</a></h2><ul><li>迭代器</li><li>React 组件高阶函数（为了复用函数，给内部函数传参）</li><li>Vue 原理中存在（双向数据绑定原理）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2202：ES高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220503：NodeJS 版本管理</title>
      <link href="/2205-nodejs/03-npm-ban-ben-guan-li/"/>
      <url>/2205-nodejs/03-npm-ban-ben-guan-li/</url>
      
        <content type="html"><![CDATA[<h1><span id="nodejs-ban-ben-guan-li">NodeJS 版本管理</span><a href="#nodejs-ban-ben-guan-li" class="header-anchor">#</a></h1><h2><span id="pyi-n">一、<code>n</code></span><a href="#pyi-n" class="header-anchor">#</a></h2><p>用于 Mac 系统。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 安装sudo npm i -g n# 安装指定版本的 node.jssudo n 12.18.2# 切换sudo n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="per-nvm">二、<code>NVM</code></span><a href="#per-nvm" class="header-anchor">#</a></h2><p>用于 Windows 系统。<br>全称 <code>Node.js Version Management</code></p><ul><li><p><a href="https://github.com/coreybutler/nvm-windows/releases">下载</a>，推荐使用 <code>nvm-setup.zip</code></p></li><li><p>相关命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看已经安装的node版本nvm ls# 安装对应的版本 nvm install xxx# 卸载nvm uninstall xxx# 使用nvm use xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2205：NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ✔ </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220502：NPM</title>
      <link href="/2205-nodejs/02-npm/"/>
      <url>/2205-nodejs/02-npm/</url>
      
        <content type="html"><![CDATA[<h1><span id="npm">NPM</span><a href="#npm" class="header-anchor">#</a></h1><p><code>npm</code> 是 Node 的模块管理器，全称 <code>Node Package Manager</code>。</p><h2><span id="pyi-chang-yong-ming-ling">一、常用命令</span><a href="#pyi-chang-yong-ming-ling" class="header-anchor">#</a></h2><p>1、安装</p><blockquote><p><code>npm install &lt;package&gt;</code></p><p><code>npm install</code> 可以简写为 <code>npm i</code> （？二者有一些微小的差异）</p><p><strong>强制安装</strong> 安装之前，会先检查 <code>node_modules</code> 目录之中是否已经存在指定模块，就会跳过，即使有一个新版本也是如此。使用<code>-f</code>或者<code>--force</code> 参数强制安装。</p><p><strong>安装指定版本</strong> 在包名@指定版本</p><p>全局安装 <code>-g</code> 或者 <code>-global</code></p><p>安装到生产和开发环境(dependencies) <code>-D</code> 或者 <code>--save-dev</code> （默认）</p><p>仅安装到开发环境(devDependencies) <code>-S</code> 或者 <code>--save</code></p><p><strong>安装项目依赖</strong> <code>npm i</code></p></blockquote><p>2、更新</p><blockquote><p><code>npm updata &lt;package&gt;</code></p></blockquote><p>3、查询版本</p><blockquote><p><code>npm view &lt;package&gt;</code></p><p>简写为 <code>npm v</code></p></blockquote><p>4、查看全局安装的包</p><blockquote><p><code>npm list -g --depth 0</code></p></blockquote><p>5、卸载</p><blockquote><p><code>npm uninstall &lt;package&gt;</code></p></blockquote><p>6、启动、停止、重启模块</p><blockquote><p><code>npm start</code></p><p><code>npm stop</code></p><p><code>npm restart</code></p></blockquote><p>7、切换镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 切换阿里镜像npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org# 切换回原镜像npm config set registry https:&#x2F;&#x2F;registry.npmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>8、清缓存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm cache verify# mac 要加 sudo 前缀<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="pcan-kao">参考</span><a href="#pcan-kao" class="header-anchor">#</a></h2><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html">npm 模块安装机制简介</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2205：NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>250101：Vue 开始</title>
      <link href="/2501-vue-ji-chu/01/"/>
      <url>/2501-vue-ji-chu/01/</url>
      
        <content type="html"><![CDATA[<h1><span id="vue-kai-shi">Vue 开始</span><a href="#vue-kai-shi" class="header-anchor">#</a></h1><p>渐进式，动态构建用户界面</p><p><a href="https://cn.vuejs.org/">文档</a></p><h2><span id="pte-dian">特点</span><a href="#pte-dian" class="header-anchor">#</a></h2><p>编码简洁，体积小，运行效率高，适合移动和PC端开发<br>借鉴了 Angular 的模版和数据绑定技术<br>借鉴了 React 的组件化和虚拟DOM技术</p>]]></content>
      
      
      <categories>
          
          <category> 2501：Vue基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220110：ES 杂项</title>
      <link href="/2201-es-ji-chu/10-za-xiang/"/>
      <url>/2201-es-ji-chu/10-za-xiang/</url>
      
        <content type="html"><![CDATA[<h2><span id="peval">eval</span><a href="#peval" class="header-anchor">#</a></h2><h2><span id="pdebugger">debugger</span><a href="#pdebugger" class="header-anchor">#</a></h2><h2><span id="pin-of">in/of</span><a href="#pin-of" class="header-anchor">#</a></h2><p>1、<code>in</code> 用来判断对象是否是数组/对象的元素/属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token constant">A</span> <span class="token keyword">in</span> <span class="token constant">B</span><span class="token comment">// 当B是数组时，A指的是数组的索引</span><span class="token comment">// 当B是对象时，A指的是对象的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、<code>for...in</code> 对数组或者对象循环（迭代）操作</p><p>对于数组来说，遍历出来的是数组元素</p><p>对于对象来说，遍历出来的是对象属性（key）</p><p>可枚举属性（<code>enumerable</code> ，不包括 <code>symbol</code>），会循环原型链和手动添加的键</p><p>某些情况下，循环顺序是随机的</p><p>3、<code>for...of</code> 遍历出来的是对象（数组、类数组、字符串）的值</p><p>可以使用 <code>break</code> <code>continue</code> <code>return</code></p>]]></content>
      
      
      <categories>
          
          <category> 2201：ES基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
